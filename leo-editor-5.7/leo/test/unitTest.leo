<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.44" body_secondary_ratio="0.72">
	<global_window_position top="79" left="304" height="801" width="1160"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="ekr.20070417092935"><vh>Startup</vh>
<v t="ekr.20140716121225.4354"><vh>@@button print-gnx</vh></v>
<v t="ekr.20161123080832.1"><vh>@button make-table</vh></v>
<v t="ekr.20111112092813.4154"><vh>@command cls</vh></v>
<v t="ekr.20101220161557.6011"><vh>@file unitTestStartup.txt</vh></v>
<v t="ekr.20150216110251.11"><vh>@persistence</vh>
<v t="ekr.20170818044949.1"><vh>@data:#@auto</vh></v>
<v t="ekr.20170818044949.2"><vh>@data:#@auto</vh>
<v t="ekr.20170818044949.3"><vh>@gnxs</vh></v>
</v>
<v t="ekr.20170818044949.4"><vh>@data:#@auto</vh></v>
<v t="ekr.20170818044949.5"><vh>@data:#@auto</vh>
<v t="ekr.20170818044949.6"><vh>@gnxs</vh></v>
</v>
<v t="ekr.20171230052539.1"><vh>@data:@auto-org unittest/at-auto-org-line-number-test.py</vh>
<v t="ekr.20171230171407.6"><vh>@gnxs</vh></v>
</v>
<v t="ekr.20171230164813.1"><vh>@data:@auto-otl unittest/at-auto-otl-line-number-test.otl</vh>
<v t="ekr.20171230171407.7"><vh>@gnxs</vh></v>
</v>
<v t="ekr.20171230170021.1"><vh>@data:@auto unittest/at-auto-md-line-number-test.md</vh>
<v t="ekr.20171230171614.10"><vh>@gnxs</vh></v>
</v>
<v t="ekr.20171230171343.1"><vh>@data:@auto unittest/at-auto-line-number-test.py</vh>
<v t="ekr.20171230171407.1"><vh>@gnxs</vh></v>
</v>
<v t="ekr.20171230171343.4"><vh>@data:@auto unittest/at-auto-test.py</vh>
<v t="ekr.20171230171407.3"><vh>@gnxs</vh></v>
</v>
<v t="ekr.20171230171343.6"><vh>@data:@auto unittest/at-auto-unit-test.py</vh>
<v t="ekr.20171230171407.4"><vh>@gnxs</vh></v>
</v>
<v t="ekr.20171230171343.8"><vh>@data:@auto-ctext unittest/at-auto-ctext-test.txt</vh>
<v t="ekr.20171230171407.5"><vh>@gnxs</vh></v>
</v>
<v t="ekr.20171230171343.12"><vh>@data:@auto-rst unittest/at-auto-rst-line-number-test.txt</vh>
<v t="ekr.20171230171407.8"><vh>@gnxs</vh></v>
</v>
</v>
<v t="ekr.20041121151002"><vh>@settings</vh>
<v t="ekr.20080324133327.2"><vh>@bool allow_middle_button_paste = True</vh></v>
<v t="ekr.20161011095551.1"><vh>@bool allow_section_references_in_at_auto = True</vh></v>
<v t="ekr.20101009105124.6195"><vh>@bool put_expansion_bits_in_leo_files = True</vh></v>
<v t="ekr.20140902101931.4478"><vh>@bool qt-use-scintilla = False</vh></v>
<v t="ekr.20161129030232.1"><vh>@bool run-pyflakes-on-write = False</vh></v>
<v t="ekr.20140217055617.4231"><vh>@bool scriptingatscriptnodes = True</vh></v>
<v t="ekr.20180214042153.1"><vh>@bool select-next-after-delete = False</vh></v>
<v t="ekr.20051013162226"><vh>@bool test_setting = True</vh></v>
<v t="ekr.20150602215639.1"><vh>@bool tidy_autobeautify = False</vh></v>
<v t="ekr.20070503064257"><vh>@bool use_chapters = True</vh></v>
<v t="ekr.20150321155210.11"><vh>@bool verbose_check_outline = False</vh></v>
<v t="ekr.20070528100318"><vh>@bool write_strips_blank_lines = False</vh></v>
<v t="ekr.20170415084531.1"><vh>@data import_html_tags</vh></v>
<v t="ekr.20111026111009.3972"><vh>@data import_xml_tags</vh></v>
<v t="ekr.20111123042627.6654"><vh>@enabled-plugins</vh></v>
<v t="ekr.20050328101834"><vh>@page http plugin</vh>
<v t="ekr.20050328101834.1"><vh>@bool http_active = False</vh></v>
<v t="ekr.20050328101834.2"><vh>@int port = 8080</vh></v>
<v t="ekr.20050328101834.3"><vh>@string rst_http_attributename = ''</vh></v>
</v>
<v t="ekr.20111112093605.4679"><vh>@shortcuts</vh></v>
<v t="ekr.20110521073115.3494"><vh>colorizer colors</vh>
<v t="ekr.20110521073115.3495"><vh>@@color keyword3_color = orange</vh></v>
<v t="ekr.20110521073115.3496"><vh>@@color keyword4_color = pink</vh></v>
</v>
<v t="ekr.20111124094121.3941"><vh>Empty @buttons and @commands nodes</vh>
<v t="ekr.20111124094121.3942"><vh>@buttons</vh></v>
<v t="ekr.20111124094121.3943"><vh>@commands</vh></v>
</v>
<v t="ekr.20171126153138.1"><vh>Required for reformat-paragraph tests</vh>
<v t="ekr.20171126152936.1"><vh>@int page_width = 80</vh></v>
<v t="ekr.20171126153044.1"><vh>@int tab_width = -4</vh></v>
</v>
<v t="ekr.20131111155830.4249"><vh>Vim settings</vh>
<v t="ekr.20131111155830.4250"><vh>@@@data vim-control-character-commands</vh></v>
<v t="ekr.20131111155830.4251"><vh>@data vim-command-tails</vh></v>
<v t="ekr.20131111155830.4252"><vh>@data vim-commands</vh></v>
<v t="ekr.20131111155830.4253"><vh>@data vim-motions</vh></v>
<v t="ekr.20131111155830.4254"><vh>@data vim-motion-tails</vh></v>
</v>
</v>
<v t="ekr.20100123172713.5114"><vh>Scripts</vh>
<v t="ekr.20100102164959.5088"><vh>Count pages</vh></v>
<v t="ekr.20100123172713.5116"><vh>Clean all tnodeLists</vh></v>
<v t="ekr.20070217065840"><vh>Scripts that make unit tests</vh>
<v t="ekr.20070217065840.1"><vh>@@command make-test @key = Alt-5</vh></v>
<v t="ekr.20070217065840.2"><vh>@@command do-before @key = Alt-6</vh>
<v t="ekr.20070217065840.3"><vh>getSel</vh></v>
<v t="ekr.20070217065840.4"><vh>findNodes</vh></v>
<v t="ekr.20070217065840.5"><vh>putSelectionInHeadline</vh></v>
</v>
<v t="ekr.20070217065840.6"><vh>@@command do-after @key = Alt-7</vh>
<v t="ekr.20070217072822"><vh>getSel</vh></v>
<v t="ekr.20070217065840.8"><vh>findNodes</vh></v>
<v t="ekr.20070217065840.9"><vh>putSelectionInHeadline</vh></v>
</v>
</v>
<v t="ekr.20070113145100"><vh>Create chinese folder</vh></v>
<v t="ekr.20071113140035"><vh>Find unique @ test nodes</vh></v>
<v t="ekr.20091206090247.5060"><vh>Clear all uA's, tnodeLists, etc.</vh>
<v t="ekr.20091206090247.5061"><vh>Clean unused tnodeLists</vh></v>
<v t="ekr.20091206090247.5062"><vh>Clear all timestamps</vh></v>
<v t="ekr.20091206090247.5063"><vh>Clear all uAs (unknown attributes)</vh></v>
</v>
</v>
</v>
<v t="ekr.20051012104957"><vh>@ignore Docs</vh>
<v t="bwmulder.20050108100437.1"><vh>How to run unit tests</vh></v>
<v t="ekr.20050618061835"><vh>How to use the @test directive, by Roger Erens</vh>
<v t="ekr.20050618061835.1"><vh>Intro</vh>
<v t="ekr.20050618061835.2"><vh>@url http://www.onlamp.com/pub/a/python/2005/02/03/tdd_pyunit2.html</vh></v>
</v>
<v t="ekr.20050618061835.3"><vh>Preparations: adding a button</vh>
<v t="ekr.20050618061835.4"><vh>@@button Do @test</vh></v>
</v>
<v t="ekr.20050618061835.5"><vh>Alpha</vh>
<v t="ekr.20050618061835.6"><vh>@test my first Leo test</vh></v>
<v t="ekr.20050618061835.7"><vh>output on the console</vh></v>
</v>
<v t="ekr.20050618061835.8"><vh>Bravo</vh>
<v t="ekr.20050618061835.9"><vh>@@test my second Leo test</vh></v>
<v t="ekr.20050618061835.10"><vh>output on the console</vh></v>
</v>
<v t="ekr.20050618061835.11"><vh>It takes two to tango</vh>
<v t="ekr.20050618061835.6"></v>
<v t="ekr.20050618061835.9"></v>
<v t="ekr.20050618061835.12"><vh>output on the console</vh></v>
</v>
<v t="ekr.20050618061835.13"><vh>Life gets more interesting</vh>
<v t="ekr.20050618061835.14"><vh>@@test koekiemonster.wants()</vh>
<v t="ekr.20050618061835.15"><vh>input data</vh></v>
<v t="ekr.20050618061835.16"><vh>expected result</vh></v>
</v>
<v t="ekr.20050618061835.17"><vh>output on the console</vh></v>
<v t="ekr.20050618061835.18"><vh>output on the console using print statements</vh></v>
</v>
<v t="ekr.20050618061835.19"><vh>How about @suite?</vh></v>
<v t="ekr.20050618061835.20"><vh>Final remarks</vh></v>
</v>
<v t="ekr.20111211094936.3970"><vh>@ignore To do</vh>
<v t="ekr.20111115080347.3872"><vh>To do: tests of the high-level interface</vh>
<v t="ekr.20100131171342.5478"><vh>@@@test that log and body implements high-level interface</vh></v>
</v>
<v t="ekr.20100131171342.5473"><vh>Tk gui tests</vh>
<v t="ekr.20100131171342.5474"><vh>@test leoBody is subset of leoTkBody</vh></v>
<v t="ekr.20100131171342.5475"><vh>@test leoFrame is subset of leoTkFrame</vh></v>
<v t="ekr.20100131171342.5476"><vh>@test leoGui is subset of leoTkGui</vh></v>
<v t="ekr.20100131171342.5477"><vh>@test leoTree is subset of leoTkTree</vh></v>
</v>
<v t="ekr.20111125183140.3952"><vh>@test ic.createOutline changes back-slashes to slashes</vh></v>
<v t="ekr.20111125182408.3947"><vh>@test ic.createImportParent changes back-slashes to slashes</vh></v>
</v>
</v>
<v t="ekr.20071113203234"><vh>@ignore Test files</vh>
<v t="ekr.20111214104615.3942"><vh>@@@auto unittest/at-auto-section-ref-test.py</vh>
<v t="ekr.20161011092326.7"><vh>at-auto-section-ref-test declarations</vh></v>
</v>
<v t="ekr.20161130041921.1"><vh>@@auto-rst unittest/at-auto-rst-line-number-test.rst</vh>
<v t="ekr.20161228071435.1"><vh>@nosent c:\test\bug-354-test.py</vh>
<v t="ekr.20161228071822.1"><vh>&lt;&lt; u:1 &gt;&gt;</vh></v>
<v t="ekr.20161228071836.1"><vh>&lt;&lt; ue:1 &gt;&gt;</vh></v>
<v t="ekr.20161228071849.1"><vh>&lt;&lt; u:2 &gt;&gt;</vh></v>
<v t="ekr.20161228071905.1"><vh>&lt;&lt; ue: 2&gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20110615130436.3317"><vh>@@file nonexistent-directory/orphan-bit-test.txt</vh></v>
<v t="ekr.20080907122804.1"><vh>@@shadow unittest/at-shadow-line-number-test.py</vh>
<v t="ekr.20150208213643.15"><vh>spam</vh></v>
<v t="ekr.20150208213643.16"><vh>eggs</vh></v>
</v>
<v t="ekr.20090704085350.5014"><vh>@@shadow unittest/at-shadow-test.py</vh>
<v t="ekr.20150208213643.12"><vh>spam</vh></v>
<v t="ekr.20150208213643.13"><vh>eggs</vh></v>
</v>
<v t="ekr.20111213122041.3930"><vh>@@shadow unittest/at-shadow-unlink-clones.py</vh>
<v t="ekr.20150208213643.18"><vh>Node 1</vh></v>
<v t="ekr.20150208213643.19"><vh>Node 2</vh></v>
</v>
<v t="ekr.20090704085350.5028"><vh>@asis unittest/at-asis-test.py</vh>
<v t="ekr.20090704085350.5029"><vh>spam</vh></v>
<v t="ekr.20090704085350.5030"><vh>eggs</vh></v>
</v>
<v t="ekr.20080904084223.1"><vh>@auto unittest/at-auto-line-number-test.py</vh>
<v t="ekr.20170504122721.1"><vh>at_auto_child</vh></v>
</v>
<v t="ekr.20150626101842.1"><vh>@auto unittest/at-auto-md-line-number-test.md</vh>
<v t="ekr.20171230171138.1"><vh>!Declarations</vh></v>
<v t="ekr.20170504122721.2"><vh>section 1</vh></v>
<v t="ekr.20170504122721.3"><vh>section 2</vh></v>
</v>
<v t="ekr.20090704085350.5056"><vh>@auto unittest/at-auto-test.py</vh>
<v t="ekr.20170504122721.4"><vh>spam</vh></v>
<v t="ekr.20170504122721.5"><vh>eggs</vh></v>
</v>
<v t="ekr.20110610122533.3407"><vh>@auto unittest/at-auto-unit-test.py</vh>
<v t="ekr.20170504122721.6"><vh>class class1</vh>
<v t="ekr.20170504122721.7"><vh>class1_method1</vh></v>
<v t="ekr.20170504122721.8"><vh>class1_method2</vh></v>
</v>
<v t="ekr.20170504122721.9"><vh>class class2</vh>
<v t="ekr.20170504122721.10"><vh>class2_method1</vh></v>
<v t="ekr.20170504122721.11"><vh>class2_method2</vh></v>
</v>
</v>
<v t="ekr.20161130052935.1"><vh>@auto-ctext unittest/at-auto-ctext-test.txt</vh>
<v t="ekr.20170504122721.12"><vh>A level one node</vh></v>
<v t="ekr.20170504122721.13"><vh>Another level one node</vh>
<v t="ekr.20170504122721.14"><vh>A level 2 node</vh></v>
</v>
</v>
<v t="ekr.20150626101627.1"><vh>@auto-org unittest/at-auto-org-line-number-test.org</vh>
<v t="ekr.20170504122721.15"><vh>section 1</vh></v>
<v t="ekr.20170504122721.16"><vh>section 2</vh></v>
</v>
<v t="ekr.20150626100719.1"><vh>@auto-otl unittest/at-auto-otl-line-number-test.otl</vh>
<v t="ekr.20171230171355.20"><vh>First line.</vh></v>
<v t="ekr.20170504122721.17"><vh>section 1</vh></v>
<v t="ekr.20170504122721.18"><vh>section 2</vh></v>
</v>
<v t="ekr.20150626093745.1"><vh>@auto-rst unittest/at-auto-rst-line-number-test.txt</vh></v>
<v t="ekr.20160403143048.1"><vh>@clean unittest/at-clean-line-number-test.c</vh>
<v t="ekr.20160403143048.2"><vh>spam</vh></v>
<v t="ekr.20160403150121.1"><vh>eggs</vh></v>
</v>
<v t="ekr.20160403143130.1"><vh>@clean unittest/at-clean-line-number-test.py</vh>
<v t="ekr.20160403150216.1"><vh>spam</vh></v>
<v t="ekr.20160403150222.1"><vh>eggs</vh></v>
</v>
<v t="ekr.20170401122024.7"><vh>@file C:/leo.repo/leo-editor/leo/test/unittest/input/cweave.w</vh></v>
<v t="ekr.20160403123754.1"><vh>@file unittest/at-file-line-number-test.c</vh>
<v t="ekr.20160403123754.2"><vh>at-file-child</vh></v>
</v>
<v t="ekr.20080904102243.2"><vh>@file unittest/at-file-line-number-test.py</vh>
<v t="ekr.20080904102243.3"><vh>at-file-child</vh></v>
</v>
<v t="ekr.20111021115306.3697"><vh>@file unittest/tex-error.tex</vh>
<v t="ekr.20111021115306.3711"><vh>&lt;&lt; Document &gt;&gt;</vh></v>
</v>
<v t="ekr.20130912092638.4150"><vh>@file unittest/utf-16-test.txt</vh></v>
<v t="ekr.20080907123324.2"><vh>@nosent unittest/at-nosent-line-number-test.py</vh>
<v t="ekr.20080907123324.3"><vh>spam</vh></v>
<v t="ekr.20160403152507.1"><vh>eggs</vh></v>
</v>
<v t="ekr.20090704085350.5034"><vh>@nosent unittest/at-nosent-test.py</vh>
<v t="ekr.20090704085350.5035"><vh>spam</vh></v>
<v t="ekr.20090704085350.5036"><vh>eggs</vh></v>
</v>
<v t="ekr.20100731163237.5782"><vh>@thin unittest/at-thin-html-test.html</vh>
<v t="ekr.20100731163237.5783"><vh>&lt;&lt; a section reference &gt;&gt;</vh></v>
</v>
<v t="ekr.20080905130723.3"><vh>@thin unittest/at-thin-line-number-test.py</vh>
<v t="ekr.20080905130723.4"><vh>at-thin-child</vh></v>
</v>
<v t="ekr.20090704085350.5022"><vh>@thin unittest/at-thin-test.py</vh>
<v t="ekr.20090704085350.5023"><vh>spam</vh></v>
<v t="ekr.20090704085350.5024"><vh>eggs</vh></v>
</v>
<v t="ekr.20070627082044.811"><vh>@thin unittest/batchTest.py</vh></v>
<v t="ekr.20070627082044.808"><vh>@thin unittest/errorTest.py</vh></v>
</v>
<v t="ekr.20170101134417.1"><vh>@ignore Slow tests</vh>
<v t="ekr.20161224111342.1"><vh>@test import all Leo's core files</vh></v>
</v>
<v t="ekr.20101220161557.6016"><vh>Active Unit Tests</vh>
<v t="edward.20160314170027.56" descendentVnodeUnknownAttributes="7d7100285808000000302e362e31322e3971017d71025809000000756e69745f7465737471035804000000616263647104735808000000302e362e31362e3371057d71065808000000616e6e6f7461746571077d7108735808000000302e362e31382e3771097d710a5808000000616e6e6f74617465710b7d710c735809000000302e362e31392e3431710d7d710e58090000006d795f706c7567696e710f580300000076616c7110735808000000302e362e32372e3771117d71125808000000616e6e6f7461746571137d711473752e"><vh>@file activeUnitTests.txt</vh></v>
</v>
<v t="ekr.20161204040924.1"><vh>@ignore Failing unit tests</vh>
<v t="ekr.20161130041921.1"></v>
<v t="ekr.20161228071915.1"><vh>@@auto c:\test\bug-354-test.py</vh>
<v t="ekr.20161228072352.1"><vh>bug-354-test declarations</vh></v>
</v>
<v t="ekr.20150626093653.1"><vh>@@test find_file_line: @auto-rst</vh></v>
<v t="ekr.20160403143643.1"><vh>@@test find_file_line: @clean-c</vh></v>
<v t="ekr.20160403143655.1"><vh>@@test find_file_line: @clean-python</vh></v>
<v t="ekr.20161130051657.1"><vh>@test ctext</vh></v>
<v t="ekr.20150626101920.1"><vh>@test find_file_line: @auto-md</vh></v>
<v t="ekr.20161130053149.1"><vh>COPY @auto-ctext unittest/at-auto-ctext-test.txt</vh></v>
<v t="ekr.20161103075725.1"><vh>Python failing tests: parse-body</vh>
<v t="ekr.20140206132559.4567"><vh>@@@test ic.parse-body</vh>
<v t="ekr.20150919073819.1"><vh>copy</vh></v>
<v t="ekr.20140206132559.4560"><vh>before</vh>
<v t="ekr.20161112061414.1"><vh>class aClass</vh>
<v t="ekr.20161112061414.2"><vh>__init__</vh></v>
<v t="ekr.20161112061414.3"><vh>spam</vh></v>
</v>
<v t="ekr.20161112061414.4"><vh>bClass = aClass</vh></v>
</v>
<v t="ekr.20140206132559.4564"><vh>expected</vh>
<v t="ekr.20150919074321.1"><vh>class aClass</vh>
<v t="ekr.20150919074321.2"><vh>__init__</vh></v>
<v t="ekr.20150919074321.3"><vh>spam</vh></v>
</v>
</v>
</v>
<v t="ekr.20150919074122.1"><vh>@@@test ic.parse-body mypy</vh>
<v t="ekr.20150919074220.1"><vh>copy</vh></v>
<v t="ekr.20150919074132.1"><vh>before</vh>
<v t="ekr.20161112061406.1"><vh>class TypeJoinVisitor</vh></v>
</v>
<v t="ekr.20150919074154.1"><vh>expected</vh>
<v t="ekr.20150919074211.1"><vh>class TypeJoinVisitor</vh>
<v t="ekr.20150919074211.2"><vh>__init__</vh></v>
<v t="ekr.20150919074211.3"><vh>visit_unbound_type</vh></v>
<v t="ekr.20150919074211.4"><vh>visit_union_type</vh></v>
<v t="ekr.20150919074211.5"><vh>visit_error_type</vh></v>
<v t="ekr.20150919074211.6"><vh>visit_type_list</vh></v>
<v t="ekr.20150919074211.7"><vh>visit_any</vh></v>
<v t="ekr.20150919074211.8"><vh>visit_void</vh></v>
<v t="ekr.20150919074211.9"><vh>visit_none_type</vh></v>
<v t="ekr.20150919074211.10"><vh>visit_erased_type</vh></v>
<v t="ekr.20150919074211.11"><vh>visit_type_var</vh></v>
<v t="ekr.20150919074211.12"><vh>visit_instance</vh></v>
<v t="ekr.20150919074211.13"><vh>visit_callable_type</vh></v>
<v t="ekr.20150919074211.14"><vh>visit_overloaded</vh></v>
<v t="ekr.20150919074211.15"><vh>visit_tuple_type</vh></v>
<v t="ekr.20150919074211.16"><vh>join</vh></v>
<v t="ekr.20150919074211.17"><vh>default</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="ekr.20170504122245.1"><vh>@ignore recent</vh>
<v t="ekr.20170712045534.1"><vh>#512: Unit tests that fail for others</vh>
<v t="ekr.20170712053944.1"><vh>Vitalije</vh>
<v t="ekr.20111121224307.3934"><vh>@test k.handleDefaultChar from log pane</vh></v>
</v>
<v t="ekr.20170712045644.1"><vh>Terry's failures</vh>
<v t="ekr.20090529115704.4557"><vh>@test x.makeShadowDirectory</vh>
<v t="ekr.20090529115704.4558"><vh>deleteShadowDir</vh></v>
</v>
<v t="ekr.20100131171342.5485"><vh>@test all commands have an event arg</vh></v>
<v t="ekr.20170712132824.1"><vh>add/delete comments</vh>
<v t="ekr.20120309155126.3949"><vh>@test add comments with multiple @language directives</vh>
<v t="ekr.20120309155126.3950"><vh>rest and python</vh></v>
</v>
<v t="ekr.20170712135224.1"><vh>@test delete comments with multiple @language directives</vh>
<v t="ekr.20170712135224.2"><vh>rest and python</vh></v>
</v>
<v t="ekr.20111112171235.3854"><vh>@test add html comments</vh>
<v t="ekr.20170128023431.1"><vh>@language html</vh>
<v t="ekr.20111112171235.3855"><vh>html</vh></v>
</v>
</v>
<v t="ekr.20170712132900.1"><vh>@test delete html comments</vh>
<v t="ekr.20170712132933.1"><vh>@language html</vh>
<v t="ekr.20170712132933.2"><vh>html</vh></v>
</v>
</v>
<v t="ekr.20170712134334.1"><vh>@test add python comments</vh>
<v t="ekr.20170712134334.2"><vh>python</vh></v>
</v>
<v t="ekr.20170712134948.1"><vh>@test delete python comments</vh>
<v t="ekr.20170712134948.3"><vh>python</vh></v>
</v>
</v>
<v t="ekr.20170701153730.1"><vh>rst import test that fail for Terry</vh>
<v t="ekr.20140725132959.4593"><vh>@test rST import test: simple</vh></v>
<v t="ekr.20090529141856.4786"><vh>@test rST import test: no double-underlines</vh></v>
<v t="ekr.20090529141856.4785"><vh>@test rST import test</vh></v>
<v t="ekr.20090529141856.4789"><vh>@test rST import test: trailing whitespace</vh></v>
<v t="ekr.20090529141856.4788"><vh>@test rST import test: long overlines</vh></v>
<v t="ekr.20090529141856.4787"><vh>@test rST import test: long underlines</vh></v>
<v t="ekr.20161129104243.1"><vh>@test leo_rst</vh></v>
</v>
</v>
<v t="ekr.20170712140759.1"><vh>xgid failures</vh>
<v t="ekr.20111124090010.3939"><vh>@test g.app.config @buttons and @commands logic</vh></v>
<v t="ekr.20111123214629.3941"><vh>@@test unbound Alt-9 key is completely ignored</vh></v>
</v>
<v t="ekr.20160523094102.1"><vh>@test leoAst traverser classes</vh></v>
</v>
<v t="ekr.20171126172628.1"><vh>Tests that fail with console gui</vh>
<v t="ekr.20140822063016.4474"><vh>@test zzz force a quit</vh></v>
<v t="ekr.20090306091634.1"><vh>@test print redraw count</vh></v>
</v>
<v t="ekr.20090529141856.4682"><vh>leoImport</vh>
<v t="ekr.20090529141856.4684"><vh>Export tests</vh>
<v t="ekr.20090529141856.4685"><vh>@suite Export tests</vh></v>
</v>
<v t="ekr.20090529141856.4698"><vh>Import tests</vh>
<v t="ekr.20090529141856.4699"><vh>@suite Import tests</vh></v>
</v>
<v t="ekr.20090529141856.4716"><vh>Tests of @auto</vh>
<v t="ekr.20090529141856.4783"><vh>@test collapse-all</vh></v>
<v t="ekr.20090529141856.4717"><vh>C tests</vh>
<v t="ekr.20090529141856.4718"><vh>@test c class 1</vh></v>
<v t="ekr.20090529141856.4719"><vh>@test c class--underindented line</vh></v>
<v t="ekr.20090529141856.4721"><vh>@test c comment follows arg list</vh></v>
<v t="ekr.20090529141856.4722"><vh>@test c comment follows block delim</vh></v>
<v t="ekr.20090529141856.4723"><vh>@test c intermixed blanks and tabs</vh></v>
<v t="ekr.20090529141856.4724"><vh>@test c old-style decl 1</vh></v>
<v t="ekr.20090529141856.4725"><vh>@test c old-style decl 2</vh></v>
<v t="ekr.20090529141856.4726"><vh>@test c extern</vh></v>
</v>
<v t="ekr.20090529141856.4727"><vh>c# tests</vh>
<v t="ekr.20090529141856.4728"><vh>@test c# namespace indent</vh></v>
<v t="ekr.20090529141856.4729"><vh>@test c# namespace no indent</vh></v>
<v t="ekr.20090529141856.4730"><vh>@@test c# ref card</vh></v>
</v>
<v t="ekr.20161108034116.1"><vh>coffeescript tests</vh>
<v t="ekr.20161108034138.1"><vh>@test coffeescript-1</vh></v>
<v t="ekr.20161109084732.1"><vh>@test coffeescript-2</vh></v>
<v t="ekr.20161118144658.1"><vh>@test coffeescript-3</vh></v>
</v>
<v t="ekr.20161123115047.1"><vh>dart tests</vh>
<v t="ekr.20161123120652.1"><vh>@test dart hello world</vh></v>
</v>
<v t="ekr.20090529141856.4731"><vh>elisp tests</vh>
<v t="ekr.20090529141856.4733"><vh>@test elisp</vh></v>
</v>
<v t="ekr.20111029112647.4099"><vh>html tests</vh>
<v t="ekr.20111107102431.3849"><vh>@@test html whitespace bug</vh></v>
<v t="ekr.20111029112647.4101"><vh>@test html: lowercase tags</vh></v>
<v t="ekr.20111109143012.3839"><vh>@test html: multiple tags on a line</vh></v>
<v t="ekr.20140218122321.4349"><vh>@test html: multple node completed on a line</vh></v>
<v t="ekr.20170416085619.1"><vh>@test html: multple node starts on a line</vh></v>
<v t="ekr.20111102164107.3975"><vh>@test html: underindented comment</vh></v>
<v t="ekr.20111029120441.3982"><vh>@test html: uppercase tags</vh></v>
<v t="ekr.20111112103320.3849"><vh>@test html: improperly nested tags</vh></v>
<v t="ekr.20111112103320.3887"><vh>@test html: improperly terminated tags</vh></v>
<v t="ekr.20111112103320.3893"><vh>@test html: improperly terminated tags2</vh></v>
<v t="ekr.20170617111001.1"><vh>@test html: brython</vh></v>
</v>
<v t="ekr.20100803234640.5804"><vh>ini tests</vh>
<v t="ekr.20100803234640.5805"><vh>@test ini-test-1</vh></v>
</v>
<v t="ekr.20090529141856.4766"><vh>Java tests</vh>
<v t="ekr.20090529141856.4771"><vh>@@test AdminPermission.java</vh></v>
<v t="ekr.20090529141856.4769"><vh>@@test constants.java</vh></v>
<v t="ekr.20090529141856.4770"><vh>@test from AdminPermission.java</vh></v>
<v t="ekr.20090529141856.4773"><vh>@test from BundleException.java</vh></v>
<v t="ekr.20090529141856.4767"><vh>@test java interface test1</vh></v>
<v t="ekr.20090529141856.4768"><vh>@test java interface test2</vh></v>
</v>
<v t="ekr.20090529141856.4774"><vh>Javascript tests</vh>
<v t="ekr.20090529141856.4775"><vh>Problems</vh></v>
<v t="ekr.20090529141856.4776"><vh>@test Javascript-regex-1</vh></v>
<v t="ekr.20090529141856.4777"><vh>@@test JSON</vh></v>
<v t="ekr.20090529141856.4778"><vh>@test Javascript-3</vh></v>
<v t="ekr.20140218042220.4347"><vh>@test Javascript-4</vh></v>
<v t="ekr.20140218151418.4353"><vh>@test Javascript-5</vh></v>
<v t="ekr.20171222103210.1"><vh>@test Javascript #639: many top-level nodes</vh></v>
<v t="ekr.20171224042157.1"><vh>@test Javascript #639: acid test 1</vh></v>
<v t="ekr.20171223094900.1"><vh>@test Javascript #639 acid test 2</vh></v>
</v>
<v t="ekr.20161123202857.1"><vh>org tests</vh>
<v t="ekr.20161123202924.1"><vh>@test org-1</vh></v>
<v t="ekr.20171120113732.1"><vh>@test org tags</vh></v>
<v t="ekr.20171230050347.1"><vh>@test org intro</vh></v>
<v t="ekr.20180123104303.1"><vh>@test org #552</vh></v>
</v>
<v t="ekr.20161124040933.1"><vh>otl (vim-outline) tests</vh>
<v t="ekr.20161124040933.2"><vh>@test otl-1</vh></v>
</v>
<v t="ekr.20090529141856.4734"><vh>Pascal tests</vh>
<v t="ekr.20090529141856.4735"><vh>@test pascal-to-delphi interface</vh></v>
</v>
<v t="ekr.20161103015908.1"><vh>Perl tests</vh>
<v t="ekr.20161103015940.1"><vh>@test perl-1</vh></v>
<v t="ekr.20161103021621.1"><vh>@test perlpod comment</vh></v>
<v t="ekr.20161103021420.1"><vh>@test perl multi-line string</vh></v>
<v t="ekr.20161119031833.1"><vh>@test perl regex-1</vh></v>
<v t="ekr.20161119032623.1"><vh>@test perl regex-2</vh></v>
</v>
<v t="ekr.20100219080213.5365"><vh>PHP tests</vh>
<v t="ekr.20100219080213.5366"><vh>@test php import class</vh></v>
<v t="ekr.20100219080213.5367"><vh>@test php import conditional class</vh></v>
<v t="ekr.20100219080213.5368"><vh>@test php import classes &amp; functions</vh></v>
<v t="ekr.20161129222003.1"><vh>@test php here doc</vh>
<v t="ekr.20161130042452.50"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161130042452.51"><vh>class foo</vh></v>
</v>
<v t="ekr.20161130050706.29"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161130050706.30"><vh>class foo</vh></v>
</v>
<v t="ekr.20161202053644.21"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161202053644.22"><vh>class foo</vh></v>
</v>
<v t="ekr.20161202083956.10"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161202083956.11"><vh>class foo</vh></v>
</v>
<v t="ekr.20161202093505.10"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161202093505.11"><vh>class foo</vh></v>
</v>
<v t="ekr.20161204034138.15"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161204034138.16"><vh>class foo</vh></v>
</v>
<v t="ekr.20161204035447.20"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161204035447.21"><vh>class foo</vh></v>
</v>
<v t="ekr.20161204041306.21"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161204041306.22"><vh>class foo</vh></v>
</v>
<v t="ekr.20161204041354.25"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161204041354.26"><vh>class foo</vh></v>
</v>
<v t="ekr.20161204041426.33"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161204041426.34"><vh>class foo</vh></v>
</v>
<v t="ekr.20161204041641.25"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161204041641.26"><vh>class foo</vh></v>
</v>
<v t="ekr.20161204041720.21"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161204041720.22"><vh>class foo</vh></v>
</v>
<v t="ekr.20161204041755.29"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161204041755.30"><vh>class foo</vh></v>
</v>
<v t="ekr.20161204041842.20"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161204041842.21"><vh>class foo</vh></v>
</v>
<v t="ekr.20161204041902.25"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161204041902.26"><vh>class foo</vh></v>
</v>
<v t="ekr.20161204041920.33"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161204041920.34"><vh>class foo</vh></v>
</v>
<v t="ekr.20161204042116.25"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161204042116.26"><vh>class foo</vh></v>
</v>
<v t="ekr.20161204042155.7"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161204042155.8"><vh>class foo</vh></v>
</v>
<v t="ekr.20161204042301.25"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161204042301.26"><vh>class foo</vh></v>
</v>
<v t="ekr.20161204042714.33"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161204042714.34"><vh>class foo</vh></v>
</v>
<v t="ekr.20161204042739.15"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161204042739.16"><vh>class foo</vh></v>
</v>
<v t="ekr.20161204043013.1"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161204043013.2"><vh>class foo</vh></v>
</v>
<v t="ekr.20161204043028.10"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161204043028.11"><vh>class foo</vh></v>
</v>
<v t="ekr.20161204043342.40"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161204043342.41"><vh>class foo</vh></v>
</v>
<v t="ekr.20161204045827.15"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161204045827.16"><vh>class foo</vh></v>
</v>
<v t="ekr.20161204045955.21"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161204045955.22"><vh>class foo</vh></v>
</v>
<v t="ekr.20161204154852.10"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161204154852.11"><vh>class foo</vh></v>
</v>
<v t="ekr.20161204155218.25"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161204155218.26"><vh>class foo</vh></v>
</v>
<v t="ekr.20161206135449.10"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161206135449.11"><vh>class foo</vh></v>
</v>
<v t="ekr.20161206165824.10"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161206165824.11"><vh>class foo</vh></v>
</v>
<v t="ekr.20161216141227.1"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161216141227.2"><vh>class foo</vh></v>
</v>
<v t="ekr.20161218104646.1"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161218104646.2"><vh>class foo</vh></v>
</v>
<v t="ekr.20161220185154.21"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161220185154.22"><vh>class foo</vh></v>
</v>
<v t="ekr.20161221062411.1"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161221062411.2"><vh>class foo</vh></v>
</v>
<v t="ekr.20161221063734.10"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161221063734.11"><vh>class foo</vh></v>
</v>
<v t="ekr.20161221065216.7"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161221065216.8"><vh>class foo</vh></v>
</v>
<v t="ekr.20161221080848.25"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161221080848.26"><vh>class foo</vh></v>
</v>
<v t="ekr.20161221091453.20"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161221091453.21"><vh>class foo</vh></v>
</v>
<v t="ekr.20161221091950.20"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161221091950.21"><vh>class foo</vh></v>
</v>
<v t="ekr.20161221092230.10"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161221092230.11"><vh>class foo</vh></v>
</v>
<v t="ekr.20161222122038.3"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161222122038.4"><vh>class foo</vh></v>
</v>
<v t="ekr.20161222123534.3"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161222123534.4"><vh>class foo</vh></v>
</v>
<v t="ekr.20161222123751.3"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161222123751.4"><vh>class foo</vh></v>
</v>
<v t="ekr.20161223153848.1"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161223153848.2"><vh>class foo</vh></v>
</v>
<v t="ekr.20161231115630.10"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20161231115630.11"><vh>class foo</vh></v>
</v>
<v t="ekr.20170101085120.25"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20170101085120.26"><vh>class foo</vh></v>
</v>
<v t="ekr.20170101131839.10"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20170101131839.11"><vh>class foo</vh></v>
</v>
<v t="ekr.20170101134221.7"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20170101134221.8"><vh>class foo</vh></v>
</v>
<v t="ekr.20170105122516.10"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20170105122516.11"><vh>class foo</vh></v>
</v>
<v t="ekr.20170112111339.7"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20170112111339.8"><vh>class foo</vh></v>
</v>
<v t="ekr.20170112111900.10"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20170112111900.11"><vh>class foo</vh></v>
</v>
<v t="ekr.20170113162613.7"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20170113162613.8"><vh>class foo</vh></v>
</v>
<v t="ekr.20170114055256.3"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20170114055256.4"><vh>class foo</vh></v>
</v>
<v t="ekr.20170114080041.1"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20170114080041.2"><vh>class foo</vh></v>
</v>
<v t="ekr.20170114200550.3"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20170114200550.4"><vh>class foo</vh></v>
</v>
<v t="ekr.20170115052901.10"><vh>@@clean c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20170115052901.11"><vh>class foo</vh></v>
</v>
<v t="ekr.20170302201859.3"><vh>@@file c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20170302201859.4"><vh>class foo</vh></v>
</v>
<v t="ekr.20170401122030.1"><vh>@@file c:/leo.repo/leo-editor/leo/test/php here doc</vh>
<v t="ekr.20170401122030.2"><vh>class foo</vh></v>
</v>
<v t="ekr.20170409174529.27"><vh>@@file @test php here doc</vh>
<v t="ekr.20170409174529.28"><vh>class foo</vh></v>
</v>
<v t="ekr.20170409174632.19"><vh>@@file @test php here doc</vh>
<v t="ekr.20170409174632.20"><vh>class foo</vh></v>
</v>
<v t="ekr.20170410190519.53"><vh>@@file @test php here doc</vh>
<v t="ekr.20170410190519.54"><vh>class foo</vh></v>
</v>
<v t="ekr.20170415061122.50"><vh>@@file @test php here doc</vh>
<v t="ekr.20170415061122.51"><vh>class foo</vh></v>
</v>
<v t="ekr.20170426033159.40"><vh>@@file @test php here doc</vh>
<v t="ekr.20170426033159.41"><vh>class foo</vh></v>
</v>
<v t="ekr.20170502211859.15"><vh>@@file @test php here doc</vh>
<v t="ekr.20170502211859.16"><vh>class foo</vh></v>
</v>
<v t="ekr.20170503133125.21"><vh>@@file @test php here doc</vh>
<v t="ekr.20170503133125.22"><vh>class foo</vh></v>
</v>
<v t="ekr.20170503133258.21"><vh>@@file @test php here doc</vh>
<v t="ekr.20170503133258.22"><vh>class foo</vh></v>
</v>
<v t="ekr.20170503133608.21"><vh>@@file @test php here doc</vh>
<v t="ekr.20170503133608.22"><vh>class foo</vh></v>
</v>
<v t="ekr.20171225163019.33"><vh>@@file @test php here doc</vh>
<v t="ekr.20171225163019.34"><vh>class foo</vh></v>
</v>
<v t="ekr.20171230165904.48"><vh>@@file @test php here doc</vh>
<v t="ekr.20171230165904.49"><vh>class foo</vh></v>
</v>
<v t="ekr.20180123135055.48"><vh>@@file @test php here doc</vh>
<v t="ekr.20180123135055.49"><vh>class foo</vh></v>
</v>
</v>
</v>
<v t="ekr.20090529141856.4736"><vh>Python tests</vh>
<v t="ekr.20161204042938.1"><vh>@@test print('end python tests')</vh></v>
<v t="ekr.20161204042916.1"><vh>@@test print('start python tests')</vh></v>
<v t="ekr.20161115092708.1"><vh>@test i.scan_state (for python)</vh></v>
<v t="ekr.20161224145026.1"><vh>@test leoApp fail</vh></v>
<v t="ekr.20161115063144.3"><vh>@test python bad class test</vh></v>
<v t="ekr.20161115063144.34"><vh>@test python basic nesting test</vh></v>
<v t="ekr.20161218103650.1"><vh>@test python bug #346</vh></v>
<v t="ekr.20161228070933.1"><vh>@test python bug #354</vh></v>
<v t="ekr.20170122033034.1"><vh>@test python bug #357</vh></v>
<v t="ekr.20170122032242.1"><vh>@test python bug #360</vh></v>
<v t="ekr.20170306041801.1"><vh>@test python bug #390</vh></v>
<v t="ekr.20161115063144.4"><vh>@test python bug 603720</vh></v>
<v t="ekr.20170617131333.1"><vh>@test python enhancement #481</vh></v>
<v t="ekr.20161115063144.5"><vh>@test python class test 2</vh></v>
<v t="ekr.20161115063144.6"><vh>@test python class tests 1</vh></v>
<v t="ekr.20161115063144.7"><vh>@test python comment after dict assign</vh></v>
<v t="ekr.20161115063144.8"><vh>@test python decls test 1</vh></v>
<v t="ekr.20161115063144.9"><vh>@test python decorator</vh></v>
<v t="ekr.20161224101046.1"><vh>@test python decorator 2</vh></v>
<v t="ekr.20161115063144.10"><vh>@test python def inside def</vh></v>
<v t="ekr.20161115063144.11"><vh>@test python def test 1</vh></v>
<v t="ekr.20161115063144.12"><vh>@test python def test 2</vh></v>
<v t="ekr.20161115063144.13"><vh>@test python docstring only</vh></v>
<v t="ekr.20161115063144.14"><vh>@test python empty decls</vh></v>
<v t="ekr.20161115063144.15"><vh>@test python extra leading ws test</vh></v>
<v t="ekr.20161115063144.16"><vh>@test python indent decls</vh></v>
<v t="ekr.20161117000902.1"><vh>@test python leoImport.py (small)</vh></v>
<v t="ekr.20161115063144.18"><vh>@test python looks like section ref</vh></v>
<v t="ekr.20161115063144.19"><vh>@test python minimal class 1</vh></v>
<v t="ekr.20161115063144.20"><vh>@test python minimal class 2</vh></v>
<v t="ekr.20161115063144.21"><vh>@test python minimal class 3</vh></v>
<v t="ekr.20161115063144.22"><vh>@test python overindent def--no following def</vh></v>
<v t="ekr.20161115063144.23"><vh>@test python overindent def--one following def</vh></v>
<v t="ekr.20161115063144.24"><vh>@test python overindented def 3</vh></v>
<v t="ekr.20161115063144.25"><vh>@test python string test: extra indent</vh></v>
<v t="ekr.20161115063144.26"><vh>@test python string underindent lines</vh></v>
<v t="ekr.20161115063144.27"><vh>@test python string underindent lines 2</vh></v>
<v t="ekr.20161222064421.1"><vh>@test python top-level later decl</vh></v>
<v t="ekr.20161115063144.28"><vh>@test python trailing comment</vh></v>
<v t="ekr.20161115063144.29"><vh>@test python trailing comment--outer levels</vh></v>
<v t="ekr.20161115063144.30"><vh>@test python two functions</vh></v>
<v t="ekr.20161115063144.31"><vh>@test python underindent method</vh></v>
<v t="ekr.20161115063144.32"><vh>@test python unindent in triple string does not end function</vh></v>
<v t="ekr.20161115063144.33"><vh>@test python unittest/perfectImport/formatter.py</vh></v>
</v>
<v t="ekr.20121011094154.3906"><vh>TypeScript tests</vh>
<v t="ekr.20121011094154.3911"><vh>@test TypeScript class</vh></v>
<v t="ekr.20121011100210.4035"><vh>@test TypeScript module</vh></v>
</v>
<v t="ekr.20090529141856.4780"><vh>xml tests</vh>
<v t="ekr.20170416060817.1"><vh>@test xml with standard opening elements</vh></v>
<v t="ekr.20090529141856.4781"><vh>@test xml 1</vh></v>
<v t="ekr.20111026105935.3966"><vh>@test xml 2</vh></v>
<v t="ekr.20120306173116.3933"><vh>@test xml non-ascii tags</vh></v>
</v>
</v>
<v t="ekr.20160410152100.1"><vh>Tests of @auto-md</vh>
<v t="ekr.20160410152100.2"><vh>@test md-import-test</vh>
<v t="ekr.20160411034540.1"><vh>&lt;&lt; define s &gt;&gt; (md-import-test)</vh></v>
<v t="ekr.20161202093709.1"><vh>@@auto-markdown c:/leo.repo/leo-editor/leo/test/md-import-test</vh>
<v t="ekr.20161202093709.2"><vh>!Declarations</vh>
<v t="ekr.20161202093709.3"><vh>Section 1</vh></v>
<v t="ekr.20161202093709.4"><vh>Section 2</vh>
<v t="ekr.20161202093709.5"><vh>Section 2.1</vh>
<v t="ekr.20161202093709.6"><vh>Section 2.1.1</vh></v>
</v>
<v t="ekr.20161202093709.7"><vh>Section 2.2</vh></v>
</v>
<v t="ekr.20161202093709.8"><vh>Section 3</vh></v>
</v>
</v>
<v t="ekr.20161204034142.19"><vh>@@auto-markdown c:/leo.repo/leo-editor/leo/test/md-import-test</vh>
<v t="ekr.20161204034142.20"><vh>Top</vh>
<v t="ekr.20161204034142.21"><vh>Section 1</vh></v>
<v t="ekr.20161204034142.22"><vh>Section 2</vh>
<v t="ekr.20161204034142.23"><vh>Section 2.1</vh>
<v t="ekr.20161204034142.24"><vh>Section 2.1.1</vh></v>
</v>
<v t="ekr.20161204034142.25"><vh>Section 2.2</vh></v>
</v>
<v t="ekr.20161204034142.26"><vh>Section 3</vh></v>
</v>
</v>
<v t="ekr.20161204034207.1"><vh>@@auto-markdown c:/leo.repo/leo-editor/leo/test/md-import-test</vh>
<v t="ekr.20161204034207.2"><vh>Top</vh>
<v t="ekr.20161204034207.3"><vh>Section 1</vh></v>
<v t="ekr.20161204034207.4"><vh>Section 2</vh>
<v t="ekr.20161204034207.5"><vh>Section 2.1</vh>
<v t="ekr.20161204034207.6"><vh>Section 2.1.1</vh></v>
</v>
<v t="ekr.20161204034207.7"><vh>Section 2.2</vh></v>
</v>
<v t="ekr.20161204034207.8"><vh>Section 3</vh></v>
</v>
</v>
<v t="ekr.20161204035451.19"><vh>@@auto-markdown c:/leo.repo/leo-editor/leo/test/md-import-test</vh>
<v t="ekr.20161204035451.20"><vh>Top</vh>
<v t="ekr.20161204035451.21"><vh>Section 1</vh></v>
<v t="ekr.20161204035451.22"><vh>Section 2</vh>
<v t="ekr.20161204035451.23"><vh>Section 2.1</vh>
<v t="ekr.20161204035451.24"><vh>Section 2.1.1</vh></v>
</v>
<v t="ekr.20161204035451.25"><vh>Section 2.2</vh></v>
</v>
<v t="ekr.20161204035451.26"><vh>Section 3</vh></v>
</v>
</v>
<v t="ekr.20161204041310.53"><vh>@@auto-md c:/leo.repo/leo-editor/leo/test/md-import-test</vh>
<v t="ekr.20161204041310.54"><vh>Top</vh>
<v t="ekr.20161204041310.55"><vh>Section 1</vh></v>
<v t="ekr.20161204041310.56"><vh>Section 2</vh>
<v t="ekr.20161204041310.57"><vh>Section 2.1</vh>
<v t="ekr.20161204041310.58"><vh>Section 2.1.1</vh></v>
</v>
<v t="ekr.20161204041310.59"><vh>Section 2.2</vh></v>
</v>
<v t="ekr.20161204041310.60"><vh>Section 3</vh></v>
</v>
</v>
<v t="ekr.20161204041358.103"><vh>@@auto-md c:/leo.repo/leo-editor/leo/test/md-import-test</vh>
<v t="ekr.20161204041358.104"><vh>Top</vh>
<v t="ekr.20161204041358.105"><vh>Section 1</vh></v>
<v t="ekr.20161204041358.106"><vh>Section 2</vh>
<v t="ekr.20161204041358.107"><vh>Section 2.1</vh>
<v t="ekr.20161204041358.108"><vh>Section 2.1.1</vh></v>
</v>
<v t="ekr.20161204041358.109"><vh>Section 2.2</vh></v>
</v>
<v t="ekr.20161204041358.110"><vh>Section 3</vh></v>
</v>
</v>
<v t="ekr.20161204041418.1"><vh>@@auto-md c:/leo.repo/leo-editor/leo/test/md-import-test</vh>
<v t="ekr.20161204041418.2"><vh>Top</vh>
<v t="ekr.20161204041418.3"><vh>Section 1</vh></v>
<v t="ekr.20161204041418.4"><vh>Section 2</vh>
<v t="ekr.20161204041418.5"><vh>Section 2.1</vh>
<v t="ekr.20161204041418.6"><vh>Section 2.1.1</vh></v>
</v>
<v t="ekr.20161204041418.7"><vh>Section 2.2</vh></v>
</v>
<v t="ekr.20161204041418.8"><vh>Section 3</vh></v>
</v>
</v>
<v t="ekr.20161204041645.103"><vh>@@auto-md c:/leo.repo/leo-editor/leo/test/md-import-test</vh>
<v t="ekr.20161204041645.104"><vh>Top</vh>
<v t="ekr.20161204041645.105"><vh>Section 1</vh></v>
<v t="ekr.20161204041645.106"><vh>Section 2</vh>
<v t="ekr.20161204041645.107"><vh>Section 2.1</vh>
<v t="ekr.20161204041645.108"><vh>Section 2.1.1</vh></v>
</v>
<v t="ekr.20161204041645.109"><vh>Section 2.2</vh></v>
</v>
<v t="ekr.20161204041645.110"><vh>Section 3</vh></v>
</v>
</v>
<v t="ekr.20161204041724.1"><vh>@@auto-md c:/leo.repo/leo-editor/leo/test/md-import-test</vh>
<v t="ekr.20161204041724.2"><vh>Top</vh>
<v t="ekr.20161204041724.3"><vh>Section 1</vh></v>
<v t="ekr.20161204041724.4"><vh>Section 2</vh>
<v t="ekr.20161204041724.5"><vh>Section 2.1</vh>
<v t="ekr.20161204041724.6"><vh>Section 2.1.1</vh></v>
</v>
<v t="ekr.20161204041724.7"><vh>Section 2.2</vh></v>
</v>
<v t="ekr.20161204041724.8"><vh>Section 3</vh></v>
</v>
</v>
<v t="ekr.20161204041800.1"><vh>@@auto-md c:/leo.repo/leo-editor/leo/test/md-import-test</vh>
<v t="ekr.20161204041800.2"><vh>Top</vh>
<v t="ekr.20161204041800.3"><vh>Section 1</vh></v>
<v t="ekr.20161204041800.4"><vh>Section 2</vh>
<v t="ekr.20161204041800.5"><vh>Section 2.1</vh>
<v t="ekr.20161204041800.6"><vh>Section 2.1.1</vh></v>
</v>
<v t="ekr.20161204041800.7"><vh>Section 2.2</vh></v>
</v>
<v t="ekr.20161204041800.8"><vh>Section 3</vh></v>
</v>
</v>
<v t="ekr.20161204042305.96"><vh>@@auto-md c:/leo.repo/leo-editor/leo/test/md-import-test</vh>
<v t="ekr.20161204042305.97"><vh>Top</vh>
<v t="ekr.20161204042305.98"><vh>Section 1</vh></v>
<v t="ekr.20161204042305.99"><vh>Section 2</vh>
<v t="ekr.20161204042305.100"><vh>Section 2.1</vh>
<v t="ekr.20161204042305.101"><vh>Section 2.1.1</vh></v>
</v>
<v t="ekr.20161204042305.102"><vh>Section 2.2</vh></v>
</v>
<v t="ekr.20161204042305.103"><vh>Section 3</vh></v>
</v>
</v>
<v t="ekr.20161204042719.4"><vh>@@auto-md c:/leo.repo/leo-editor/leo/test/md-import-test</vh>
<v t="ekr.20161204042719.5"><vh>Top</vh>
<v t="ekr.20161204042719.6"><vh>Section 1</vh></v>
<v t="ekr.20161204042719.7"><vh>Section 2</vh>
<v t="ekr.20161204042719.8"><vh>Section 2.1</vh>
<v t="ekr.20161204042719.9"><vh>Section 2.1.1</vh></v>
</v>
<v t="ekr.20161204042719.10"><vh>Section 2.2</vh></v>
</v>
<v t="ekr.20161204042719.11"><vh>Section 3</vh></v>
</v>
</v>
<v t="ekr.20161204042822.1"><vh>@@auto-md c:/leo.repo/leo-editor/leo/test/md-import-test</vh>
<v t="ekr.20161204042822.2"><vh>Top</vh>
<v t="ekr.20161204042822.3"><vh>Section 1</vh></v>
<v t="ekr.20161204042822.4"><vh>Section 2</vh>
<v t="ekr.20161204042822.5"><vh>Section 2.1</vh>
<v t="ekr.20161204042822.6"><vh>Section 2.1.1</vh></v>
</v>
<v t="ekr.20161204042822.7"><vh>Section 2.2</vh></v>
</v>
<v t="ekr.20161204042822.8"><vh>Section 3</vh></v>
</v>
</v>
<v t="ekr.20161204043017.19"><vh>@@auto-md c:/leo.repo/leo-editor/leo/test/md-import-test</vh>
<v t="ekr.20161204043017.20"><vh>Top</vh>
<v t="ekr.20161204043017.21"><vh>Section 1</vh></v>
<v t="ekr.20161204043017.22"><vh>Section 2</vh>
<v t="ekr.20161204043017.23"><vh>Section 2.1</vh>
<v t="ekr.20161204043017.24"><vh>Section 2.1.1</vh></v>
</v>
<v t="ekr.20161204043017.25"><vh>Section 2.2</vh></v>
</v>
<v t="ekr.20161204043017.26"><vh>Section 3</vh></v>
</v>
</v>
<v t="ekr.20161204043032.96"><vh>@@auto-md c:/leo.repo/leo-editor/leo/test/md-import-test</vh>
<v t="ekr.20161204043032.97"><vh>Top</vh>
<v t="ekr.20161204043032.98"><vh>Section 1</vh></v>
<v t="ekr.20161204043032.99"><vh>Section 2</vh>
<v t="ekr.20161204043032.100"><vh>Section 2.1</vh>
<v t="ekr.20161204043032.101"><vh>Section 2.1.1</vh></v>
</v>
<v t="ekr.20161204043032.102"><vh>Section 2.2</vh></v>
</v>
<v t="ekr.20161204043032.103"><vh>Section 3</vh></v>
</v>
</v>
<v t="ekr.20161204043346.4"><vh>@@auto-md c:/leo.repo/leo-editor/leo/test/md-import-test</vh>
<v t="ekr.20161204043346.5"><vh>Top</vh>
<v t="ekr.20161204043346.6"><vh>Section 1</vh></v>
<v t="ekr.20161204043346.7"><vh>Section 2</vh>
<v t="ekr.20161204043346.8"><vh>Section 2.1</vh>
<v t="ekr.20161204043346.9"><vh>Section 2.1.1</vh></v>
</v>
<v t="ekr.20161204043346.10"><vh>Section 2.2</vh></v>
</v>
<v t="ekr.20161204043346.11"><vh>Section 3</vh></v>
</v>
</v>
</v>
<v t="ekr.20160411033840.1"><vh>@test md-import-test-rst-style</vh>
<v t="ekr.20161125230415.1"><vh>&lt;&lt; define s &gt;&gt; (md-import-test-rst-style)</vh></v>
<v t="ekr.20161202093319.1"><vh>@@auto-markdown c:/leo.repo/leo-editor/leo/test/md-import-test-rst-style</vh>
<v t="ekr.20161202093319.2"><vh>Top</vh>
<v t="ekr.20161202093319.3"><vh>Section 1</vh></v>
<v t="ekr.20161202093319.4"><vh>Section 2</vh>
<v t="ekr.20161202093319.5"><vh>Section 2.1</vh>
<v t="ekr.20161202093319.6"><vh>Section 2.1.1</vh></v>
</v>
<v t="ekr.20161202093319.7"><vh>Section 2.2</vh></v>
</v>
<v t="ekr.20161202093319.8"><vh>Section 3</vh></v>
</v>
</v>
<v t="ekr.20161202093322.9"><vh>@@auto-markdown c:/leo.repo/leo-editor/leo/test/md-import-test-rst-style</vh>
<v t="ekr.20161202093322.10"><vh>Top</vh>
<v t="ekr.20161202093322.11"><vh>Section 1</vh></v>
<v t="ekr.20161202093322.12"><vh>Section 2</vh>
<v t="ekr.20161202093322.13"><vh>Section 2.1</vh>
<v t="ekr.20161202093322.14"><vh>Section 2.1.1</vh></v>
</v>
<v t="ekr.20161202093322.15"><vh>Section 2.2</vh></v>
</v>
<v t="ekr.20161202093322.16"><vh>Section 3</vh></v>
</v>
</v>
<v t="ekr.20161202093409.1"><vh>@@auto-markdown c:/leo.repo/leo-editor/leo/test/md-import-test-rst-style</vh>
<v t="ekr.20161202093409.2"><vh>Top</vh>
<v t="ekr.20161202093409.3"><vh>Section 1</vh></v>
<v t="ekr.20161202093409.4"><vh>Section 2</vh>
<v t="ekr.20161202093409.5"><vh>Section 2.1</vh>
<v t="ekr.20161202093409.6"><vh>Section 2.1.1</vh></v>
</v>
<v t="ekr.20161202093409.7"><vh>Section 2.2</vh></v>
</v>
<v t="ekr.20161202093409.8"><vh>Section 3</vh></v>
</v>
</v>
<v t="ekr.20161202093410.1"><vh>@@auto-markdown c:/leo.repo/leo-editor/leo/test/md-import-test-rst-style</vh>
<v t="ekr.20161202093410.2"><vh>Top</vh>
<v t="ekr.20161202093410.3"><vh>Section 1</vh></v>
<v t="ekr.20161202093410.4"><vh>Section 2</vh>
<v t="ekr.20161202093410.5"><vh>Section 2.1</vh>
<v t="ekr.20161202093410.6"><vh>Section 2.1.1</vh></v>
</v>
<v t="ekr.20161202093410.7"><vh>Section 2.2</vh></v>
</v>
<v t="ekr.20161202093410.8"><vh>Section 3</vh></v>
</v>
</v>
<v t="ekr.20161202093509.22"><vh>@@auto-markdown c:/leo.repo/leo-editor/leo/test/md-import-test-rst-style</vh>
<v t="ekr.20161202093509.23"><vh>Top</vh>
<v t="ekr.20161202093509.24"><vh>Section 1</vh></v>
<v t="ekr.20161202093509.25"><vh>Section 2</vh>
<v t="ekr.20161202093509.26"><vh>Section 2.1</vh>
<v t="ekr.20161202093509.27"><vh>Section 2.1.1</vh></v>
</v>
<v t="ekr.20161202093509.28"><vh>Section 2.2</vh></v>
</v>
<v t="ekr.20161202093509.29"><vh>Section 3</vh></v>
</v>
</v>
<v t="ekr.20161204034142.27"><vh>@@auto-markdown c:/leo.repo/leo-editor/leo/test/md-import-test-rst-style</vh>
<v t="ekr.20161204034142.28"><vh>Top</vh>
<v t="ekr.20161204034142.29"><vh>Section 1</vh></v>
<v t="ekr.20161204034142.30"><vh>Section 2</vh>
<v t="ekr.20161204034142.31"><vh>Section 2.1</vh>
<v t="ekr.20161204034142.32"><vh>Section 2.1.1</vh></v>
</v>
<v t="ekr.20161204034142.33"><vh>Section 2.2</vh></v>
</v>
<v t="ekr.20161204034142.34"><vh>Section 3</vh></v>
</v>
</v>
<v t="ekr.20161204034207.9"><vh>@@auto-markdown c:/leo.repo/leo-editor/leo/test/md-import-test-rst-style</vh>
<v t="ekr.20161204034207.10"><vh>Top</vh>
<v t="ekr.20161204034207.11"><vh>Section 1</vh></v>
<v t="ekr.20161204034207.12"><vh>Section 2</vh>
<v t="ekr.20161204034207.13"><vh>Section 2.1</vh>
<v t="ekr.20161204034207.14"><vh>Section 2.1.1</vh></v>
</v>
<v t="ekr.20161204034207.15"><vh>Section 2.2</vh></v>
</v>
<v t="ekr.20161204034207.16"><vh>Section 3</vh></v>
</v>
</v>
<v t="ekr.20161204035451.27"><vh>@@auto-markdown c:/leo.repo/leo-editor/leo/test/md-import-test-rst-style</vh>
<v t="ekr.20161204035451.28"><vh>Top</vh>
<v t="ekr.20161204035451.29"><vh>Section 1</vh></v>
<v t="ekr.20161204035451.30"><vh>Section 2</vh>
<v t="ekr.20161204035451.31"><vh>Section 2.1</vh>
<v t="ekr.20161204035451.32"><vh>Section 2.1.1</vh></v>
</v>
<v t="ekr.20161204035451.33"><vh>Section 2.2</vh></v>
</v>
<v t="ekr.20161204035451.34"><vh>Section 3</vh></v>
</v>
</v>
<v t="ekr.20161204041310.61"><vh>@@auto-md c:/leo.repo/leo-editor/leo/test/md-import-test-rst-style</vh>
<v t="ekr.20161204041310.62"><vh>Top</vh>
<v t="ekr.20161204041310.63"><vh>Section 1</vh></v>
<v t="ekr.20161204041310.64"><vh>Section 2</vh>
<v t="ekr.20161204041310.65"><vh>Section 2.1</vh>
<v t="ekr.20161204041310.66"><vh>Section 2.1.1</vh></v>
</v>
<v t="ekr.20161204041310.67"><vh>Section 2.2</vh></v>
</v>
<v t="ekr.20161204041310.68"><vh>Section 3</vh></v>
</v>
</v>
<v t="ekr.20161204041359.1"><vh>@@auto-md c:/leo.repo/leo-editor/leo/test/md-import-test-rst-style</vh>
<v t="ekr.20161204041359.2"><vh>Top</vh>
<v t="ekr.20161204041359.3"><vh>Section 1</vh></v>
<v t="ekr.20161204041359.4"><vh>Section 2</vh>
<v t="ekr.20161204041359.5"><vh>Section 2.1</vh>
<v t="ekr.20161204041359.6"><vh>Section 2.1.1</vh></v>
</v>
<v t="ekr.20161204041359.7"><vh>Section 2.2</vh></v>
</v>
<v t="ekr.20161204041359.8"><vh>Section 3</vh></v>
</v>
</v>
<v t="ekr.20161204041418.9"><vh>@@auto-md c:/leo.repo/leo-editor/leo/test/md-import-test-rst-style</vh>
<v t="ekr.20161204041418.10"><vh>Top</vh>
<v t="ekr.20161204041418.11"><vh>Section 1</vh></v>
<v t="ekr.20161204041418.12"><vh>Section 2</vh>
<v t="ekr.20161204041418.13"><vh>Section 2.1</vh>
<v t="ekr.20161204041418.14"><vh>Section 2.1.1</vh></v>
</v>
<v t="ekr.20161204041418.15"><vh>Section 2.2</vh></v>
</v>
<v t="ekr.20161204041418.16"><vh>Section 3</vh></v>
</v>
</v>
<v t="ekr.20161204041646.1"><vh>@@auto-md c:/leo.repo/leo-editor/leo/test/md-import-test-rst-style</vh>
<v t="ekr.20161204041646.2"><vh>Top</vh>
<v t="ekr.20161204041646.3"><vh>Section 1</vh></v>
<v t="ekr.20161204041646.4"><vh>Section 2</vh>
<v t="ekr.20161204041646.5"><vh>Section 2.1</vh>
<v t="ekr.20161204041646.6"><vh>Section 2.1.1</vh></v>
</v>
<v t="ekr.20161204041646.7"><vh>Section 2.2</vh></v>
</v>
<v t="ekr.20161204041646.8"><vh>Section 3</vh></v>
</v>
</v>
<v t="ekr.20161204041724.9"><vh>@@auto-md c:/leo.repo/leo-editor/leo/test/md-import-test-rst-style</vh>
<v t="ekr.20161204041724.10"><vh>Top</vh>
<v t="ekr.20161204041724.11"><vh>Section 1</vh></v>
<v t="ekr.20161204041724.12"><vh>Section 2</vh>
<v t="ekr.20161204041724.13"><vh>Section 2.1</vh>
<v t="ekr.20161204041724.14"><vh>Section 2.1.1</vh></v>
</v>
<v t="ekr.20161204041724.15"><vh>Section 2.2</vh></v>
</v>
<v t="ekr.20161204041724.16"><vh>Section 3</vh></v>
</v>
</v>
<v t="ekr.20161204041800.9"><vh>@@auto-md c:/leo.repo/leo-editor/leo/test/md-import-test-rst-style</vh>
<v t="ekr.20161204041800.10"><vh>Top</vh>
<v t="ekr.20161204041800.11"><vh>Section 1</vh></v>
<v t="ekr.20161204041800.12"><vh>Section 2</vh>
<v t="ekr.20161204041800.13"><vh>Section 2.1</vh>
<v t="ekr.20161204041800.14"><vh>Section 2.1.1</vh></v>
</v>
<v t="ekr.20161204041800.15"><vh>Section 2.2</vh></v>
</v>
<v t="ekr.20161204041800.16"><vh>Section 3</vh></v>
</v>
</v>
<v t="ekr.20161204042305.104"><vh>@@auto-md c:/leo.repo/leo-editor/leo/test/md-import-test-rst-style</vh>
<v t="ekr.20161204042305.105"><vh>Top</vh>
<v t="ekr.20161204042305.106"><vh>Section 1</vh></v>
<v t="ekr.20161204042305.107"><vh>Section 2</vh>
<v t="ekr.20161204042305.108"><vh>Section 2.1</vh>
<v t="ekr.20161204042305.109"><vh>Section 2.1.1</vh></v>
</v>
<v t="ekr.20161204042305.110"><vh>Section 2.2</vh></v>
</v>
<v t="ekr.20161204042305.111"><vh>Section 3</vh></v>
</v>
</v>
<v t="ekr.20161204042719.12"><vh>@@auto-md c:/leo.repo/leo-editor/leo/test/md-import-test-rst-style</vh>
<v t="ekr.20161204042719.13"><vh>Top</vh>
<v t="ekr.20161204042719.14"><vh>Section 1</vh></v>
<v t="ekr.20161204042719.15"><vh>Section 2</vh>
<v t="ekr.20161204042719.16"><vh>Section 2.1</vh>
<v t="ekr.20161204042719.17"><vh>Section 2.1.1</vh></v>
</v>
<v t="ekr.20161204042719.18"><vh>Section 2.2</vh></v>
</v>
<v t="ekr.20161204042719.19"><vh>Section 3</vh></v>
</v>
</v>
<v t="ekr.20161204042822.9"><vh>@@auto-md c:/leo.repo/leo-editor/leo/test/md-import-test-rst-style</vh>
<v t="ekr.20161204042822.10"><vh>Top</vh>
<v t="ekr.20161204042822.11"><vh>Section 1</vh></v>
<v t="ekr.20161204042822.12"><vh>Section 2</vh>
<v t="ekr.20161204042822.13"><vh>Section 2.1</vh>
<v t="ekr.20161204042822.14"><vh>Section 2.1.1</vh></v>
</v>
<v t="ekr.20161204042822.15"><vh>Section 2.2</vh></v>
</v>
<v t="ekr.20161204042822.16"><vh>Section 3</vh></v>
</v>
</v>
<v t="ekr.20161204043017.27"><vh>@@auto-md c:/leo.repo/leo-editor/leo/test/md-import-test-rst-style</vh>
<v t="ekr.20161204043017.28"><vh>Top</vh>
<v t="ekr.20161204043017.29"><vh>Section 1</vh></v>
<v t="ekr.20161204043017.30"><vh>Section 2</vh>
<v t="ekr.20161204043017.31"><vh>Section 2.1</vh>
<v t="ekr.20161204043017.32"><vh>Section 2.1.1</vh></v>
</v>
<v t="ekr.20161204043017.33"><vh>Section 2.2</vh></v>
</v>
<v t="ekr.20161204043017.34"><vh>Section 3</vh></v>
</v>
</v>
<v t="ekr.20161204043032.104"><vh>@@auto-md c:/leo.repo/leo-editor/leo/test/md-import-test-rst-style</vh>
<v t="ekr.20161204043032.105"><vh>Top</vh>
<v t="ekr.20161204043032.106"><vh>Section 1</vh></v>
<v t="ekr.20161204043032.107"><vh>Section 2</vh>
<v t="ekr.20161204043032.108"><vh>Section 2.1</vh>
<v t="ekr.20161204043032.109"><vh>Section 2.1.1</vh></v>
</v>
<v t="ekr.20161204043032.110"><vh>Section 2.2</vh></v>
</v>
<v t="ekr.20161204043032.111"><vh>Section 3</vh></v>
</v>
</v>
<v t="ekr.20161204043346.12"><vh>@@auto-md c:/leo.repo/leo-editor/leo/test/md-import-test-rst-style</vh>
<v t="ekr.20161204043346.13"><vh>Top</vh>
<v t="ekr.20161204043346.14"><vh>Section 1</vh></v>
<v t="ekr.20161204043346.15"><vh>Section 2</vh>
<v t="ekr.20161204043346.16"><vh>Section 2.1</vh>
<v t="ekr.20161204043346.17"><vh>Section 2.1.1</vh></v>
</v>
<v t="ekr.20161204043346.18"><vh>Section 2.2</vh></v>
</v>
<v t="ekr.20161204043346.19"><vh>Section 3</vh></v>
</v>
</v>
</v>
<v t="ekr.20161125134815.1"><vh>@test markdown importer-basic</vh></v>
<v t="ekr.20161126111517.1"><vh>@test markdown importer-implicit section</vh></v>
<v t="ekr.20161216141315.1"><vh>@test markdown importer-@@-section-name</vh></v>
<v t="ekr.20161127181028.1"><vh>@test markdown github syntax</vh></v>
</v>
<v t="ekr.20090529141856.4784"><vh>Tests of @auto-rst</vh>
<v t="ekr.20090529141856.4785"></v>
<v t="ekr.20140725132959.4593"></v>
<v t="ekr.20090529141856.4786"></v>
<v t="ekr.20090529141856.4787"></v>
<v t="ekr.20090529141856.4788"></v>
<v t="ekr.20090529141856.4789"></v>
<v t="ekr.20161129104243.1"></v>
</v>
<v t="ekr.20140724220921.5199"><vh>Tests of individual methods</vh>
<v t="ekr.20111214100515.3921"><vh>@@@test ic.createOutline: at-auto with lines that look like section references</vh></v>
<v t="ekr.20140206132559.4567"></v>
<v t="ekr.20150919074122.1"></v>
</v>
<v t="ekr.20161204041557.1"><vh>All other tests</vh>
<v t="ekr.20090529141856.4793"><vh>@@test test imports for modes</vh></v>
<v t="ekr.20140723134017.4464"><vh>@test @auto importers</vh></v>
<v t="ekr.20161109065940.1"><vh>@test Importer.get_leading_indent</vh></v>
<v t="ekr.20161117011147.1"><vh>@test Importer.get_str_lws</vh></v>
<v t="ekr.20161109065949.1"><vh>@test Importer.is_ws_line</vh></v>
<v t="ekr.20161011052016.1"><vh>@test importers.javascript.scan_line</vh></v>
<v t="ekr.20170407065952.1"><vh>@test importers.javascript.op_pattern</vh></v>
</v>
<v t="ekr.20140724164600.4590"><vh>@test zz end of leoImport tests</vh></v>
</v>
<v t="ekr.20080501121449.3"><vh>@test insert node</vh>
<v t="ekr.20171112182742.3"><vh>A</vh></v>
<v t="ekr.20171112182742.5"><vh>newHeadline</vh></v>
<v t="ekr.20171112182742.4"><vh>B</vh></v>
</v>
<v t="ekr.20080503082625.3"><vh>@test delete node</vh></v>
</v>
</vnodes>
<tnodes>
<t tx="bwmulder.20050108100437.1">@killcolor

Running unit tests from test.leo is easy, provided you have enabled the
Scripting plugin. When this plugin is enabled Leo will create a blue 'script
button' in the icon bar called 'unit test'. 

- To run all unit tests, select the node in test.leo called 'Unit tests...',
then do &lt;alt-4&gt; 

- To run a single test, select an @test node and do &lt;alt-4&gt;.

- To run a suite of tests, select an @suite node and do &lt;alt-4&gt;.

- To run any other collection of tests, create an outline containing those @test
or @suite nodes, select the root of that tree and do &lt;alt-4&gt; .

Several nodes in the tree @thin ../src/leoTest.py (in test.leo) contain support
code for @test, @suite, etc. so if you want all the gory details you can read
the code. It's not complicated: Leo creates UnitTest classes automatically whose
run method is the body of the @suite or @test node.
</t>
<t tx="ekr.20041121151002"># Many of these are required for unit tests.
# Do not change them without running all unit tests.</t>
<t tx="ekr.20050328101834"></t>
<t tx="ekr.20050328101834.1"></t>
<t tx="ekr.20050328101834.2"></t>
<t tx="ekr.20050328101834.3"></t>
<t tx="ekr.20050618061835">@killcolor

Here is a tutorial written by Roger Erens.

Version Date        LeoID       Remarks
------- ----        -----       -------
0.1     20050519    rogererens  Initial version</t>
<t tx="ekr.20050618061835.1">So you think "Well, since I've written this piece of funky Python software, and everybody keeps saying how useful unit testing is, I really ought to start using unit tests." And since Leo's creator has said countless times in the Leo forums how easy unit testing in Leo is, a few uncomplicated examples might help convince you that he's not spamming.

Beware: this How-To should be the last time that you write tests AFTER having written your funky software! Test Driven Development dictates that tests have to be prepared BEFORE you get down to writing your actual code. See a nice tutorial on O'Reilly's website (url given in the descendant node).</t>
<t tx="ekr.20050618061835.10">Start of Do @test
F
======================================================================
FAIL: @test my second Leo test

----------------------------------------------------------------------
Traceback (most recent call last):
  File "C:\Documents and Settings\re1705\My Documents\PythonStuff\leo\src\leoTes
t.py", line 148, in runTest
    exec script + '\n' in {'c':c,'g':g,'p':p}
  File "&lt;string&gt;", line 3, in ?
AssertionError

----------------------------------------------------------------------
Ran 1 test in 0.010s

FAILED (failures=1)
End of Do @test</t>
<t tx="ekr.20050618061835.11">A real fun feature of Leo is that Leo saves you from having to select each and single @test node and press the 'Do @test' button to obtain testing results. Just collecting the @test nodes under an organizing node, selecting that organizing node, and pressing the 'Do @test' button will suffice.
Of course, this was one of the key ideas of unit testing, but it's nice to see it being implemented by Leo so smoothly!

So, press the button while having this node selected, and see if your console's output matches the third child node more or less. </t>
<t tx="ekr.20050618061835.12">Start of Do @test
.F
======================================================================
FAIL: @test my second Leo test

----------------------------------------------------------------------
Traceback (most recent call last):
  File "C:\leo\src\leoTest.py", line 148, in runTest
    exec script + '\n' in {'c':c,'g':g,'p':p}
  File "&lt;string&gt;", line 3, in ?
AssertionError

----------------------------------------------------------------------
Ran 2 tests in 0.040s

FAILED (failures=1)
End of Do @test</t>
<t tx="ekr.20050618061835.13">Okay: so you've seen now some simple stand-alone tests to get your toes wet.
Now, we get to the 'grande finale' and see real-life usage of the @test nodes.

The @test child node below illustrates the following points:

1.  The node imports the module to test (and keeps it up to date by reloading it).
2.  It also obtains data to use as input and referral. This is what you might call
    the setUp methods in traditional unit tests. If more tests need the same data,
    you can put the nodes in a central place where all the @test nodes can find
    them. Likewise, common code for several unit tests might be collected in a
    central place.
3.  Comparable with the traditional unit tests' tearDown method, some statements
    can follow the test itself, if neccessary. You might also consider using a
    try/finally construct.
4.  I have used g.es() statements instead of print statements, since the latter
    clutter the console. Try replacing the g.es() statements by corresponding
    print statements to see what I mean. With more than one @test node being tested,
    this will give quite a dreadful look.</t>
<t tx="ekr.20050618061835.14">@color

try:
    # SETUP
    import koekiemonster # this module defines a function want() which we want to test
    reload(koekiemonster) # changes in koekiemonster need to propagate to the test

    # obtaining the input parameter for the function
    inputNode = p.firstChild()
    inputData = inputNode.b
    
    # obtaining the expected result from the function with above input parameter
    expectedResultNode = inputNode.next()
    expected = expectedResultNode.b
    
    # execute the function with above input parameter
    result = koekiemonster.wants(inputData)
    
    # TEST
    assert(result == expected)
    
    # TEARDOWN
    g.es("Now it's time to clean up")

except AssertionError:
    # TEARDOWN
    g.es("Oh oh! %s failed:" % p.h.strip())
    g.es("koekiemonster.wants(%s)==%s" % (inputData, result))
    g.es("Expected: %s" % expected)
    raise # pass the exception on to the unit test machinery</t>
<t tx="ekr.20050618061835.15">vegetables</t>
<t tx="ekr.20050618061835.16">Yuck!</t>
<t tx="ekr.20050618061835.17">Start of Do @test
F
======================================================================
FAIL: @test koekiemonster.wants()

----------------------------------------------------------------------
Traceback (most recent call last):
  File "C:\leo\src\leoTest.py", line 148, in runTest
    exec script + '\n' in {'c':c,'g':g,'p':p}
  File "&lt;string&gt;", line 22, in ?
AssertionError

----------------------------------------------------------------------
Ran 1 test in 0.070s

FAILED (failures=1)
End of Do @test</t>
<t tx="ekr.20050618061835.18">Start of Do @test
Oh oh: @test koekiemonster.wants() failed:
koekiemonster.wants(vegetables)=Yack!
Expected: Yuck!
F
======================================================================
FAIL: @test koekiemonster.wants()

----------------------------------------------------------------------
Traceback (most recent call last):
  File "C:\leo\src\leoTest.py", line 148, in runTest
    exec script + '\n' in {'c':c,'g':g,'p':p}
  File "&lt;string&gt;", line 22, in ?
AssertionError

----------------------------------------------------------------------
Ran 1 test in 0.051s

FAILED (failures=1)
End of Do @test</t>
<t tx="ekr.20050618061835.19">With the aforementioned possibilities of running all @test nodes in a subtree
with a single click on a button, the sharing of input/expected data, and the
sharing of setUp/tearDown code, there hardly seems a need for the @suite nodes.

On Leo's website
(http://webpages.charter.net/edreamleo/scripting.html#unit-testing-with-test-and-suite)
I could still find some extra info on @suite nodes, not found in LeoDocs.leo:

&lt;quote&gt;

Using @suite nodes

Such nodes create a suite of tests. Leo executes the script in these nodes similar to @test nodes, but Leo assumes that the script in an @suite node will do the following:

    * Create a suite of unit tests
    * Put the suite in g.app.scriptDict["suite"]

The difference between @test and @suite is:

    * Leo creates a unit test from script in an @test node by creating an instance of generalTestCase, a subclass of unittest.TestCase.
    * The script in an @suite node creates the test suite.

An @suite nodes allows us to create "legacy" unit tests simply. For example,
rather than rewriting all the reformatParagraph unit tests to use @test nodes, I
simply wrote an @suite node with the following body.

    suite = c.testManager.makeReformatParagraphSuite()
    g.app.scriptDict['suite'] = suite

&lt;/quote&gt;

Well, that's almost, but not quite completely, totally incomprehensible to me.
Fortunately, since Leo's creator removed most of this quote from LeoDocs.leo and
test.leo, this information appears to be outdated
.</t>
<t tx="ekr.20050618061835.2"></t>
<t tx="ekr.20050618061835.20">Don't forget to read the node
Users Guide--&gt;Chapter 7: Scripting Leo with Python--&gt;Unit testing with @test, @suite
in LeoDocs.leo, especially the final notes. Also investigate a little further in test.leo to see some heavy weight lifting.

This concludes my How-To on using @test. It was not written by an expert on (unit) testing;
it is more or less the result of keeping notes on my way to find out how I could get started
with unit tests in Leo. Maybe it's useful for other newbies as well.

Please post any remarks on one of the Leo Fora, and if deemed helpful, I'll be glad to incorporate them into a next version.

Happy testing!</t>
<t tx="ekr.20050618061835.3">Comment by EKR: There is no need to do this if you use test.leo for your unit tests:  just use the unit test button.

From the console, start up a Leo instance. On MS Windows: go to the folder in which you installed Leo 4.3, open up the 'src' folder and double click the 'leo.py' file. Opening a command window, and typing "python leo.py" may be another way.

Use the File--&gt;Open... menu item to open the outline containing your code.

Choose a good-looking position to insert a new node called 'Test zone'. Copy the child node of the node you're reading right now, and paste it as a child node of 'Test zone'. The code it contains is essentially the same as found in the node
Unit tests...--&gt;Do @test
in the file 'test.leo' in the 'test' folder. I just added my 0.2 cents by adding some starting and finishing remarks. Remove them if they clutter your console too much.

Also, make sure that you have an entry 'Scripting' in the 'Plugins' menu (enable the plugin if neccessary). Now is a good time to save your leo file.

With the 'Scripting' plugin (also known as the 'mod_scripting' plugin) enabled, the net effect will be that the next time you open your outline, a blue button with the caption 'Do @test' shows up in the tool bar of Leo, if your screen is wide enough.
To get the button right away in the tool bar, I have to assume that you started Leo with the scripting plugin enabled. In this case, a yellow button with the caption 'script Button' can be pressed while having the node '@button Do @test' selected. Note: the resulting button will not be blue, but pink. Removing a button from the tool bar can be done by right-clicking it.

We'll see the use of this added button soon, but before that, read up on the 'assert' function in the Python manuals, since it is used a lot in testing. It won't be long before you're back here!</t>
<t tx="ekr.20050618061835.4">@color

g.pr("\nStart of Do @test")
c.testManager.doTests(all=False)
g.pr("End of Do @test")</t>
<t tx="ekr.20050618061835.5">The first child node of the node you're reading right now, contains the simplest succeeding test possible.
Select it, and press the button 'Do @test'.
You can find the verbatim result as it got sent to my console in the second child node.

A few things are worth noting here:

1.  The node containing the test must have its headline start with '@test'.
2.  Whenever the 'assert' statement finds out that the expression given to it
    is 'True', a test passes successfully. There are more ways to pass a test, but
    for now, let us stick to the use of assert functions.
3.  A passed test is denoted with a single dot in the output. See the line between
    'Start of Do @test' and the line filled with dashes. This is compatible with the
    way traditional unit testing shows its progress.
4.  Below the dashed line in the output, a summary is printed. This one surely gives
    us a reason to lean back for a moment, and congratualate ourselves with another
    piece of robust, funky code!</t>
<t tx="ekr.20050618061835.6">@color
assert(True)</t>
<t tx="ekr.20050618061835.7">Start of Do @test
.
----------------------------------------------------------------------
Ran 1 test in 0.010s

OK
End of Do @test</t>
<t tx="ekr.20050618061835.8">Now that you've seen a passing test, it should be obvious to imagine how a failing test would look like. See the first child node, and then run it by pressing the 'Do @test' button as before.

Instead of a dot denoting success, we get an 'F' denoting a failure on the line following 'Start of Do @test'. When running a lot of tests, the next part, following the lines filled with '='s, helps to identify which test failed.
It also includes a trace back, but for AssertionErrors, it does not seem to offer much added value to me right now. On second thought: when you have multiple asserts in a test, the trace back can tell you which assert function failed. Still, I would choose for only one assert function per test and get rid of this trace back altogether. This would keep the console much cleaner, IMHO.</t>
<t tx="ekr.20050618061835.9">@color
assert('Spam' == 'Ham')</t>
<t tx="ekr.20051012104957"></t>
<t tx="ekr.20051013162226"></t>
<t tx="ekr.20070113145100"># Not part of cvs distributions, but needed for two unit tests.

dir = g.os_path_join(g.app.loadDir,'..','test','unittest',g.u('chinese\u8116folder'),encoding='utf-8')
s   = g.os_path_join(dir,g.u('chinese\u8116test.leo'),encoding='utf-8')
    
if not g.os_path_exists(dir):
    import os
    os.mkdir(dir)
    g.pr('created chinese folder')
    
if not g.os_path_exists(s):
    f = file(s,'w')
    f.close()
    g.pr('created chinese file')
    
</t>
<t tx="ekr.20070217065840">@nocolor-node

@
To make unit tests, do the following:
    
- Use the make-test script (Alt-5) to create a suboutline for a unit test.
- Put text in the before node, selected desired text, then do the do-before script (Alt-6).
- Execute the command, then do the do-after script (Alt-7).
</t>
<t tx="ekr.20070217065840.1">try:
    p1 = p.insertAfter()
    c.setHeadString(p1,'@test ')
    body = 'c.testManager.runEditCommandTest(c,p)'
    c.setBodyString(p1,body)
    for s in ('work','before','after'):
        p2 = p1.insertAsLastChild()
        c.setHeadString(p2,s)
    p1.expand()
finally:
    c.redraw()
    c.editPosition(p1)</t>
<t tx="ekr.20070217065840.2">@
p should be in tree whose root is a @test node containing 'work', 'before' and
'after' children. The work node should have body text. If all is as expected,
copy the body text the work node to the before node, and represent the selection
range of the work in the headline of the before node.
@c

@others

sel = getSel(c)
top,work,before,after = findNodes(p)
if top and work.b:

    c.setBodyString(before,work.b)
    c.setBodyString(after,'')
    putSelectionInHeadline(c,before,'before',sel)
    c.redraw()
else:
    g.es_print('do-before: not in a proper @test tree')</t>
<t tx="ekr.20070217065840.3">def getSel(c):
    
    w = c.frame.body.bodyCtrl
    i,j= w.getSelectionRange()
    if i == j:
        i = j = w.getInsertPoint()
        sel = (i,i)
    return i,j</t>
<t tx="ekr.20070217065840.4">def findNodes(p):
    
    '''Find the top, work, before and after nodes.
    p should be in tree whose root is a @test node containing
    'work', 'before' and 'after' children.'''
    
    for p in p.self_and_parents_iter():
        if p.h.startswith('@test '):
            break
    top    = p and p.copy()
    work   = top and top.firstChild() 
    before = work and work.next()     
    after  = before and before.next()
    if (
        work   and work.h.startswith('work') and
        before and before.h.startswith('before') and
        after  and after.h.startswith('after')
    ):
        return top,work,before,after
    else:
        return None,None,None,None</t>
<t tx="ekr.20070217065840.5">def putSelectionInHeadline (c,p,prefix,sel):
    
    # g.trace(p.h,repr(sel))

    w = c.frame.body.bodyCtrl
    i,j = sel
    i,j = w.toGuiIndex(i),w.toGuiIndex(j)
    s = '%s sel=%s,%s' % (prefix,i,j)
    c.setHeadString(p,s)
</t>
<t tx="ekr.20070217065840.6">@
p should be in tree whose root is a @test node containing 'work', 'before' and
'after' children. If all is as expected, copy the work node to the after node,
and represent the selection range of the work node in the headline of the after node.
@c

@others

sel = getSel(c)
top,work,before,after = findNodes(p)
if top:
    c.setBodyString(after,work.b)
    putSelectionInHeadline(c,after,'after',sel)
    c.redraw()
else:
    g.es_print('do-after: not in @test tree')</t>
<t tx="ekr.20070217065840.8">def findNodes(p):
    
    '''Find the top, work, before and after nodes.
    p should be in tree whose root is a @test node containing
    'work', 'before' and 'after' children.'''
    
    for p in p.self_and_parents_iter():
        if p.h.startswith('@test '):
            break
    top    = p and p.copy()
    work   = top and top.firstChild()
    before = work and work.next()
    after  = before and before.next()
    if (
        work   and work.h.startswith('work') and
        before and before.h.startswith('before') and
        after  and after.h.startswith('after')
    ):
        return top,work,before,after
    else:
        return None,None,None,None</t>
<t tx="ekr.20070217065840.9">def putSelectionInHeadline (c,p,prefix,sel):
    
    # g.trace(p.h,repr(sel))
    
    w = c.frame.body.bodyCtrl
    i,j = sel
    i,j = w.toGuiIndex(i),w.toGuiIndex(j)
    s = '%s sel=%s,%s' % (prefix,i,j)
    c.setHeadString(p,s)
</t>
<t tx="ekr.20070217072822">def getSel(c):
    
    w = c.frame.body.bodyCtrl
    i,j= w.getSelectionRange()
    if i == j:
        i = j = w.getInsertPoint()
        sel = (i,i)
    return i,j</t>
<t tx="ekr.20070417092935" str_leo_pos="4">@nosearch</t>
<t tx="ekr.20070503064257"></t>
<t tx="ekr.20070528100318"># Required to make a typing test work.
</t>
<t tx="ekr.20070627082044.808"># A file that contains functions with errors in them.
# This is used to test error reporting in scripts

@language python
@tabwidth -4

def testIndexError():

    a = []
    b = a[2]

# The next line is used by @test c.checkFileTimeStamp.   
# timestamp: 1231502468.77
</t>
<t tx="ekr.20070627082044.811"># A file to be executed in batch mode as part of unit testing.
# This file is defined in unitTest.leo

@language python
@tabwidth -4

trace = False
import leo.core.leoGlobals as g
path = g.os_path_join(g.app.loadDir,"..","test","unittest","createdFile.txt")
if trace:
    print("batchTest.py: creating: %s" % path)
try:
    with open(path,"w") as f:
        f.write("This file was written by unittest/batchTest.py")
except IOError:
    print("batchTest.py: Can not create: %s" % path)
except Exception:
    print("batchTest.py: unexpected exception creating: %s" % path)
    g.es_exception()
assert g.os_path_exists(path), 'batchTest.py failed'
</t>
<t tx="ekr.20071113140035">fn = g.os_path_abspath(g.os_path_join(g.app.loadDir,'..','core','leoPy.leo'))
assert g.os_path_exists(fn),fn
c1 = c
c2 = g.openWithFileName(fn,old_c=None,enableLog=False)
assert c2
c.frame.bringToFront()
g.app.setLog(c.frame.log)

d1 = {} ; d2 = {}
for c,d in ( (c1,d1),(c2,d2)):
    for p in c.all_unique_positions():
        if p.h.startswith('@test'):
            d[p.h]=p.h

if 0: # not important
    g.pr()
    g.pr('----- Only in unitTest.leo')
    for h in sorted(d1.keys()):
        if not d2.get(h):
            print(h)

print('\n----- Only in leoPy.leo')
for h in sorted(d2.keys()):
    if not d1.get(h):
        print(h)</t>
<t tx="ekr.20071113203234"></t>
<t tx="ekr.20080324133327.2">True: allow linux-like pastes using a mouse's middle button.

Important: this may cause crashes on some platforms.
</t>
<t tx="ekr.20080501121449.3"># This test requires @bool select-next-after-delete = False
assert p.h == '@test insert node',repr(p.h)
root = p.copy()
while p.hasChildren():
    p.firstChild().doDelete(newNode=None)
try:
    assert p.h == '@test insert node',repr(p.h)
    p2 = p.insertAsNthChild(0)
    p2.setHeadString('A')
    p3 = p.insertAsNthChild(1)
    p3.setHeadString('B')
    p.expand()
    c.setCurrentPosition(p2)
    p4 = c.insertHeadline()
    assert p4 == c.p
    p = c.p
    assert p,'no p'
    p.setHeadString('inserted')
    assert p.back(),'no p.back(): %s' % (p)
    assert p.back().h == 'A', 'fail 1'
    assert p.next().h == 'B', 'fail 2'
    c.undoer.undo()
    # With the new undo logic, it takes 2 undoes.
    # The first undo undoes the headline changes,
    # the second undo undoes the insert node.
    if g.app.isExternalUnitTest or g.app.gui.guiName() == 'nullGui':
        # The situation is different in a null Gui.
        pass
    else:
        c.undoer.undo() 
    p = c.p
    assert p == p2,         'fail 3:\n p: %s\np2: %s' % (p,p2)
    assert p.next() == p3,  'fail 4'
    c.undoer.redo()
    p = c.p
    assert p.back(),          'fail 0-2'
    assert p.back().h == 'A', 'fail 1-2'
    assert p.next().h == 'B', 'fail 2-2'
    c.undoer.undo()
    p = c.p
    assert p == p2,         'fail 3-2'
    assert p.next() == p3,  'fail 3-2'
    c.undoer.redo()
    p = c.p
    assert p.back().h == 'A', 'fail 1-3'
    assert p.next().h == 'B', 'fail 2-3'
finally:
    if 0:
        while root.hasChildren():
            root.firstChild().doDelete(newNode=None)
    c.redraw_now(root)
</t>
<t tx="ekr.20080503082625.3"># This test requires @bool select-next-after-delete = False
root = p.copy()
while p.hasChildren():
    p.firstChild().doDelete(newNode=None)
try:
    p2 = p.insertAsNthChild(0)
    p2.setHeadString('A')
    p3 = p.insertAsNthChild(1)
    p3.setHeadString('B')
    p4 = p.insertAsNthChild(2)
    p4.setHeadString('C')
    p.expand()
    c.selectPosition(p3)
    c.deleteOutline()
    c.redraw_now()
    p = c.p
    assert p.h == 'A', 'fail 1: got %s' % p.h
    assert p.next().h == 'C', 'fail 2'
    c.undoer.undo()
    c.outerUpdate()
    p = c.p
    assert p.back() == p2, 'fail 4 %s' % p.back()
    assert p.next() == p4, 'fail 5'
    c.undoer.redo()
    c.outerUpdate()
    p = c.p
    assert p.h == 'A',          'fail 1-2'
    assert p.next().h == 'C',   'fail 2-2'
    c.undoer.undo()
    c.outerUpdate()
    p = c.p
    assert p.back() == p2,  'fail 4-2'
    assert p.next() == p4,  'fail 5-2'
    c.undoer.redo()
    c.outerUpdate()
    p = c.p
    assert p.h == 'A',          'fail 1-3'
    assert p.next().h == 'C',   'fail 2-3'

finally:
    if 1:
        while root.hasChildren():
            root.firstChild().doDelete(newNode=None)
    c.redraw_now(root)
</t>
<t tx="ekr.20080904084223.1"># changed.
@others
@language python
@tabwidth -4
</t>
<t tx="ekr.20080904102243.2">@language python
@tabwidth -4
@others
</t>
<t tx="ekr.20080904102243.3">def child():
    pass
</t>
<t tx="ekr.20080905130723.3">@language python
@tabwidth -4
@others
</t>
<t tx="ekr.20080905130723.4">def child():
    pass
</t>
<t tx="ekr.20080907122804.1">@others</t>
<t tx="ekr.20080907123324.2">@language python
@tabwidth -4
# before @others: line 1
@others
# last line: line 6</t>
<t tx="ekr.20080907123324.3">def spam(): # line 2
    pass
</t>
<t tx="ekr.20090306091634.1">tree = c.frame.tree
if hasattr(tree,'redrawCount'):
    g.pr('%s: %s' % (p.h,tree.redrawCount))
</t>
<t tx="ekr.20090529115704.4557">import glob
import os
x = c.shadowController
@others
shadow_fn  = x.shadowPathName('unittest/xyzzy/test.py')
shadow_dir = x.shadowDirName('unittest/xyzzy/test.py')
if g.os_path_exists(shadow_fn):
    g.utils_remove(shadow_fn,verbose=True)
    # assert not os.path.exists(shadow_fn),'still exists: %s' % shadow_fn
    if os.path.exists(shadow_fn):
        # Fix bug #512: Just skip this test.
        self.skipTest('Can not delete the directory.')
deleteShadowDir(shadow_dir)
x.makeShadowDirectory(shadow_dir)
assert os.path.exists(shadow_dir)
deleteShadowDir(shadow_dir)
</t>
<t tx="ekr.20090529115704.4558">def deleteShadowDir(shadowDir):

    if g.os_path_exists(shadow_dir):
        files = g.os_path_abspath(g.os_path_join(shadow_dir,"*.*"))
        files = glob.glob(files)
        for z in files:
            if z != shadow_dir:
                # g.trace(z)
                os.unlink(z)
        # g.trace(shadow_dir)
        os.rmdir(shadow_dir)
        assert not os.path.exists(shadow_dir),'still exists: %s' % shadow_dir
</t>
<t tx="ekr.20090529141856.4682"></t>
<t tx="ekr.20090529141856.4684">@language python
@tabwidth -4
</t>
<t tx="ekr.20090529141856.4685"># Create unit tests in g.app.scriptDict["suite"]

suite = c.testManager.makeImportExportSuite("exportTests",doImport=False)

# g.app.scriptDict['suite'] = suite
</t>
<t tx="ekr.20090529141856.4698"></t>
<t tx="ekr.20090529141856.4699"># Create unit tests in g.app.scriptDict["suite"]

suite = c.testManager.makeImportExportSuite("importTests",doImport=True)

# g.app.scriptDict['suite'] = suite
</t>
<t tx="ekr.20090529141856.4716">@tabwidth -4
@language python
</t>
<t tx="ekr.20090529141856.4717"></t>
<t tx="ekr.20090529141856.4718">if 0: # Preamble
    # g.cls()
    if c.isChanged(): c.save()
    import leo.core.leoImport as leoImport
    import leo.plugins.importers.linescanner as linescanner
    import leo.plugins.importers.c
    import imp
    imp.reload(leo.plugins.importers.linescanner)
    imp.reload(leo.plugins.importers.c)
    imp.reload(leoImport)
    g.app.loadManager.createAllImporetersData()
    ic = leoImport.LeoImportCommands(c)
else:
    ic = c.importCommands  

s = '''\
class cTestClass1 {

    int foo (int a) {
        a = 2 ;
    }

    char bar (float c) {
        ;
    }
}
'''
table = (
    'class cTestClass1',
    'int foo',
    'char bar',
)
try:
    ic.cUnitTest(p,s=s,showTree=True)
    if 1: # Check structure
        root = c.p.lastChild()
        assert root.h.startswith('@@'), root.h
        p2 = root.firstChild()
        for h in table:
            assert p2.h == h, (p2.h, h)
            p2.moveToThreadNext()
        assert not root.isAncestorOf(p2), p2.h # Extra nodes
finally:
    if 1: # Delete children
        p.deleteAllChildren()
    c.redraw()
</t>
<t tx="ekr.20090529141856.4719">if 0: # Preamble
    # g.cls()
    if c.isChanged(): c.save()
    import leo.core.leoImport as leoImport
    import leo.plugins.importers.linescanner as linescanner
    import leo.plugins.importers.c
    import imp
    imp.reload(leo.plugins.importers.linescanner)
    imp.reload(leo.plugins.importers.c)
    imp.reload(leoImport)
    g.app.loadManager.createAllImporetersData()
    ic = leoImport.LeoImportCommands(c)
else:
    ic = c.importCommands  
s = '''\
class cTestClass1 {

    int foo (int a) {
// an underindented line.
        a = 2 ;
    }

    // This should go with the next function.

    char bar (float c) {
        ;
    }
}
'''
table = (
    'class cTestClass1',
    'int foo',
    'char bar',
)
try:
    ic.cUnitTest(p,s=s,showTree=True)
    if 1: # Check structure
        root = c.p.lastChild()
        assert root.h.startswith('@@'), root.h
        p2 = root.firstChild()
        for h in table:
            assert p2.h == h, (p2.h, h)
            p2.moveToThreadNext()
        assert not root.isAncestorOf(p2), p2.h # Extra nodes
finally:
    if 1: # Delete children
        p.deleteAllChildren()
    c.redraw()
</t>
<t tx="ekr.20090529141856.4721">if 0: # Preamble
    # g.cls()
    if c.isChanged(): c.save()
    import leo.core.leoImport as leoImport
    import leo.plugins.importers.linescanner as linescanner
    import leo.plugins.importers.c
    import imp
    imp.reload(leo.plugins.importers.linescanner)
    imp.reload(leo.plugins.importers.c)
    imp.reload(leoImport)
    g.app.loadManager.createAllImporetersData()
    ic = leoImport.LeoImportCommands(c)
else:
    ic = c.importCommands
s = '''\
void
aaa::bbb::doit
    (
    awk* b
    )
{
    assert(false);
}

bool
aaa::bbb::dothat
    (
    xyz *b
    ) //  &lt;---------------------problem
{
    return true;
}
'''
table = (
    'void aaa::bbb::doit',
    'bool aaa::bbb::dothat',
)
try:
    ic.cUnitTest(p,s=s,showTree=True)
    if 1: # Check structure
        root = c.p.lastChild()
        assert root.h.startswith('@@'), root.h
        p2 = root.firstChild()
        for h in table:
            assert p2.h == h, (p2.h, h)
            p2.moveToThreadNext()
        assert not root.isAncestorOf(p2), p2.h # Extra nodes
finally:
    if 1: # Delete children 
        p.deleteAllChildren()
    c.redraw()
</t>
<t tx="ekr.20090529141856.4722">if 0: # Preamble
    # g.cls()
    if c.isChanged(): c.save()
    import leo.core.leoImport as leoImport
    import leo.plugins.importers.linescanner as linescanner
    import leo.plugins.importers.c
    import imp
    imp.reload(leo.plugins.importers.linescanner)
    imp.reload(leo.plugins.importers.c)
    imp.reload(leoImport)
    g.app.loadManager.createAllImporetersData()
    ic = leoImport.LeoImportCommands(c)
else:
    ic = c.importCommands  
s = '''\
void
aaa::bbb::doit
    (
    awk* b
    )
{
    assert(false);
}

bool
aaa::bbb::dothat
    (
    xyz *b
    ) 
{
    return true;
} //  &lt;---------------------problem
'''
table = (
    'void aaa::bbb::doit',
    'bool aaa::bbb::dothat',
)
try:
    ic.cUnitTest(p,s=s,showTree=True)
    if 1: # Check structure
        root = c.p.lastChild()
        assert root.h.startswith('@@'), root.h
        p2 = root.firstChild()
        for h in table:
            assert p2.h == h, (p2.h, h)
            p2.moveToThreadNext()
        assert not root.isAncestorOf(p2), p2.h # Extra nodes
finally:
    if 1: # Delete children
        p.deleteAllChildren()
    c.redraw()
</t>
<t tx="ekr.20090529141856.4723">if 0: # Preamble
    # g.cls()
    if c.isChanged(): c.save()
    import leo.core.leoImport as leoImport
    import leo.plugins.importers.linescanner as linescanner
    import leo.plugins.importers.c
    import imp
    imp.reload(leo.plugins.importers.linescanner)
    imp.reload(leo.plugins.importers.c)
    imp.reload(leoImport)
    g.app.loadManager.createAllImporetersData()
    ic = leoImport.LeoImportCommands(c)
else:
    ic = c.importCommands
s = '''
void
aaa::bbb::doit
    (
    awk* b  // leading blank
    )
{
	assert(false); // leading tab
}

'''
table = (
    'void aaa::bbb::doit',
)
try:
    ic.cUnitTest(p,s=s,showTree=True)
    if 1: # Check structure
        root = c.p.lastChild()
        assert root.h.startswith('@@'), root.h
        p2 = root.firstChild()
        for h in table:
            assert p2.h == h, (p2.h, h)
            p2.moveToThreadNext()
        assert not root.isAncestorOf(p2), p2.h # Extra nodes
finally:
    if 1: # Delete children
        p.deleteAllChildren()
    c.redraw()
</t>
<t tx="ekr.20090529141856.4724">if 0: # Preamble
    # g.cls()
    if c.isChanged(): c.save()
    import leo.core.leoImport as leoImport
    import leo.plugins.importers.linescanner as linescanner
    import leo.plugins.importers.c
    import imp
    imp.reload(leo.plugins.importers.linescanner)
    imp.reload(leo.plugins.importers.c)
    imp.reload(leoImport)
    g.app.loadManager.createAllImporetersData()
    ic = leoImport.LeoImportCommands(c)
else:
    ic = c.importCommands  
s = '''\
static void
ReleaseCharSet(cset)
    CharSet *cset;
{
    ckfree((char *)cset-&gt;chars);
    if (cset-&gt;ranges) {
    ckfree((char *)cset-&gt;ranges);
    }
}
'''
table = (
    'static void ReleaseCharSet',
)
try:
    ic.cUnitTest(p,s=s,showTree=True)
    if 1: # Check structure
        root = c.p.lastChild()
        assert root.h.startswith('@@'), root.h
        p2 = root.firstChild()
        for h in table:
            assert p2.h == h, (p2.h, h)
            p2.moveToThreadNext()
        assert not root.isAncestorOf(p2), p2.h # Extra nodes
finally:
    if 1: # Delete children
        p.deleteAllChildren()
    c.redraw()
</t>
<t tx="ekr.20090529141856.4725">if 0: # Preamble
    # g.cls()
    if c.isChanged(): c.save()
    import leo.core.leoImport as leoImport
    import leo.plugins.importers.linescanner as linescanner
    import leo.plugins.importers.c
    import imp
    imp.reload(leo.plugins.importers.linescanner)
    imp.reload(leo.plugins.importers.c)
    imp.reload(leoImport)
    g.app.loadManager.createAllImporetersData()
    ic = leoImport.LeoImportCommands(c)
else:
    ic = c.importCommands  
s = '''\
Tcl_Obj *
Tcl_NewLongObj(longValue)
    register long longValue;	/* Long integer used to initialize the
         * new object. */
{
    return Tcl_DbNewLongObj(longValue, "unknown", 0);
}
'''
table = (
    'Tcl_Obj * Tcl_NewLongObj',
)
try:
    ic.cUnitTest(p,s=s,showTree=True)
    if 1: # Check structure
        root = c.p.lastChild()
        assert root.h.startswith('@@'), root.h
        p2 = root.firstChild()
        for h in table:
            assert p2.h == h, (p2.h, h)
            p2.moveToThreadNext()
        assert not root.isAncestorOf(p2), p2.h # Extra nodes
finally:
    if 1: # Delete children
        p.deleteAllChildren()
    c.redraw()
</t>
<t tx="ekr.20090529141856.4726">if 0: # Preamble
    # g.cls()
    if c.isChanged(): c.save()
    import leo.core.leoImport as leoImport
    import leo.plugins.importers.linescanner as linescanner
    import leo.plugins.importers.c
    import imp
    imp.reload(leo.plugins.importers.linescanner)
    imp.reload(leo.plugins.importers.c)
    imp.reload(leoImport)
    g.app.loadManager.createAllImporetersData()
    ic = leoImport.LeoImportCommands(c)
else:
    ic = c.importCommands  
s = '''\
extern "C"
{
#include "stuff.h"
void    init(void);
#include "that.h"
}
'''
table = (
    'extern "C"',
)
try:
    ic.cUnitTest(p,s=s,showTree=True)
    if 1:
        root = c.p.lastChild()
        assert root.h.startswith('@@'), root.h
        p2 = root.firstChild()
        for h in table:
            assert p2.h == h, (p2.h, h)
            p2.moveToThreadNext()
        assert not root.isAncestorOf(p2), p2.h # Extra nodes
finally:
    if 1: # Delete children
        p.deleteAllChildren()
    c.redraw()
</t>
<t tx="ekr.20090529141856.4727"></t>
<t tx="ekr.20090529141856.4728">s = '''\
namespace {
    class cTestClass1 {
        ;
    }
}
'''
try:
    c.importCommands.cSharpUnitTest(p,s=s,showTree=True)
    table = [
        'namespace',
        'class cTestClass1',
    ]
    root = c.p.firstChild()
    assert root.h.endswith('c# namespace indent'), root.h
    p2 = root.firstChild()
    for i, h in enumerate(table):
        assert p2.h == h, (p2.h, h)
        p2.moveToThreadNext()
finally:
    if 1:
        p.deleteAllChildren()
        c.redraw()
</t>
<t tx="ekr.20090529141856.4729">s = '''\
namespace {
class cTestClass1 {
    ;
}
}
'''
try:
    c.importCommands.cSharpUnitTest(p,s=s,showTree=True)
    table = [
        'namespace',
        'class cTestClass1',
    ]
    root = c.p.firstChild()
    assert root.h.endswith('c# namespace no indent'), root.h
    p2 = root.firstChild()
    for i, h in enumerate(table):
        assert p2.h == h, (p2.h, h)
        p2.moveToThreadNext()
finally:
    if 1:
        p.deleteAllChildren()
        c.redraw()
</t>
<t tx="ekr.20090529141856.4730">import sys

if sys.platform.lower().startswith('win'):

    fileName = g.os_path_abspath(g.os_path_join(
        g.app.loadDir,'..','test','big-c#-test.c#'))
    f = open(fileName)
    s = f.read()
    f.close()
    c.importCommands.cSharpUnitTest(p,s=s,fileName=fileName,showTree=False)
</t>
<t tx="ekr.20090529141856.4731"></t>
<t tx="ekr.20090529141856.4733">if 0:
    # The preamble...
    # g.cls()
    if c.isChanged(): c.save()
    # import leo
    import leo.core.leoImport as leoImport
    import leo.plugins.importers.linescanner as linescanner
    import leo.plugins.importers.elisp
    # Reload all.
    import imp
    imp.reload(leo.plugins.importers.linescanner)
    imp.reload(leo.plugins.importers.elisp)
    imp.reload(leoImport)
    g.app.loadManager.createAllImporetersData()
    ic = leoImport.LeoImportCommands(c)
else:
    ic = c.importCommands

s = '''\
;;; comment
;;; continue
;;;

(defun abc (a b)
   (+ 1 2 3))

; comm
(defun cde (a b)
   (+ 1 2 3))
'''

table = (
    'defun abc',
    'defun cde',
)
try:
    ic.elispUnitTest(p,s=s,showTree=True)
    if 1:
        root = c.p.lastChild()
        assert root.h.startswith('@@'), root.h
        p2 = root.firstChild()
        for h in table:
            assert p2.h == h, (p2.h, h)
            p2.moveToThreadNext()
        assert not root.isAncestorOf(p2), p2.h # Extra nodes
finally:
    if 1:
        p.deleteAllChildren()
        c.redraw()

</t>
<t tx="ekr.20090529141856.4734"></t>
<t tx="ekr.20090529141856.4735">if 0:
    # The preamble...
    # g.cls()
    if c.isChanged(): c.save()
    # import leo
    import leo.core.leoImport as leoImport
    import leo.plugins.importers.linescanner as linescanner
    import leo.plugins.importers.pascal
    # Reload all.
    import imp
    imp.reload(leo.plugins.importers.linescanner)
    imp.reload(leo.plugins.importers.pascal)
    imp.reload(leoImport)
    g.app.loadManager.createAllImporetersData()
    ic = leoImport.LeoImportCommands(c)
else:
    ic = c.importCommands  
s = '''
unit Unit1;

interface

uses
Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls,
Forms,
Dialogs;

type
TForm1 = class(TForm)
procedure FormCreate(Sender: TObject);
private
{ Private declarations }
public
{ Public declarations }
end;

var
Form1: TForm1;

implementation

{$R *.dfm}

procedure TForm1.FormCreate(Sender: TObject);
var
x,y: double;
begin
x:= 4;
Y := x/2;
end;

end. // interface
'''
table = (
    'interface',
    'procedure FormCreate',
    'procedure TForm1.FormCreate',
)
try:
    ic.pascalUnitTest(p,s=s,showTree=True)
    if 1:
        root = c.p.lastChild()
        assert root.h.startswith('@@'), root.h
        p2 = root.firstChild()
        for i, h in enumerate(table):
            assert p2.h == h, (p2.h, h)
            p2.moveToThreadNext()
        assert not root.isAncestorOf(p2), p2.h # Extra nodes
finally:
    if 1:
        p.deleteAllChildren()
        c.redraw()
</t>
<t tx="ekr.20090529141856.4736">
</t>
<t tx="ekr.20090529141856.4766"></t>
<t tx="ekr.20090529141856.4767">if 0: # Preamble...
    # g.cls()
    if c.isChanged(): c.save()
    # import leo
    import leo.core.leoImport as leoImport
    import leo.plugins.importers.linescanner as linescanner
    import leo.plugins.importers.java
    # Reload all.
    import imp
    imp.reload(leo.plugins.importers.linescanner)
    imp.reload(leo.plugins.importers.java)
    imp.reload(leoImport)
    g.app.loadManager.createAllImporetersData()
    ic = leoImport.LeoImportCommands(c)
else:
    ic = c.importCommands  

s = '''\
interface Bicycle {
    void changeCadence(int newValue);
    void changeGear(int newValue);
}
'''
table = (
    'interface Bicycle',
)
try:
    ic.javaUnitTest(p,s=s,showTree=True)
    if 1:
        root = c.p.lastChild()
        assert root.h.startswith('@@'), root.h
        p2 = root.firstChild()
        for i, h in enumerate(table):
            assert p2.h == h, (p2.h, h)
            p2.moveToThreadNext()
        assert not root.isAncestorOf(p2), p2.h # Extra nodes
finally:
    if 1:
        p.deleteAllChildren()
    c.redraw()
</t>
<t tx="ekr.20090529141856.4768">if 0: # Preamble...
    # g.cls()
    if c.isChanged(): c.save()
    # import leo
    import leo.core.leoImport as leoImport
    import leo.plugins.importers.linescanner as linescanner
    import leo.plugins.importers.java
    # Reload all.
    import imp
    imp.reload(leo.plugins.importers.linescanner)
    imp.reload(leo.plugins.importers.java)
    imp.reload(leoImport)
    g.app.loadManager.createAllImporetersData()
    ic = leoImport.LeoImportCommands(c)
else:
    ic = c.importCommands  

s = '''\
interface Bicycle {
void changeCadence(int newValue);
void changeGear(int newValue);
}
'''
table = (
    'interface Bicycle',
)
try:
    ic.javaUnitTest(p,s=s,showTree=True)
    if 1:
        root = c.p.lastChild()
        assert root.h.startswith('@@'), root.h
        p2 = root.firstChild()
        for i, h in enumerate(table):
            assert p2.h == h, (p2.h, h)
            p2.moveToThreadNext()
        assert not root.isAncestorOf(p2), p2.h # Extra nodes
finally:
    if 1:
        p.deleteAllChildren()
    c.redraw()
</t>
<t tx="ekr.20090529141856.4769">import sys

if sys.platform.lower().startswith('win'):

    fileName = g.os_path_abspath(g.os_path_join(g.app.loadDir,'..','test','constants.java'))

    f = open(fileName)
    s = f.read()
    f.close()

    c.importCommands.javaUnitTest(p,s=None,fileName=fileName,showTree=False)
</t>
<t tx="ekr.20090529141856.4770">if 0: # Preamble...
    # g.cls()
    if c.isChanged(): c.save()
    # import leo
    import leo.core.leoImport as leoImport
    import leo.plugins.importers.linescanner as linescanner
    import leo.plugins.importers.java
    # Reload all.
    import imp
    imp.reload(leo.plugins.importers.linescanner)
    imp.reload(leo.plugins.importers.java)
    imp.reload(leoImport)
    g.app.loadManager.createAllImporetersData()
    ic = leoImport.LeoImportCommands(c)
else:
    ic = c.importCommands  

s = '''\
/**
 * Indicates the caller's authority to perform lifecycle operations on
 */

public final class AdminPermission extends BasicPermission
{
    /**
     * Creates a new &lt;tt&gt;AdminPermission&lt;/tt&gt; object.
     */
    public AdminPermission()
    {
        super("AdminPermission");
    }
}
'''
table = (
    'public final class AdminPermission extends BasicPermission',
    'public AdminPermission',
)
try:
    ic.javaUnitTest(p,s=s,showTree=True)
    if 1: # Check structure
        root = c.p.lastChild()
        assert root.h.startswith('@@'), root.h
        p2 = root.firstChild()
        for i, h in enumerate(table):
            assert p2.h == h, (p2.h, h)
            p2.moveToThreadNext()
        assert not root.isAncestorOf(p2), p2.h # Extra nodes
finally:
    if 1: # Delete children
        p.deleteAllChildren()
    c.redraw()
</t>
<t tx="ekr.20090529141856.4771">import sys

if sys.platform.lower().startswith('win'):


    fileName = g.os_path_abspath(g.os_path_join(g.app.loadDir,'..','test','AdminPermission.java'))

    f = open(fileName)
    s = f.read()
    f.close()

    c.importCommands.javaUnitTest(p,s=s,fileName=fileName,showTree=False)
</t>
<t tx="ekr.20090529141856.4773">@language python
@tabwidth 8
    # Must be in this node when run externally.
    
if 0: # Preamble...
    # g.cls()
    if c.isChanged(): c.save()
    # import leo
    import leo.core.leoImport as leoImport
    import leo.plugins.importers.linescanner as linescanner
    import leo.plugins.importers.java
    # Reload all.
    import imp
    imp.reload(leo.plugins.importers.linescanner)
    imp.reload(leo.plugins.importers.java)
    imp.reload(leoImport)
    g.app.loadManager.createAllImporetersData()
    ic = leoImport.LeoImportCommands(c)
else:
    ic = c.importCommands  

s = '''\
/*
 * $Header: /cvs/leo/test/unitTest.leo,v 1.247 2008/02/14 14:59:04 edream Exp $
 * 
 * Copyright (c) OSGi Alliance (2000, 2005). All Rights Reserved.
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this 
 * distribution, and is available at http://www.eclipse.org/legal/epl-v10.html.
 */

package org.osgi.framework;

/**
 * A Framework exception used to indicate that a bundle lifecycle problem
 * occurred.
 * 
 * &lt;p&gt;
 * &lt;code&gt;BundleException&lt;/code&gt; object is created by the Framework to denote
 * an exception condition in the lifecycle of a bundle.
 * &lt;code&gt;BundleException&lt;/code&gt;s should not be created by bundle developers.
 * 
 * &lt;p&gt;
 * This exception is updated to conform to the general purpose exception
 * chaining mechanism.
 * 
 * @version $Revision: 1.247 $
 */

public class BundleException extends Exception {
	static final long	serialVersionUID	= 3571095144220455665L;
	/**
	 * Nested exception.
	 */
	private Throwable	cause;

	/**
	 * Creates a &lt;code&gt;BundleException&lt;/code&gt; that wraps another exception.
	 * 
	 * @param msg The associated message.
	 * @param cause The cause of this exception.
	 */
	public BundleException(String msg, Throwable cause) {
		super(msg);
		this.cause = cause;
	}
}

'''
table = (
    'public class BundleException extends Exception',
    'public BundleException',
)
try:
    ic.javaUnitTest(p,s=s,showTree=True)
    if 1: # Check structure
        root = c.p.lastChild()
        assert root.h.startswith('@@'), root.h
        p2 = root.firstChild()
        for i, h in enumerate(table):
            assert p2.h == h, (p2.h, h)
            p2.moveToThreadNext()
        assert not root.isAncestorOf(p2), p2.h # Extra nodes
finally:
    if 1: # Delete children
        p.deleteAllChildren()
    c.redraw()
</t>
<t tx="ekr.20090529141856.4774">@language python
</t>
<t tx="ekr.20090529141856.4775">@language javascript

// regexps that look like section references.

{
	name: "macro",
	match: "&lt;&lt;",
	lookaheadRegExp: /&lt;&lt;([^&gt;\s]+)(?:\s*)((?:[^&gt;]|(?:&gt;(?!&gt;)))*)&gt;&gt;/mg,
	handler: function(w)
	{
		this.lookaheadRegExp.lastIndex = w.matchStart;
		var lookaheadMatch = this.lookaheadRegExp.exec(w.source);
		if(lookaheadMatch &amp;&amp; lookaheadMatch.index == w.matchStart &amp;&amp; lookaheadMatch[1]) {
			w.nextMatch = this.lookaheadRegExp.lastIndex;
			invokeMacro(w.output,lookaheadMatch[1],lookaheadMatch[2],w,w.tiddler);
		}
	}
},

// Comments that look like section references.

// &lt;&lt;gradient [[tiddler name]] vert|horiz rgb rgb rgb rgb... &gt;&gt;

config.macros.gradient.handler = function(place,macroName,params,wikifier)
{
	var panel = wikifier ? createTiddlyElement(place,"div",null,"gradient") : place;
	panel.style.position = "relative";
	panel.style.overflow = "hidden";
	panel.style.zIndex = "0";
	if(wikifier) {
		var styles = config.formatterHelpers.inlineCssHelper(wikifier);
		config.formatterHelpers.applyCssHelper(panel,styles);
	}
	var colours = [];
	for(var t=1; t&lt;params.length; t++) {
		var c = new RGB(params[t]);
		if(c)
			colours.push(c);
	}
	drawGradient(panel,params[0] != "vert",colours);
	if(wikifier)
		wikifier.subWikify(panel,"&gt;&gt;");
	if(document.all) {
		panel.style.height = "100%";
		panel.style.width = "100%";
	}
};

// @Deprecated: Use &lt;br&gt; or &lt;br /&gt; instead of &lt;&lt;br&gt;&gt;
config.macros.br = {};
config.macros.br.handler = function(place)
{
	createTiddlyElement(place,"br");
};
</t>
<t tx="ekr.20090529141856.4776">s = '''\

String.prototype.toJSONString = function()
{
    if(/["\\\\\\x00-\\x1f]/.test(this))
		return '"' + this.replace(/([\\x00-\\x1f\\"])/g,replaceFn) + '"';

	return '"' + this + '"';
};

'''


c.importCommands.javaScriptUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4777">s = '''\

// Convert a string to it's JSON representation by encoding control characters, double quotes and backslash. See json.org
String.prototype.toJSONString = function()
{
	var m = {
		'\\b': '\\\\b',
		'\\f': '\\\\f',
		'\\n': '\\\\n',
		'\\r': '\\\\r',
		'\\t': '\\\\t',
		'"' : '\\\\"',
		'\\\\': '\\\\\\\\'
		};
	var replaceFn = function(a,b) {
		var c = m[b];
		if(c)
			return c;
		c = b.charCodeAt();
		return '\\u00' + Math.floor(c / 16).toString(16) + (c % 16).toString(16);
		};
    if(/["\\\\\\x00-\\x1f]/.test(this))
		return '"' + this.replace(/([\\x00-\\x1f\\"])/g,replaceFn) + '"';

	return '"' + this + '"';
};

'''


c.importCommands.javaScriptUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4778">s = '''\

// Restarting
function restart()
{
	invokeParamifier(params,"onstart");
	if(story.isEmpty()) {
		var tiddlers = store.filterTiddlers(store.getTiddlerText("DefaultTiddlers"));
		for(var t=0; t&lt;tiddlers.length; t++) {
			story.displayTiddler("bottom",tiddlers[t].title);
		}
	}
	window.scrollTo(0,0);
}

'''


c.importCommands.javaScriptUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4780"></t>
<t tx="ekr.20090529141856.4781">s = '''\
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Bodystring&lt;/title&gt;
&lt;/head&gt;
&lt;body class='bodystring'&gt;
&lt;div id='bodydisplay'&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
'''
ic = c.importCommands
table = (
    (1, "&lt;html&gt;"),
    (2, "&lt;head&gt;"),
    (2, "&lt;body class='bodystring'&gt;"),
)
try:
    test_node = p.copy()
    test_node.deleteAllChildren()
    ic.xmlUnitTest(p,s=s,showTree=True)
    after = p.nodeAfterTree()
    root = p.lastChild()
    assert root.h.startswith('@@'), root.h
    p = root.firstChild()
    if 1:
        for n, h in table:
            n2 = p.level() - root.level()
            assert h == p.h, (h, p.h)
            assert n == n2, (n, n2, p.h)
            p.moveToThreadNext()
        assert p == after, ('tree comp failed', p.h)
    if 1:
        test_node.deleteAllChildren()
finally:
    c.redraw()
</t>
<t tx="ekr.20090529141856.4783"># Not a real unit test.
c.contractAllHeadlines()
</t>
<t tx="ekr.20090529141856.4784"></t>
<t tx="ekr.20090529141856.4785">import leo.core.leoImport as leoImport
if leoImport.docutils is None:
    self.skipTest('no docutils')

if 0: # Preamble
    # g.cls()
    if c.isChanged(): c.save()
    import leo.core.leoImport as leoImport
    import leo.plugins.importers.linescanner as linescanner
    import leo.plugins.importers.leo_rst
    import imp
    imp.reload(leo.plugins.importers.linescanner)
    imp.reload(leo.plugins.importers.leo_rst)
    imp.reload(leoImport)
    g.app.loadManager.createAllImporetersData()
    ic = leoImport.LeoImportCommands(c)
else:
    ic = c.importCommands

s = '''\
.. toc

====
top
====

The top section

section 1
---------

section 1, line 1
--
section 1, line 2

section 2
---------

section 2, line 1

section 2.1
~~~~~~~~~~~

section 2.1, line 1

section 2.1.1
.............

section 2.2.1 line 1

section 3
---------

section 3, line 1

section 3.1.1
.............

section 3.1.1, line 1
'''
table = (
    '!Dummy chapter',
    'top',
    'section 1',
    'section 2',
    'section 2.1',
    'section 2.1.1',
    'section 3',
    'placeholder',
    'section 3.1.1',
)
try:
    ic.rstUnitTest(p,s=s,showTree=True)
    if 1:
        root = c.p.lastChild()
        assert root.h.startswith('@@'), root.h
        p2 = root.firstChild()
        for h in table:
            assert p2.h == h, (p2.h, h)
            p2.moveToThreadNext()
        assert not root.isAncestorOf(p2), p2.h # Extra nodes
finally:
    if 1:
        p.deleteAllChildren()
    c.redraw()
</t>
<t tx="ekr.20090529141856.4786">import leo.core.leoImport as leoImport
if leoImport.docutils is None:
    self.skipTest('no docutils')

if 0: # Preamble
    # g.cls()
    if c.isChanged(): c.save()
    import leo.core.leoImport as leoImport
    import leo.plugins.importers.linescanner as linescanner
    import leo.plugins.importers.leo_rst
    import imp
    imp.reload(leo.plugins.importers.linescanner)
    imp.reload(leo.plugins.importers.leo_rst)
    imp.reload(leoImport)
    g.app.loadManager.createAllImporetersData()
    ic = leoImport.LeoImportCommands(c)
else:
    ic = c.importCommands

s = '''\
.. toc

top
====

The top section

section 1
---------

section 1, line 1
--
section 1, line 2

section 2
---------

section 2, line 1

section 2.1
~~~~~~~~~~~

section 2.1, line 1

section 2.1.1
.............

section 2.2.1 line 1

section 3
---------

section 3, line 1

section 3.1.1
.............

section 3.1.1, line 1
'''
table = (
    '!Dummy chapter',
    'top',
    'section 1',
    'section 2',
    'section 2.1',
    'section 2.1.1',
    'section 3',
    'placeholder',
    'section 3.1.1',
)
try:
    ic.rstUnitTest(p,s=s,showTree=True)
    if 1:
        root = c.p.lastChild()
        assert root.h.startswith('@@'), root.h
        p2 = root.firstChild()
        for h in table:
            assert p2.h == h, (p2.h, h)
            p2.moveToThreadNext()
        assert not root.isAncestorOf(p2), p2.h # Extra nodes
finally:
    if 1:
        p.deleteAllChildren()
    c.redraw()
</t>
<t tx="ekr.20090529141856.4787">import leo.core.leoImport as leoImport
if leoImport.docutils is None:
    self.skipTest('no docutils')

if 0: # Preamble
    # g.cls()
    if c.isChanged(): c.save()
    import leo.core.leoImport as leoImport
    import leo.plugins.importers.linescanner as linescanner
    import leo.plugins.importers.leo_rst
    import imp
    imp.reload(leo.plugins.importers.linescanner)
    imp.reload(leo.plugins.importers.leo_rst)
    imp.reload(leoImport)
    g.app.loadManager.createAllImporetersData()
    ic = leoImport.LeoImportCommands(c)
else:
    ic = c.importCommands
s = '''\
.. toc

top
-------------

The top section
'''
table = (
    '!Dummy chapter',
    'top',
)
try:
    ic.rstUnitTest(p,s=s,showTree=True)
    if 1:
        root = c.p.lastChild()
        assert root.h.startswith('@@'), root.h
        p2 = root.firstChild()
        for h in table:
            assert p2.h == h, (p2.h, h)
            p2.moveToThreadNext()
        assert not root.isAncestorOf(p2), p2.h # Extra nodes
finally:
    if 1:
        p.deleteAllChildren()
    c.redraw()
</t>
<t tx="ekr.20090529141856.4788">import leo.core.leoImport as leoImport
if leoImport.docutils is None:
    self.skipTest('no docutils')

if 0: # Preamble
    # g.cls()
    if c.isChanged(): c.save()
    import leo.core.leoImport as leoImport
    import leo.plugins.importers.linescanner as linescanner
    import leo.plugins.importers.leo_rst
    import imp
    imp.reload(leo.plugins.importers.linescanner)
    imp.reload(leo.plugins.importers.leo_rst)
    imp.reload(leoImport)
    g.app.loadManager.createAllImporetersData()
    ic = leoImport.LeoImportCommands(c)
else:
    ic = c.importCommands

s = '''\
.. toc

======
top
======

The top section
'''
table = (
    "!Dummy chapter",
    "top",
)
try:
    ic.rstUnitTest(p,s=s,showTree=True)
    if 1:
        root = c.p.lastChild()
        assert root.h.startswith('@@'), root.h
        p2 = root.firstChild()
        for h in table:
            assert p2.h == h, (p2.h, h)
            p2.moveToThreadNext()
        assert not root.isAncestorOf(p2), p2.h # Extra nodes
finally:
    if 1:
        p.deleteAllChildren()
    c.redraw()
</t>
<t tx="ekr.20090529141856.4789">import leo.core.leoImport as leoImport
if leoImport.docutils is None:
    self.skipTest('no docutils')

s = '''\
.. toc

.. The section name contains trailing whitespace.

======
top 
======

The top section.
'''
table = (
    "!Dummy chapter",
    "top",
)
try:
    c.importCommands.rstUnitTest(p,s=s,showTree=True)
    if 1:
        root = c.p.lastChild()
        assert root.h.startswith('@@'), root.h
        p2 = root.firstChild()
        for h in table:
            assert p2.h == h, (p2.h, h)
            p2.moveToThreadNext()
        assert not root.isAncestorOf(p2), p2.h # Extra nodes
finally:
    if 1:
        p.deleteAllChildren()
    c.redraw()
</t>
<t tx="ekr.20090529141856.4793">d = g.app.extra_extension_dict

for ext in g.app.extension_dict.keys():
    language =  c.importCommands.languageForExtension(ext)
    language2 = c.importCommands.languageForExtension('.'+ext)
    assert language == language2

    # Now a many-one relationship.
    if language:
        # Do not test extensions that have 'none' as the value of d.get(ext)
        # Otherwise, test only d.get(ext).
        language2 = d.get(ext)
        if language2 in ('None','none'):  continue
        if language2: language = language2
        # Made-up languages do not have mode files.
        if not language.endswith('_language') and language not in ('autohotkey','rest','rst','typescript',):
            path = g.os_path_join(g.app.loadDir,'..','modes','%s.py' % (language))
            assert g.os_path_exists(path), 'for ext=%s does not exist: %s' % (ext,path)

    if 0:
        if language is None:
            print('no language for ext=%s' % (ext))
</t>
<t tx="ekr.20090704085350.5014">@others</t>
<t tx="ekr.20090704085350.5022">@language python
@others
</t>
<t tx="ekr.20090704085350.5023">def spam():
    pass
</t>
<t tx="ekr.20090704085350.5024">def eggs():
    pass
</t>
<t tx="ekr.20090704085350.5028">@language python
@others</t>
<t tx="ekr.20090704085350.5029">def spam():
    pass</t>
<t tx="ekr.20090704085350.5030">def eggs():
    pass</t>
<t tx="ekr.20090704085350.5034">@first
@language python
@others
</t>
<t tx="ekr.20090704085350.5035">def spam():
    pass # Unicode test: Ã after.
</t>
<t tx="ekr.20090704085350.5036">def eggs():
    pass
</t>
<t tx="ekr.20090704085350.5056">@others
@language python
@tabwidth -4
</t>
<t tx="ekr.20091206090247.5060"># Use these with caution.</t>
<t tx="ekr.20091206090247.5061">count = 0
for p in c.all_unique_positions():
    count += 1
    # Empty tnodeLists are not errors because they never get written to the .leo file.
    v = p.v
    if hasattr(v,"tnodeList") and len(v.tnodeList) &gt; 0 and not v.isAnyAtFileNode():
        g.es("deleting tnodeList for " + `v`,color="blue")
        delattr(v,"tnodeList")
        c.setChanged(True)

s = "%d nodes" % count
print(s) ; g.es(s)</t>
<t tx="ekr.20091206090247.5062"># About the only time you should run this script is when:
# - changing the format of timestamps in nodeIndices.setTimestamp or
# - when making a retroactive change to leoID.txt.

if 0: # This is usually a very bad idea.

    for p in c.all_positions():
        p.v.fileIndex = None

    g.es("all timestamps cleared")</t>
<t tx="ekr.20091206090247.5063">doDelete = False
put = g.es_print
for p in c.all_positions():
    if p.v.u:
        put("found v.u:",p.h,
            g.listToString(p.v.u.keys()))
        if doDelete:
            p.v.u = None
put('done') 
c.redraw()</t>
<t tx="ekr.20100102164959.5088">nodes = 0 ; lines = 0
for p in c.all_unique_positions():
    nodes += 1
    lines += len(g.splitLines(p.b))

pages = ((nodes * 10) + lines) / 50
s = "%d nodes,  %d lines, %d pages" % (nodes,lines,pages)
print(s); g.es(s)</t>
<t tx="ekr.20100123172713.5114"></t>
<t tx="ekr.20100123172713.5116">count = 0
for p in c.all_unique_positions():
    count += 1
    # Empty tnodeLists are not errors because they never get written to the .leo file.
    v = p.v
    if hasattr(v,"tnodeList"): # and len(v.tnodeList) &gt; 0 and not v.isAnyAtFileNode():
        g.es("deleting tnodeList for " + `v`,color="blue")
        delattr(v,"tnodeList")
        c.setChanged(True)

s = "%d nodes" % count
print s ; g.es(s)</t>
<t tx="ekr.20100131171342.5473"></t>
<t tx="ekr.20100131171342.5474">if g.app.gui.guiName() == 'tkinter':

    pc = g.app.pluginsController
    tkGui = pc.loadOnePlugin('leo.plugins.tkGui',verbose=False)
    assert(tkGui)

    import leo.core.leoFrame as leoFrame
    import inspect,sys

    baseClass = leoFrame.leoBody
    subClasses  = (tkGui.leoTkinterBody,leoFrame.nullBody)
    baseObject = c.frame.body

    methods = inspect.getmembers(baseClass,inspect.ismethod)
    methodNames = [z[0] for z in methods]

    for name in baseObject.mustBeDefinedOnlyInBaseClass:
        try:
            assert name in methodNames, 'not defined in base class %s.%s' % (baseClass.__name__,name)
        except AssertionError:
            exctype, value = sys.exc_info()[:2]
            print(value)
            raise

    for subClass in subClasses:
        subclassName = subClass.__name__
        for name in methodNames:
            base_func = getattr(baseClass,name)
            sub_func =  getattr(subClass,name)
            try:
                if name in baseObject.mustBeDefinedOnlyInBaseClass:
                    assert base_func.im_func == sub_func.im_func, 'defined in subclass %s.%s' % (subclassName,name)
                if name in baseObject.mustBeDefinedInSubclasses:
                    assert base_func.im_func != sub_func.im_func, 'not defined in subclass %s.%s' % (subclassName,name)
            except AssertionError:
                #raise
                exctype, value = sys.exc_info()[:2]
                print(value)
</t>
<t tx="ekr.20100131171342.5475">if g.app.gui.guiName() == 'tkinter':

    pc = g.app.pluginsController
    tkGui = pc.loadOnePlugin('leo.plugins.tkGui',verbose=False)

    import leo.core.leoFrame as leoFrame
    import inspect

    baseClass = leoFrame.leoFrame
    subClasses  = (tkGui.leoTkinterFrame,leoFrame.NullFrame)
    baseObject = c.frame

    methods = inspect.getmembers(baseClass,inspect.ismethod)
    methodNames = [z[0] for z in methods]

    for name in baseObject.mustBeDefinedOnlyInBaseClass:
        assert name in methodNames, 'not defined in base class %s.%s' % (baseClass.__name__,name)

    for subClass in subClasses:
        subclassName = subClass.__name__
        for name in methodNames:
            base_func = getattr(baseClass,name)
            sub_func =  getattr(subClass,name)
            if name in baseObject.mustBeDefinedOnlyInBaseClass:
                assert base_func.im_func == sub_func.im_func, 'defined in subclass %s.%s' % (subclassName,name)
            if name in baseObject.mustBeDefinedInSubclasses:
                assert base_func.im_func != sub_func.im_func, 'not defined in subclass %s.%s' % (subclassName,name)
</t>
<t tx="ekr.20100131171342.5476">if g.app.gui.guiName() == 'tkinter':

    pc = g.app.pluginsController
    tkGui = pc.loadOnePlugin('leo.plugins.tkGui',verbose=False)

    import leo.core.leoGui as leoGui
    import inspect

    baseClass = leoGui.leoGui
    subClasses  = (tkGui.tkinterGui,) # nullGui can inherit almost all leoGui dummy methods.
    baseObject = g.app.gui

    methods = inspect.getmembers(baseClass,inspect.ismethod)
    methodNames = [z[0] for z in methods]

    for name in baseObject.mustBeDefinedOnlyInBaseClass:
        assert name in methodNames, 'not defined in base class %s.%s' % (baseClass.__name__,name)

    for subClass in subClasses:
        subclassName = subClass.__name__
        for name in methodNames:
            base_func = getattr(baseClass,name)
            sub_func =  getattr(subClass,name)
            try:
                if name in baseObject.mustBeDefinedOnlyInBaseClass:
                    assert base_func.im_func == sub_func.im_func, 'defined in subclass %s.%s' % (subclassName,name)
                if name in baseObject.mustBeDefinedInSubclasses:
                    assert base_func.im_func != sub_func.im_func, 'not defined in subclass %s.%s' % (subclassName,name)
            except AssertionError:
                raise
</t>
<t tx="ekr.20100131171342.5477">if g.app.gui.guiName() == 'tkinter':

    pc = g.app.pluginsController
    tkGui = pc.loadOnePlugin('leo.plugins.tkGui',verbose=False)

    import leo.core.leoFrame as leoFrame
    import inspect

    baseClass = leoFrame.leoTree
    subClasses  = (tkGui.leoTkinterTree,leoFrame.nullTree)
    baseObject = c.frame.tree

    methods = inspect.getmembers(baseClass,inspect.ismethod)
    methodNames = [z[0] for z in methods]

    for name in baseObject.mustBeDefinedOnlyInBaseClass:
        assert name in methodNames, 'not defined in base class %s.%s' % (baseClass.__name__,name)

    for subClass in subClasses:
        subclassName = subClass.__name__
        for name in methodNames:
            base_func = getattr(baseClass,name)
            sub_func =  getattr(subClass,name)
            if name in baseObject.mustBeDefinedOnlyInBaseClass:
                assert base_func.im_func == sub_func.im_func, 'defined in subclass %s.%s' % (subclassName,name)
            if name in baseObject.mustBeDefinedInSubclasses:
                assert base_func.im_func != sub_func.im_func, 'not defined in subclass %s.%s' % (subclassName,name)
</t>
<t tx="ekr.20100131171342.5478">logCtrl = c.frame.log.logCtrl

table = (
    ('mustBeDefinedInSubclasses',logCtrl.mustBeDefinedInSubclasses),
    ('mustBeDefinedInBaseClass',logCtrl.mustBeDefinedOnlyInBaseClass),
    ('mustBeDefined',logCtrl.mustBeDefined),
)

# Check existence.
for tag,aList in table:
    for z in aList:
        assert hasattr(c.frame.log,z),'%s %s %s' % (tag,c.frame.log,z)
        assert hasattr(c.frame.body,z),'%s %s %s' % (tag,c.frame.body,z)

# Check signatures.
import inspect
for tag,aList in table:
    for z in aList:
        func = getattr(c.frame.body.bodyCtrl,z)
        func2 = getattr(c.frame.log.logCtrl,z)
        assert func,z
        assert func2,z
        d1 = inspect.getargspec(func)
        d2 = inspect.getargspec(func2)
        assert d1==d2,'\n%s\n\nd1 %s\n\nd2 %s' % (z,d1,d2)
</t>
<t tx="ekr.20100131171342.5485">import inspect

d = c.commandsDict
keys = sorted(d.keys())
table = ('bookmark', 'quickmove_', 'screen-capture', 'stickynote')
for key in keys:
    continue_flag = False
    for prefix in table:
        if key.startswith(prefix):
            continue_flag = True
            break # These plugins have their own signatures.
    if continue_flag:
        continue
    f = d.get(key)
    # print(key, f.__name__ if f else repr(f))
    # Test true __call__ methods if they exist.
    name = getattr(f,'__name__',None) or repr(f)
    if hasattr(f,'__call__') and inspect.ismethod(f.__call__):
        f = getattr(f,'__call__')
    args, varargs, varkw, defaults = data = inspect.getargspec(f)
    arg0 = len(args) &gt; 0 and args[0]
    arg1 = len(args) &gt; 1 and args[1]
    expected = ('event',)
    message = '\nno event arg for command %s, func: %s\nargs: %s' % (key,name,data)
    assert arg0 in expected or arg1 in expected, message
</t>
<t tx="ekr.20100219080213.5365"></t>
<t tx="ekr.20100219080213.5366">s = '''\
&lt;?php

$type = 'cc';
$obj = new $type; // outputs "hi!"

class cc {
    function __construct() {
        echo 'hi!';
    }
}

?&gt;

'''

c.importCommands.phpUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20100219080213.5367">s = '''\
&lt;?php

if (expr) {
    class cc {
        // version 1
    }
} else {
    class cc {
        // version 2
    }
}

?&gt;
'''

c.importCommands.phpUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20100219080213.5368">s = '''\
&lt;?php
class Enum {
    protected $self = array();
    public function __construct( /*...*/ ) {
        $args = func_get_args();
        for( $i=0, $n=count($args); $i&lt;$n; $i++ )
            $this-&gt;add($args[$i]);
    }

    public function __get( /*string*/ $name = null ) {
        return $this-&gt;self[$name];
    }

    public function add( /*string*/ $name = null, /*int*/ $enum = null ) {
        if( isset($enum) )
            $this-&gt;self[$name] = $enum;
        else
            $this-&gt;self[$name] = end($this-&gt;self) + 1;
    }
}

class DefinedEnum extends Enum {
    public function __construct( /*array*/ $itms ) {
        foreach( $itms as $name =&gt; $enum )
            $this-&gt;add($name, $enum);
    }
}

class FlagsEnum extends Enum {
    public function __construct( /*...*/ ) {
        $args = func_get_args();
        for( $i=0, $n=count($args), $f=0x1; $i&lt;$n; $i++, $f *= 0x2 )
            $this-&gt;add($args[$i], $f);
    }
}
?&gt;

'''

c.importCommands.phpUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20100731163237.5782">@language html

&lt;&lt; a section reference &gt;&gt;

after.
</t>
<t tx="ekr.20100731163237.5783">&lt;p&gt; a paragraph. &lt;/p&gt;
</t>
<t tx="ekr.20100803234640.5804"></t>
<t tx="ekr.20100803234640.5805">s = r'''; last modified 1 April 2001 by John Doe
[owner]
name=John Doe
organization=Acme Widgets Inc.

; [ not a section ]

[database]
server=192.0.2.62
    ; use IP address
port=143
file = "payroll.dat"
'''
table = ('[owner]', '[database]')
try:
    c.importCommands.iniUnitTest(p,s=s,showTree=True)
    root = c.p.firstChild()
    p2 = root.firstChild()
    for h in table:
        assert p2.h == h, (p2.h, h)
        p2.moveToThreadNext()
    assert not root.isAncestorOf(p2), p2.h # Extra nodes
finally:
    if 1:
        p.deleteAllChildren()
        c.redraw()

</t>
<t tx="ekr.20101009105124.6195">True (recommended):
    Write "E" attribute bits in &lt;v&gt; elements.
    Leo outlines will record the expansion state of all nodes.

False:
    (Good for files like unitTest.leo)
    Suppress "E" attribute bits in &lt;v&gt; elements.
    Only the ancestors of the presently selected node will
    be expanded when Leo opens an outline.
</t>
<t tx="ekr.20101220161557.6016"># Nov. 2016: 878 tests.
# Nov. 2017: 916 tests, 25 skipped.

# Some tests are disabled when g.app.isExternalUnitTest is True.
# Using self.skipTest(reason) is now preferred.</t>
<t tx="ekr.20110521073115.3494"></t>
<t tx="ekr.20110521073115.3495">builtins, including cython builtins
</t>
<t tx="ekr.20110521073115.3496">cython keywords
</t>
<t tx="ekr.20110610122533.3407">@others
@language python
@tabwidth -4
</t>
<t tx="ekr.20110615130436.3317"># This was used by @test writing a .leo file retains orphan bits.
# but this test is moot because Leo no longer writes orphan bits.</t>
<t tx="ekr.20111021115306.3697">\begin{document}
&lt;&lt; Document &gt;&gt;
% hidden comment
\end{document}
</t>
<t tx="ekr.20111021115306.3711">@ Write master document here...........
</t>
<t tx="ekr.20111026105935.3966">s = '''\
&lt;nodeA&gt;
&lt;nodeB/&gt;
&lt;/nodeA&gt;
'''
ic = c.importCommands
table = (
    (1, "&lt;nodeA&gt;"),
)
try:
    test_node = p.copy()
    test_node.deleteAllChildren()
    ic.xmlUnitTest(p,s=s,showTree=True)
    after = p.nodeAfterTree()
    root = p.lastChild()
    assert root.h.startswith('@@'), root.h
    p = root.firstChild()
    if 1:
        for n, h in table:
            n2 = p.level() - root.level()
            assert h == p.h, (h, p.h)
            assert n == n2, (n, n2, p.h)
            p.moveToThreadNext()
        assert p == after, ('tree comp failed', p.h)
    if 1:
        test_node.deleteAllChildren()
finally:
    c.redraw()
</t>
<t tx="ekr.20111026111009.3972"># lowercase xml tags, one per line.

html
body
head
div
table
nodeA
nodeB
</t>
<t tx="ekr.20111029112647.4099"></t>
<t tx="ekr.20111029112647.4101">s = '''\
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Bodystring&lt;/title&gt;
&lt;/head&gt;
&lt;body class="bodystring"&gt;
&lt;div id='bodydisplay'&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
'''
table = [
    '&lt;html&gt;',
    '&lt;head&gt;',
    '&lt;body class="bodystring"&gt;',
]
try:
    c.importCommands.htmlUnitTest(p,s=s,showTree=True)
    root = c.p.firstChild()
    assert root.h.endswith('lowercase tags'), root.h
    p2 = root.firstChild()
    for h in table:
        assert p2.h == h, (p2.h, h)
        p2.moveToThreadNext()
    p.deleteAllChildren()
finally:
    c.redraw()
</t>
<t tx="ekr.20111029120441.3982">s = '''\
&lt;HTML&gt;
&lt;HEAD&gt;
    &lt;title&gt;Bodystring&lt;/title&gt;
&lt;/HEAD&gt;
&lt;BODY class='bodystring'&gt;
&lt;DIV id='bodydisplay'&gt;&lt;/DIV&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
'''


c.importCommands.htmlUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20111102164107.3975">s = r'''
&lt;td width="550"&gt;
&lt;table cellspacing="0" cellpadding="0" width="600" border="0"&gt;
    &lt;td class="blutopgrabot" height="28"&gt;&lt;/td&gt;
    
    &lt;!-- The indentation of this element causes the problem. --&gt;
    &lt;table&gt;
    
&lt;!--
&lt;div align="center"&gt;
&lt;iframe src="http://www.amex.com/atamex/regulation/listingStatus/index.jsp"&lt;/iframe&gt;
&lt;/div&gt;
--&gt;

&lt;/table&gt;
&lt;/table&gt;

&lt;p&gt;Paragraph&lt;/p&gt;
&lt;/td&gt;

'''
table = (
    '&lt;table cellspacing="0" cellpadding="0" width="600" border="0"&gt;',
    '&lt;table&gt;',
)
try:
    c.importCommands.htmlUnitTest(p,s=s,showTree=True)
    p2 = c.p.firstChild().firstChild()
    for h in table:
        assert p2.h == h, (p2.h, h)
        p2.moveToThreadNext()
    p.deleteAllChildren()
finally:
    c.redraw()
</t>
<t tx="ekr.20111107102431.3849"># A good test, but we don't want this large a file included in the distro.

# fn = r'c:\recent\data4.html'
fn = r'c:\recent\data.html'

root = p.copy()

# Fails with more tags: a newline gets inserted between tags.

html_tags = ('body','head','html','table','xxx',)
setting = 'import_html_tags'

# Settings now work when run externally.
c.config.set(setting,'data',html_tags)
tags = c.config.getData(setting)
assert tags == html_tags,len(tags)
try:
    c.importCommands.importFilesCommand(files=[fn],treeType='@file')
finally:
    if 1:
        while root.hasChildren():
            root.firstChild().doDelete()
        c.redraw()
    assert not root.hasChildren()
fail = g.app.unitTestDict.get('fail')
assert not fail
</t>
<t tx="ekr.20111109143012.3839">@language python
# tags that cause nodes: html, head, body, div, table, nodeA, nodeB
# NOT: tr, td, tbody, etc.
@language html
s = '''
&lt;html&gt;
&lt;body&gt;
    &lt;table id="0"&gt;
        &lt;tr valign="top"&gt;
        &lt;td width="619"&gt;
        &lt;table id="2"&gt; &lt;tr valign="top"&gt; &lt;td width="377"&gt;
            &lt;table id="3"&gt;
            &lt;tr&gt;
            &lt;td width="368"&gt;
            &lt;table id="4"&gt;
                &lt;tbody id="5"&gt;
                &lt;tr valign="top"&gt;
                &lt;td width="550"&gt;
                &lt;table id="6"&gt;
                    &lt;tbody id="6"&gt;
                    &lt;tr&gt;
                    &lt;td class="blutopgrabot"&gt;&lt;a href="href1"&gt;Listing Standards&lt;/a&gt; | &lt;a href="href2"&gt;Fees&lt;/a&gt; | &lt;strong&gt;Non-compliant Issuers&lt;/strong&gt; | &lt;a href="href3"&gt;Form 25 Filings&lt;/a&gt; &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;/tbody&gt;
                &lt;/table&gt;
                &lt;/td&gt;
                &lt;/tr&gt;&lt;tr&gt;
                &lt;td width="100%" colspan="2"&gt;
                &lt;br /&gt;
                &lt;/td&gt;
                &lt;/tr&gt;
                &lt;/tbody&gt;
            &lt;/table&gt;	
            &lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
        &lt;!-- View First part --&gt; &lt;/td&gt; &lt;td width="242"&gt; &lt;!-- View Second part --&gt;
        &lt;!-- View Second part --&gt; &lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;
    &lt;DIV class="webonly"&gt;
        &lt;script src="/scripts/footer.js"&gt;&lt;/script&gt;
    &lt;/DIV&gt;
    &lt;/td&gt;
    &lt;/tr&gt;
    &lt;script language="JavaScript1.1"&gt;var SA_ID="nyse;nyse";&lt;/script&gt;
    &lt;script language="JavaScript1.1" src="/scripts/stats/track.js"&gt;&lt;/script&gt;
    &lt;noscript&gt;&lt;img src="/scripts/stats/track.js" height="1" width="1" alt="" border="0"&gt;&lt;/noscript&gt;
&lt;/body&gt;
&lt;/html&gt;
'''
@language python

# c.importCommands.htmlUnitTest(p,s=s,showTree=True)
table = (
    '&lt;html&gt;',
    '&lt;body&gt;',
    '&lt;table id="0"&gt;',
)
try:
    c.importCommands.htmlUnitTest(p,s=s,showTree=True)
    p2 = c.p.firstChild().firstChild()
    for h in table:
        assert p2.h == h, (p2.h, h)
        p2.moveToThreadNext()
    if 1:
        p.deleteAllChildren()
finally:
    c.redraw()
</t>
<t tx="ekr.20111112092813.4154">g.cls()</t>
<t tx="ekr.20111112093605.4679"># leoSettings.leo no longer sets any bindings for run-xxx-unit-test.
# These are now EKR's preferred settings everywhere:
# there should be little need to run unit tests externally.

run-selected-unit-tests-locally     = Alt-4
run-marked-unit-tests-locally       = Alt-5
run-all-unit-tests-locally          = Alt-6

# Important: Alt-9 is used by a unit test
</t>
<t tx="ekr.20111112103320.3849">s = '''\
&lt;body&gt;

&lt;!-- OOPS: the div and p elements not properly nested.--&gt;
&lt;!-- OOPS: this table got generated twice. --&gt;

&lt;p id="P1"&gt;
&lt;div id="D666"&gt;Paragraph&lt;/p&gt; &lt;!-- P1 --&gt;
&lt;p id="P2"&gt;

&lt;TABLE id="T666"&gt;&lt;/TABLE&gt;&lt;/p&gt; &lt;!-- P2 --&gt;
&lt;/div&gt;
&lt;/p&gt; &lt;!-- orphan --&gt;

&lt;/body&gt;
'''
table = (
    ('&lt;body&gt;'),
    ('&lt;div id="D666"&gt;'),
)
try:
    c.importCommands.htmlUnitTest(p,s=s,showTree=True)
    p2 = c.p.firstChild().firstChild()
    for h in table:
        assert p2.h == h, (p2.h, h)
        p2.moveToThreadNext()
    if 1:
        p.deleteAllChildren()
finally:
    c.redraw()

</t>
<t tx="ekr.20111112103320.3887">s = r'''
&lt;html&gt;

&lt;head&gt;
    &lt;!-- oops: link elements terminated two different ways --&gt;
    &lt;link id="L1"&gt;
    &lt;link id="L2"&gt;
    &lt;link id="L3" /&gt;
    &lt;link id='L4' /&gt;
    
    &lt;title&gt;TITLE&lt;/title&gt;
    
&lt;!-- oops: missing tags. --&gt;
'''
table = (
    '&lt;html&gt;',
    '&lt;head&gt;',
)
try:
    c.importCommands.htmlUnitTest(p,s=s,showTree=True)
    p2 = c.p.firstChild().firstChild()
    for i, h in enumerate(table):
        assert p2.h == h, (p2.h, h)
        p2.moveToThreadNext()
    if 1:
        p.deleteAllChildren()
finally:
    c.redraw()
</t>
<t tx="ekr.20111112103320.3893">s = '''
&lt;html&gt;
&lt;head&gt;
    &lt;!-- oops: link elements terminated two different ways --&gt;
    &lt;link id="L1"&gt;
    &lt;link id="L2"&gt;
    &lt;link id="L3" /&gt;
    &lt;link id='L4' /&gt;
    
    &lt;title&gt;TITLE&lt;/title&gt;
    
&lt;/head&gt;
&lt;/html&gt;
'''
table = ('&lt;html&gt;', '&lt;head&gt;') # , '&lt;link id="L1"&gt;'
try:
    c.importCommands.htmlUnitTest(p,s=s,showTree=True)
    p2 = c.p.firstChild().firstChild()
    for h in table:
        assert p2.h == h, (p2.h, h)
        p2.moveToThreadNext()
    if 1:
        p.deleteAllChildren()
finally:
        c.redraw()
</t>
<t tx="ekr.20111112171235.3854">w = c.frame.body.wrapper
p = g.findNodeInTree(c,p,'html')
assert p,'not found: html'
old_indent = c.config.getBool('indent_added_comments',default=True)
table = (
    (
        False,
        '@language html\n&lt;html&gt;\ntext\n&lt;/html&gt;\n',
        '@language html\n&lt;html&gt;\n&lt;!-- text --&gt;\n&lt;/html&gt;\n',
    ),
    (
        True,
        '@language html\n&lt;html&gt;\n    text\n&lt;/html&gt;\n',
        '@language html\n&lt;html&gt;\n    &lt;!-- text --&gt;\n&lt;/html&gt;\n'
    ),
)
try:
    for indent, s1, expected in table:
        # Step 1: set the setting.
        c.config.set(None, 'bool', 'indent_added_comments', indent, warn=False)
        val = c.config.getBool('indent_added_comments')
        assert indent == val, (repr(indent), repr(val))
        # Step 2: set p.b and the insert point.
        c.selectPosition(p)
        p.b = s1
        i = p.b.find('text')
        assert i &gt; -1,'fail1: %s' % (repr(p.b))
        w.setSelectionRange(i,i+4)
        # Step 3: test add-comments
        c.addComments()
        assert p.b == expected, ('indent: %5s got:\n%r\nexpected:\n%r' % (indent, p.b, expected))
finally:
    c.config.set(p, 'bool', 'indent_added_comments', old_indent)
    val = c.config.getBool('indent_added_comments')
    assert old_indent == val, (repr(indent), repr(val))
</t>
<t tx="ekr.20111112171235.3855">@language html
&lt;html&gt;
    &lt;!-- text --&gt;
&lt;/html&gt;
</t>
<t tx="ekr.20111115080347.3872"></t>
<t tx="ekr.20111121224307.3934">if g.app.isExternalUnitTest:
    self.skipTest('Can not be run externally')
if 'Find' not in c.frame.log.frameDict:
    self.skipTest('No Find tab')
elif g.app.gui.guiName().startswith('qt'):
    tabs = ('Log', 'Find')
    log = c.frame.log
    c.bodyWantsFocusNow()
    last_widget = c.frame.body
    for tab in tabs:
        # A small hack: fudge up the widget to pass to the command.
        event = g.bunch(widget=last_widget)
        c.editCommands.cycleAllFocus(event=event)
        assert log.tabName == tab,'expected %s, got %s' % (
            tab,log.tabName)
        last_widget = log.contentsDict.get(tab)
        event = g.bunch(widget=last_widget)
        # This throws exception: LeoQTextBrowser has no attribute logCtrl.
        c.k.handleDefaultChar(event, stroke='a')
else:
    self.skipTest('Requires Qt Gui')
</t>
<t tx="ekr.20111123042627.6654"># Leo loads plugins in the order they appear here.

# **Important**: to change these defaults, put
# an @enabled-plugins node in myLeoSettings.leo.

# Highly-recommended plugins:
plugins_menu.py
free_layout.py # needs to be early
viewrendered.py

# Recommended plugins:
### contextmenu.py
# leo_to_html.py
mod_scripting.py
# nav_qt.py
# quicksearch.py
# stickynotes.py
# todo.py
</t>
<t tx="ekr.20111123214629.3941">from leo.core.leoQt import QtCore,QtGui,QtWidgets
import leo.plugins.qt_events as qt_events
import sys
if g.app.isExternalUnitTest:
    self.skipTest('Can not be run externally')
elif sys.platform.startswith('linux'):
    self.skipTest('linux test')
elif g.app.gui.guiName().startswith('qt'):
    wrapper = c.frame.body.wrapper
    w = wrapper.widget
    assert g.isTextWrapper(wrapper),wrapper
    assert g.isTextWidget(w),w
    filter_obj = qt_events.LeoQtEventFilter(c,w=w)
    g.app.unitTestDict[p.h] = filter_obj
        # keep a pointer to the filter.
    for z in c.k.bindingsDict.keys():
        if z.s == 'Alt+Key-9':
            self.skipTest('Alt-Key-9 is bound')
    if 0: # Too dangerous, and not useful enough.
        # Create an Alt-9 key event.
        ev = QtCore.QEvent
        e = QtGui.QKeyEvent(ev.KeyPress,ord('9'),QtCore.Qt.AltModifier)
        filter_obj.eventFilter(w,e)
        # Assert that handleUnboundChar actually ignored it.
        assert g.app.unitTestDict.get('handleUnboundChar-ignore-alt-or-ctrl')
else:
     self.skipTest('Requires Qt Gui')
</t>
<t tx="ekr.20111124090010.3939">if g.app.isExternalUnitTest:
    self.skipTest('Can not be run externally')
d = g.app.config.unitTestDict # Always created for this unit test.
keys = ('config.doButtons-file-names','config.doCommands-file-names')
for key in keys:
    aList = d.get(key,[])
    for base in ('leoSettings', 'unitTest'):
        for ext in ('.leo', '.db'):
            if base+ext in aList:
                break
        else:
            assert False,'%s not in unitTestDict[%s]' % (base,key)
</t>
<t tx="ekr.20111124094121.3941"># These exist for a unit test.</t>
<t tx="ekr.20111124094121.3942"></t>
<t tx="ekr.20111124094121.3943"></t>
<t tx="ekr.20111125182408.3947">def setup():
    while p.hasChildren():
        p.firstChild().doDelete()

setup()

try:
    files = (r'a\b.c',r'a\b.h',)
    c.importCommands.createImportParent(p,files)
    child = p.firstChild()
    assert child
    assert child.h == 'a/b',child.h
finally:
    setup()</t>
<t tx="ekr.20111125183140.3952">child = p.firstChild()
def setup():
    while p.hasChildren():
        p.firstChild().doDelete()

setup()
try:
    c.importCommands.createOutline(
        fileName=r'a\b\c.xyzzy',
        parent=p,
        atAuto=False,atShadow=False,
        s='test body',
        ext='xyzzy'
    )
    child = p.firstChild()
    assert child
    h = g.os_path_finalize_join(g.app.loadDir,'..','test','a','b','c.xyzzy')
    h = h.replace('\\','/')
    h = '@file ' + h
    # C: vs c: is not relevant here.
    assert child.h.lower() == h.lower(),child.h
finally:
    setup()</t>
<t tx="ekr.20111211094936.3970"></t>
<t tx="ekr.20111213122041.3930">@language python
@tabwidth -4

# Begin

@others

# End
</t>
<t tx="ekr.20111214100515.3921"># Disabled: this now fails *regardless* of python.v2 switch

ic = c.importCommands

def setup(p):
    while p.hasChildren():
        p.firstChild().doDelete()

fn = g.os_path_finalize_join(g.app.loadDir,'..','test','unittest','at-auto-section-ref-test.py')
# fn = r'c:\Users\edreamleo\at-auto-test.py'
assert g.os_path_exists(fn),fn

try:
    setup(p)
    child = p.insertAsNthChild(0)
    child.h = 'child'
    assert child

    ic.errors = 0
    ic.createOutline (fn,parent=child,s=None,ext=None)
    assert ic.errors == 0
finally:
    setup(p)
    c.redraw(p)
</t>
<t tx="ekr.20111214104615.3942">@language python
@tabwidth -4
@others
# end.
</t>
<t tx="ekr.20120306173116.3933">@first # -*- coding: utf-8 -*-

s = '''\
&lt;:À.Ç&gt;
&lt;Ì&gt;
&lt;_.ÌÑ&gt;
'''
ic = c.importCommands
try:
    test_node = p.copy()
    ic.xmlUnitTest(p,s=s,showTree=True)
    if 1:
        test_node.deleteAllChildren()
finally:
    c.redraw()
</t>
<t tx="ekr.20120309155126.3949">w = c.frame.body.wrapper
p = g.findNodeInTree(c,p,'rest and python')
assert p,'not found: rest and python'
old_indent = c.config.getBool('indent_added_comments',default=True)
table = (
    (
        False,
        '@language rest\nrest text.\n@language python\ndef spam():\n    pass\n# after',
        '@language rest\nrest text.\n@language python\ndef spam():\n#     pass\n# after',
    ),
    (
        True,
        '@language rest\nrest text.\n@language python\ndef spam():\n    pass\n# after',
        '@language rest\nrest text.\n@language python\ndef spam():\n    # pass\n# after',
    ),
)
try:
    for indent, s1, expected in table:
        # Step 1: set the setting.
        c.config.set(None, 'bool', 'indent_added_comments', indent, warn=False)
        val = c.config.getBool('indent_added_comments')
        assert indent == val, (repr(indent), repr(val))
        # Step 2: set p.b and the insert point.
        c.selectPosition(p)
        p.b = s1
        i = p.b.find('pass')
        assert i &gt; -1,'fail1: %s' % (repr(p.b))
        w.setSelectionRange(i,i+4)
        # Step 3: test add-comments
        c.addComments()
        assert p.b == expected, ('indent: %5s got:\n%r\nexpected:\n%r' % (indent, p.b, expected))
finally:
    c.config.set(p, 'bool', 'indent_added_comments', old_indent)
    val = c.config.getBool('indent_added_comments')
    assert old_indent == val, (repr(indent), repr(val))
</t>
<t tx="ekr.20120309155126.3950">@language rest
rest text.
@language python
def spam():
    # pass
# after
</t>
<t tx="ekr.20121011094154.3906">@language python
</t>
<t tx="ekr.20121011094154.3911">s = '''

class Greeter {
    greeting: string;
    constructor (message: string) {
        this.greeting = message;
    }
    greet() {
        return "Hello, " + this.greeting;
    }
}

var greeter = new Greeter("world");

var button = document.createElement('button')
button.innerText = "Say Hello"
button.onclick = function() {
    alert(greeter.greet())
}

document.body.appendChild(button)

'''

c.importCommands.typeScriptUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20121011100210.4035">s = '''

module Sayings {
    export class Greeter {
        greeting: string;
        constructor (message: string) {
            this.greeting = message;
        }
        greet() {
            return "Hello, " + this.greeting;
        }
    }
}
var greeter = new Sayings.Greeter("world");

var button = document.createElement('button')
button.innerText = "Say Hello"
button.onclick = function() {
	alert(greeter.greet())
}

document.body.appendChild(button)


'''

c.importCommands.typeScriptUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20130912092638.4150">@first # -*- coding: utf-16 -*-
@encoding utf-16

Test of utf-16.
</t>
<t tx="ekr.20131111155830.4249"></t>
<t tx="ekr.20131111155830.4250"># Not yet...

    &lt;BS&gt;        delete the character in front of the cursor
N   &lt;Del&gt;       delete N characters under and after the cursor
    &lt;Del&gt;       delete the character under the cursor
    &lt;Del&gt;       while entering a count: delete last character
    &lt;Down&gt;      recall newer command-line that starts with current command
    &lt;Esc&gt;       abandon command-line (if 'wildchar' is &lt;Esc&gt;, type it twice)
    &lt;Left&gt;      (motion) cursor left
    &lt;Right&gt;     (motion) cursor right
    &lt;S-Down&gt;    recall newer command-line from history
    &lt;S-Left&gt;    (motion) cursor one word left
    &lt;S-Right&gt;   (motion) cursor one word right
    &lt;S-Up&gt;      recall older command-line from history
    &lt;Up&gt;        recall older command-line that starts with current command

N   CTRL-^                  Edit alternate file N (equivalent to ":e #N").
N   CTRL-A                  add N to the number at or after the cursor
N   CTRL-B                  window N pages Backwards (upwards)
    CTRL-B                  (motion?) cursor to beginning of command-line
    CTRL-BREAK              MS-DOS: during searches: interrupt the search
    CTRL-C                  during searches: interrupt the search
N   CTRL-D                  window N lines Downwards (default: 1/2 window)
N   CTRL-E                  window N lines downwards (default: 1)
    CTRL-E                  (motion?) cursor to end of command-line
N   CTRL-F                  (motion) window N pages Forwards (downwards)
    CTRL-G                  show current file name (with path) and cursor position
N   CTRL-I                  (motion) go to Nth newer position in jump list
    CTRL-K {char1} {char2}  enter digraph
    CTRL-L                  Clear and redraw the screen.
N   CTRL-O                  (motion) go to Nth older position in jump list
N   CTRL-R                  redo last N undone changes
    CTRL-R &lt;0-9a-z"%:-&gt;     insert contents of register &lt;0-9a-z"%:-&gt;
N   CTRL-T                  (motion) Jump back from Nth older tag in tag list
N   CTRL-U                  window N lines Upwards (default: 1/2 window)
    CTRL-U                  remove all characters
    CTRL-V                  highlight blockwise or stop highlighting
    CTRL-V                  start highlighting blockwise   }  highlighted text
    CTRL-V {char}           insert {char} literally
    CTRL-V {number}         enter decimal value of character (up to three digits)
    CTRL-W                  delete the word in front of the cursor
    CTRL-W +                Increase current window height
    CTRL-W -                Decrease current window height
    CTRL-W =                Make all windows equal height
    CTRL-W CTRL-W           Move cursor to window below (wrap)
    CTRL-W CTRL-^           Split window and edit alternate file
    CTRL-W R                Rotate windows upwards
    CTRL-W W                Move cursor to window above (wrap)
    CTRL-W ]                Split window and jump to tag under cursor
    CTRL-W _                Set current window height (default: very high)
    CTRL-W b                Move cursor to bottom window
    CTRL-W c  or :cl[ose]   Make buffer hidden and close window
    CTRL-W f                Split window and edit file name under the cursor
    CTRL-W j                Move cursor to window below
    CTRL-W k                Move cursor to window above
    CTRL-W n  or :new       Create new empty window
    CTRL-W o  or :on[ly]    Make current window only one on the screen
    CTRL-W p                Move cursor to previous active window
    CTRL-W q  or :q[uit]    Quit editing and close window
    CTRL-W r                Rotate windows downwards
    CTRL-W s                Split window into two parts
    CTRL-W t                Move cursor to top window
    CTRL-W x                Exchange current window with next one
N   CTRL-X                  subtract N from the number at or after the cursor
N   CTRL-Y                  window N lines upwards (default: 1)
    CTRL-Z                  Same as ":stop!"
    CTRL-]                  Jump to the tag under cursor, unless changes have been made</t>
<t tx="ekr.20131111155830.4251">char F
char T
char f
char r
char t
letter m
letter q
motion &lt;
motion &gt;
motion c
motion d
motion gU
motion gq
motion gu
motion g~
motion y
pattern /
pattern ?
register @
</t>
<t tx="ekr.20131111155830.4252"># http://tnerual.eriogerg.free.fr/vimqrc.html
vim_0 0
vim_tilda ~
vim_plus +
vim_underscore _
vim_minus -
vim_comma ,
vim_dot .
vim_semicolon ;
vim_lparen (
vim_rparen )
vim_lcurly {
vim_rcurly }
vim_vertical |
vim_backtick `
vim_dollar $
vim_caret ^
vim_percent %
vim_langle &lt;
vim_langle &lt;&lt;
vim_rangle &gt;
vim_rangle &gt;&gt;
vim_pound #
vim_star *
vim_slash /\\n
vim_slash /
vim_question ?\\n
vim_question ?
vim_at @
vim_at @@
vim_dquote "
vim_lsquare [#
vim_lsquare [(
vim_lsquare [*
vim_lsquare [[
vim_lsquare []
vim_lsquare [p
vim_lsquare [{
vim_rsquare ]#
vim_rsquare ])
vim_rsquare ]*
vim_rsquare ][
vim_rsquare ]]
vim_rsquare ]p
vim_rsquare ]}
vim_A A
vim_B B
vim_C C
vim_D D
vim_E E
vim_F F
vim_G G
vim_H H
vim_I I
vim_J J
vim_K K
vim_M M
vim_L L
vim_N N
vim_O O
vim_P P
vim_R R
vim_S S
vim_T T
vim_U U
vim_V V
vim_W W
vim_X X
vim_Y Y
vim_Z ZQ
vim_Z ZZ
vim_a a
vim_b b
vim_c c
vim_d dd
vim_d d
vim_g g~
vim_g g^
vim_g g#
vim_g g$
vim_g g*
vim_g g0
vim_g gD
vim_g gE
vim_g gI
vim_g gU
vim_g ga
vim_g gd
vim_g ge
vim_g gf
vim_g gg
vim_g gj
vim_g gk
vim_g gq
vim_g gs
vim_g gu
vim_g gv
vim_h h
vim_i i
vim_j j
vim_k k
vim_l l
vim_n n
vim_m m
vim_o o
vim_p p
vim_q q
vim_r r
vim_s s
vim_t t
vim_u u
vim_v v
vim_w w
vim_x x
vim_y y
vim_y yy
vim_z z-
vim_z z.
vim_z z&lt;CR&gt;
vim_z zb
vim_z zh
vim_z zl
vim_z zt
vim_z zz
</t>
<t tx="ekr.20131111155830.4253"># CR
# Ctrl-End
# Ctrl-Home
# Ctrl-Left
# Ctrl-M
# Ctrl-N
# Ctrl-P
# Ctrl-Right
# End
# Home
# Shift-Left
# Shift-Right

( 	
)
{
}
[[
[]
][
]]
$
^	
+
,
-
;
_
0
B
E
F
G
T
W
b
e
f
g$
g^
g0
gE
# gEnd
# gHome	
ge
gg
h
j
k
t
w
</t>
<t tx="ekr.20131111155830.4254">char F
char T
char f
char t
</t>
<t tx="ekr.20140206132559.4560">@others
</t>
<t tx="ekr.20140206132559.4564">@others
bClass = aClass
</t>
<t tx="ekr.20140206132559.4567">tm = c.testManager
before   = g.findNodeInTree(c,p,'before')
expected = g.findNodeInTree(c,p,'expected')
assert before,expected
try:
    c.selectPosition(before)
    before.h = 'expected' # To make the compare work.
    c.importCommands.parse_body(before)
    # compare tree.
    assert tm.compareOutlines(before,expected,compareHeadlines=True,tag='',report=True)
    c.undoer.undo()
finally:
    before.h = 'before'
    c.redraw()
</t>
<t tx="ekr.20140217055617.4231"># For a unit test.</t>
<t tx="ekr.20140218042220.4347">s = '''\

var c3 = (function () {
    "use strict";

    // Globals
    var c3 = { version: "0.0.1"   };

    c3.someFunction = function () {
        console.log("Just a demo...");
    };

    return c3;
}());

'''

c.importCommands.javaScriptUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20140218122321.4349">@language html
s = '''
&lt;!-- tags that start nodes: html,body,head,div,table,nodeA,nodeB --&gt;
&lt;html&gt;&lt;head&gt;headline&lt;/head&gt;&lt;body&gt;body&lt;/body&gt;&lt;/html&gt;
'''
@language python
table = (
    # The new xml scanner doesn't generate any new nodes,
    # because the scan state hasn't changed at the end of the line!
)
try:
    c.importCommands.htmlUnitTest(p,s=s,showTree=True)
    p2 = c.p.firstChild().firstChild()
    for h in table:
        assert p2 and p2.h == h, (p2 and p2.h, h)
        p2.moveToThreadNext()
    if 1:
        p.deleteAllChildren()
finally:
    c.redraw()

</t>
<t tx="ekr.20140218151418.4353">s = '''\
var express = require('express');

var app = express.createServer(express.logger());

app.get('/', function(request, response) {
response.send('Hello World!');
});

var port = process.env.PORT || 5000;
app.listen(port, function() {
console.log("Listening on " + port);
});
'''

c.importCommands.javaScriptUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20140716121225.4354">print(p.v.gnx)</t>
<t tx="ekr.20140723134017.4464"># This causes problems!
import glob
import importlib
path = g.os_path_finalize_join(g.app.loadDir,'..','plugins','importers')
assert g.os_path_exists(path), repr(path)
pattern = g.os_path_finalize_join(path,'*.py')
for fn in glob.glob(pattern):
    sfn = g.shortFileName(fn)
    m = importlib.import_module('leo.plugins.importers.%s' % sfn[:-3])
    assert m
</t>
<t tx="ekr.20140724164600.4590"># Print does not work: it is redirected.
g.pr('\nEnd of leoImport tests.')
</t>
<t tx="ekr.20140724220921.5199"></t>
<t tx="ekr.20140725132959.4593">import leo.core.leoImport as leoImport
if leoImport.docutils is None:
    self.skipTest('no docutils')

s = '''\
.. toc

.. The section name contains trailing whitespace.

=======
Chapter 
=======

The top chapter.
'''
table = (
    "!Dummy chapter",
    "Chapter",
)
try:
    c.importCommands.rstUnitTest(p,s=s,showTree=True)
    if 1:
        root = c.p.lastChild()
        assert root.h.startswith('@@'), root.h
        p2 = root.firstChild()
        for h in table:
            assert p2.h == h, (p2.h, h)
            p2.moveToThreadNext()
        assert not root.isAncestorOf(p2), p2.h # Extra nodes
finally:
    if 1:
        p.deleteAllChildren()
    c.redraw()
</t>
<t tx="ekr.20140822063016.4474">g.app.forceShutdown()
    # Now works with curses gui.
</t>
<t tx="ekr.20140902101931.4478"></t>
<t tx="ekr.20150208213643.12">def spam():
    pass</t>
<t tx="ekr.20150208213643.13">def eggs():
    pass</t>
<t tx="ekr.20150208213643.15">def spam():
    pass</t>
<t tx="ekr.20150208213643.16">def eggs():
    pass</t>
<t tx="ekr.20150208213643.18"># node 1 text A.
</t>
<t tx="ekr.20150208213643.19"># node 2 text B.
</t>
<t tx="ekr.20150216110251.11"># Do not delete this node.
# It is used by unit tests.</t>
<t tx="ekr.20150321155210.11"></t>
<t tx="ekr.20150602215639.1">True: Automatically beautify all @&lt;file&gt; nodes when saving an outline.

# This *must* be False in unitTest.leo!</t>
<t tx="ekr.20150626093653.1"># Not valid for external tests: uses @&lt;file&gt; node.
if g.app.isExternalUnitTest:
    self.skipTest('Can not be run externally')
else:
    trace = True
    h = '@auto-rst unittest/at-auto-rst-line-number-test.rst'
    root = g.findNodeAnywhere(c, h)
    assert root
    assert root.isAtAutoRstNode(), root
    s = c.gotoCommands.get_external_file_with_sentinels(root)
    if trace:
        # g.cls()
        print('get_external_file_with_sentinels returns...')
        # print(''.join(['%3s %r' % (i, s) for i, s in enumerate(g.splitLines(s))]))
        g.printList(g.splitLines(s))
    for n in range(20):
        p, offset, found = c.gotoCommands.find_file_line(n, p=root)
        if found:
            if trace: print('found: %2s %2s %s' % (n, offset, p and p.h))
        else:
            if trace: print('not found: %s' % n)
            assert n == 9, n
            break
</t>
<t tx="ekr.20150626093745.1">@language rest
@tabwidth -4
</t>
<t tx="ekr.20150626100719.1">@language plain
@tabwidth -4
</t>
<t tx="ekr.20150626101627.1">Introduction line 1.
Introduction line 2.
@language plain
@tabwidth -4
</t>
<t tx="ekr.20150626101842.1">@language md
@tabwidth -4
</t>
<t tx="ekr.20150626101920.1">import sys
# Not valid for external tests: uses @&lt;file&gt; node.
if g.app.isExternalUnitTest:
    self.skipTest('Can not be run externally')
elif sys.platform.startswith('win'):
    trace = False
    h = '@auto unittest/at-auto-md-line-number-test.md'
    root = g.findNodeAnywhere(c, h)
    assert root
    s = c.gotoCommands.get_external_file_with_sentinels(root)
    if trace:
        # g.cls()
        print(''.join(['%3s %s' % (i, s) for i, s in enumerate(g.splitLines(s))]))
    for n in range(20):
        p, offset, found = c.gotoCommands.find_file_line(n, p=root)
        if found:
            if trace: print('found: %2s %2s %s' % (n, offset, p and p.h))
        else:
            if trace: print('not found: %s' % n)
            assert n == 7, n
            break
else:
    self.skipTest('Skip on Linux')
</t>
<t tx="ekr.20150919073819.1">class aClass:
    def __init__(self):
        pass
    def spam(self):
        pass
bClass = aClass
</t>
<t tx="ekr.20150919074122.1">tm = c.testManager
before   = g.findNodeInTree(c,p,'before')
expected = g.findNodeInTree(c,p,'expected')
assert before,expected
try:
    c.selectPosition(before)
    before.h = 'expected' # To make the compare work.
    c.importCommands.parse_body(before)
    # compare tree.
    assert tm.compareOutlines(before,expected,compareHeadlines=True,tag='',report=True)
    c.undoer.undo()
finally:
    before.h = 'before'
    c.redraw()
</t>
<t tx="ekr.20150919074132.1">@others
</t>
<t tx="ekr.20150919074154.1">@others
</t>
<t tx="ekr.20150919074211.1">class TypeJoinVisitor(TypeVisitor[Type]):
    """Implementation of the least upper bound algorithm.

    Attributes:
      s: The other (left) type operand.
    """
    @others
</t>
<t tx="ekr.20150919074211.10">def visit_erased_type(self, t: ErasedType) -&gt; Type:
    return self.s

</t>
<t tx="ekr.20150919074211.11">def visit_type_var(self, t: TypeVarType) -&gt; Type:
    if isinstance(self.s, TypeVarType) and (cast(TypeVarType, self.s)).id == t.id:
        return self.s
    else:
        return self.default(self.s)

</t>
<t tx="ekr.20150919074211.12">def visit_instance(self, t: Instance) -&gt; Type:
    if isinstance(self.s, Instance):
        return join_instances(t, cast(Instance, self.s))
    elif isinstance(self.s, FunctionLike):
        return join_types(t, self.s.fallback)
    else:
        return self.default(self.s)

</t>
<t tx="ekr.20150919074211.13">def visit_callable_type(self, t: CallableType) -&gt; Type:
    # TODO: Consider subtyping instead of just similarity.
    if isinstance(self.s, CallableType) and is_similar_callables(
            t, cast(CallableType, self.s)):
        return combine_similar_callables(t, cast(CallableType, self.s))
    elif isinstance(self.s, Overloaded):
        # Switch the order of arguments to that we'll get to visit_overloaded.
        return join_types(t, self.s)
    else:
        return join_types(t.fallback, self.s)

</t>
<t tx="ekr.20150919074211.14">def visit_overloaded(self, t: Overloaded) -&gt; Type:
    # This is more complex than most other cases. Here are some
    # examples that illustrate how this works.
    #
    # First let's define a concise notation:
    #  - Cn are callable types (for n in 1, 2, ...)
    #  - Ov(C1, C2, ...) is an overloaded type with items C1, C2, ...
    #  - Callable[[T, ...], S] is written as [T, ...] -&gt; S.
    #
    # We want some basic properties to hold (assume Cn are all
    # unrelated via Any-similarity):
    #
    #   join(Ov(C1, C2), C1) == C1
    #   join(Ov(C1, C2), Ov(C1, C2)) == Ov(C1, C2)
    #   join(Ov(C1, C2), Ov(C1, C3)) == C1
    #   join(Ov(C2, C2), C3) == join of fallback types
    #
    # The presence of Any types makes things more interesting. The join is the
    # most general type we can get with respect to Any:
    #
    #   join(Ov([int] -&gt; int, [str] -&gt; str), [Any] -&gt; str) == Any -&gt; str
    #
    # We could use a simplification step that removes redundancies, but that's not
    # implemented right now. Consider this example, where we get a redundancy:
    #
    #   join(Ov([int, Any] -&gt; Any, [str, Any] -&gt; Any), [Any, int] -&gt; Any) ==
    #       Ov([Any, int] -&gt; Any, [Any, int] -&gt; Any)
    #
    # TODO: Use callable subtyping instead of just similarity.
    result = []  # type: List[CallableType]
    s = self.s
    if isinstance(s, FunctionLike):
        # The interesting case where both types are function types.
        for t_item in t.items():
            for s_item in s.items():
                if is_similar_callables(t_item, s_item):
                    result.append(combine_similar_callables(t_item, s_item))
        if result:
            # TODO: Simplify redundancies from the result.
            if len(result) == 1:
                return result[0]
            else:
                return Overloaded(result)
        return join_types(t.fallback, s.fallback)
    return join_types(t.fallback, s)

</t>
<t tx="ekr.20150919074211.15">def visit_tuple_type(self, t: TupleType) -&gt; Type:
    if (isinstance(self.s, TupleType) and
            cast(TupleType, self.s).length() == t.length()):
        items = []  # type: List[Type]
        for i in range(t.length()):
            items.append(self.join(t.items[i],
                                   (cast(TupleType, self.s)).items[i]))
        # TODO: What if the fallback types are different?
        return TupleType(items, t.fallback)
    else:
        return self.default(self.s)

</t>
<t tx="ekr.20150919074211.16">def join(self, s: Type, t: Type) -&gt; Type:
    return join_types(s, t)

</t>
<t tx="ekr.20150919074211.17">def default(self, typ: Type) -&gt; Type:
    if isinstance(typ, Instance):
        return object_from_instance(typ)
    elif isinstance(typ, UnboundType):
        return AnyType()
    elif isinstance(typ, Void) or isinstance(typ, ErrorType):
        return ErrorType()
    elif isinstance(typ, TupleType):
        return self.default(typ.fallback)
    elif isinstance(typ, FunctionLike):
        return self.default(typ.fallback)
    elif isinstance(typ, TypeVarType):
        return self.default(typ.upper_bound)
    else:
        return AnyType()
</t>
<t tx="ekr.20150919074211.2">
def __init__(self, s: Type) -&gt; None:
    self.s = s

</t>
<t tx="ekr.20150919074211.3">def visit_unbound_type(self, t: UnboundType) -&gt; Type:
    if isinstance(self.s, Void) or isinstance(self.s, ErrorType):
        return ErrorType()
    else:
        return AnyType()

</t>
<t tx="ekr.20150919074211.4">def visit_union_type(self, t: UnionType) -&gt; Type:
    if is_subtype(self.s, t):
        return t
    else:
        return UnionType(t.items + [self.s])

</t>
<t tx="ekr.20150919074211.5">def visit_error_type(self, t: ErrorType) -&gt; Type:
    return t

</t>
<t tx="ekr.20150919074211.6">def visit_type_list(self, t: TypeList) -&gt; Type:
    assert False, 'Not supported'

</t>
<t tx="ekr.20150919074211.7">def visit_any(self, t: AnyType) -&gt; Type:
    return t

</t>
<t tx="ekr.20150919074211.8">def visit_void(self, t: Void) -&gt; Type:
    if isinstance(self.s, Void):
        return t
    else:
        return ErrorType()

</t>
<t tx="ekr.20150919074211.9">def visit_none_type(self, t: NoneTyp) -&gt; Type:
    if not isinstance(self.s, Void):
        return self.s
    else:
        return self.default(self.s)

</t>
<t tx="ekr.20150919074220.1">class TypeJoinVisitor(TypeVisitor[Type]):
    """Implementation of the least upper bound algorithm.

    Attributes:
      s: The other (left) type operand.
    """

    def __init__(self, s: Type) -&gt; None:
        self.s = s

    def visit_unbound_type(self, t: UnboundType) -&gt; Type:
        if isinstance(self.s, Void) or isinstance(self.s, ErrorType):
            return ErrorType()
        else:
            return AnyType()

    def visit_union_type(self, t: UnionType) -&gt; Type:
        if is_subtype(self.s, t):
            return t
        else:
            return UnionType(t.items + [self.s])

    def visit_error_type(self, t: ErrorType) -&gt; Type:
        return t

    def visit_type_list(self, t: TypeList) -&gt; Type:
        assert False, 'Not supported'

    def visit_any(self, t: AnyType) -&gt; Type:
        return t

    def visit_void(self, t: Void) -&gt; Type:
        if isinstance(self.s, Void):
            return t
        else:
            return ErrorType()

    def visit_none_type(self, t: NoneTyp) -&gt; Type:
        if not isinstance(self.s, Void):
            return self.s
        else:
            return self.default(self.s)

    def visit_erased_type(self, t: ErasedType) -&gt; Type:
        return self.s

    def visit_type_var(self, t: TypeVarType) -&gt; Type:
        if isinstance(self.s, TypeVarType) and (cast(TypeVarType, self.s)).id == t.id:
            return self.s
        else:
            return self.default(self.s)

    def visit_instance(self, t: Instance) -&gt; Type:
        if isinstance(self.s, Instance):
            return join_instances(t, cast(Instance, self.s))
        elif isinstance(self.s, FunctionLike):
            return join_types(t, self.s.fallback)
        else:
            return self.default(self.s)

    def visit_callable_type(self, t: CallableType) -&gt; Type:
        # TODO: Consider subtyping instead of just similarity.
        if isinstance(self.s, CallableType) and is_similar_callables(
                t, cast(CallableType, self.s)):
            return combine_similar_callables(t, cast(CallableType, self.s))
        elif isinstance(self.s, Overloaded):
            # Switch the order of arguments to that we'll get to visit_overloaded.
            return join_types(t, self.s)
        else:
            return join_types(t.fallback, self.s)

    def visit_overloaded(self, t: Overloaded) -&gt; Type:
        # This is more complex than most other cases. Here are some
        # examples that illustrate how this works.
        #
        # First let's define a concise notation:
        #  - Cn are callable types (for n in 1, 2, ...)
        #  - Ov(C1, C2, ...) is an overloaded type with items C1, C2, ...
        #  - Callable[[T, ...], S] is written as [T, ...] -&gt; S.
        #
        # We want some basic properties to hold (assume Cn are all
        # unrelated via Any-similarity):
        #
        #   join(Ov(C1, C2), C1) == C1
        #   join(Ov(C1, C2), Ov(C1, C2)) == Ov(C1, C2)
        #   join(Ov(C1, C2), Ov(C1, C3)) == C1
        #   join(Ov(C2, C2), C3) == join of fallback types
        #
        # The presence of Any types makes things more interesting. The join is the
        # most general type we can get with respect to Any:
        #
        #   join(Ov([int] -&gt; int, [str] -&gt; str), [Any] -&gt; str) == Any -&gt; str
        #
        # We could use a simplification step that removes redundancies, but that's not
        # implemented right now. Consider this example, where we get a redundancy:
        #
        #   join(Ov([int, Any] -&gt; Any, [str, Any] -&gt; Any), [Any, int] -&gt; Any) ==
        #       Ov([Any, int] -&gt; Any, [Any, int] -&gt; Any)
        #
        # TODO: Use callable subtyping instead of just similarity.
        result = []  # type: List[CallableType]
        s = self.s
        if isinstance(s, FunctionLike):
            # The interesting case where both types are function types.
            for t_item in t.items():
                for s_item in s.items():
                    if is_similar_callables(t_item, s_item):
                        result.append(combine_similar_callables(t_item, s_item))
            if result:
                # TODO: Simplify redundancies from the result.
                if len(result) == 1:
                    return result[0]
                else:
                    return Overloaded(result)
            return join_types(t.fallback, s.fallback)
        return join_types(t.fallback, s)

    def visit_tuple_type(self, t: TupleType) -&gt; Type:
        if (isinstance(self.s, TupleType) and
                cast(TupleType, self.s).length() == t.length()):
            items = []  # type: List[Type]
            for i in range(t.length()):
                items.append(self.join(t.items[i],
                                       (cast(TupleType, self.s)).items[i]))
            # TODO: What if the fallback types are different?
            return TupleType(items, t.fallback)
        else:
            return self.default(self.s)

    def join(self, s: Type, t: Type) -&gt; Type:
        return join_types(s, t)

    def default(self, typ: Type) -&gt; Type:
        if isinstance(typ, Instance):
            return object_from_instance(typ)
        elif isinstance(typ, UnboundType):
            return AnyType()
        elif isinstance(typ, Void) or isinstance(typ, ErrorType):
            return ErrorType()
        elif isinstance(typ, TupleType):
            return self.default(typ.fallback)
        elif isinstance(typ, FunctionLike):
            return self.default(typ.fallback)
        elif isinstance(typ, TypeVarType):
            return self.default(typ.upper_bound)
        else:
            return AnyType()
</t>
<t tx="ekr.20150919074321.1">class aClass:
    @others
</t>
<t tx="ekr.20150919074321.2">def __init__(self):
    pass
</t>
<t tx="ekr.20150919074321.3">def spam(self):
    pass
</t>
<t tx="ekr.20160403123754.1">@language c
@tabwidth -4
@others
</t>
<t tx="ekr.20160403123754.2">def child():
    pass
</t>
<t tx="ekr.20160403143048.1">@language c
@tabwidth -4
// before @others // line 1
@others
// last line: line 6
</t>
<t tx="ekr.20160403143048.2">def spam(): // line 2
    pass
</t>
<t tx="ekr.20160403143130.1">@language python
@tabwidth -4
# Before @others: line 1
@others
# Last line: line 6
</t>
<t tx="ekr.20160403143643.1"># Not valid for external tests: uses @&lt;file&gt; node.
if g.app.isExternalUnitTest:
    self.skipTest('Can not be run externally')
else:
    trace = False
    root = p.parent().parent()
    h = '@clean unittest/at-clean-line-number-test.c'
    target = g.findNodeAnywhere(c, h)
    assert target, 'no target'
    s = c.gotoCommands.get_external_file_with_sentinels(target)
    lines = g.splitLines(s)
    g.printList(lines)
    stripped_lines = [z for z in lines if not z.startswith('//@')]
    g.printList(stripped_lines)
    if trace:
        # g.cls()
        print(''.join(['%3s %s' % (i, s) for i, s in enumerate(lines)]))
    table = (
        # n is the 1-based offset
        (3, 4,  '// before @others // line 1'),
        (2, 8,  'def spam(): // line 2'),
        (3, 9,  '    pass'),
        (1, 11, 'def eggs(): // line 4'),
        (2, 12, '    pass'),
        (5, 14, '// last line: line 6'),
    )
    for i, data in enumerate(table):
        expected_offset, target_offset, expected_line = data
        p, offset, found = c.gotoCommands.find_file_line(i+1, p=target)
        assert expected_offset == offset, (
            'i: %s expected offset %s, got %s' % (i, expected_offset, offset))
        expected_line = expected_line.rstrip()
        got_line = stripped_lines[i].rstrip()
        assert expected_line == got_line, 'i: %s expected line:\n%s\ngot line:\n%s' % (
            i, expected_line, got_line)
        got_line2 = lines[target_offset].rstrip()
        assert expected_line == got_line2, 'i: %s expected line:\n%s\ngot line2:\n%s' % (
            i, expected_line, got_line)
    i = len(table)
    p, offset, found = c.gotoCommands.find_file_line(i+1, p=target)
    assert not found
</t>
<t tx="ekr.20160403143655.1"># Not valid for external tests: uses @&lt;file&gt; node.
if g.app.isExternalUnitTest:
    self.skipTest('Can not be run externally')
else:
    trace = False
    root = p.parent().parent()
    h = '@clean unittest/at-clean-line-number-test.py'
    target = g.findNodeAnywhere(c, h)
    assert target, 'no target'
    s = c.gotoCommands.get_external_file_with_sentinels(target)
    lines = g.splitLines(s)
    stripped_lines = [z for z in lines if not z.startswith('#@')]
    if trace:
        print(''.join(['%3s %s' % (i, s) for i, s in enumerate(lines)]))
        # print('')
        # print(''.join(['%3s %s' % (i, s) for i, s in enumerate(stripped_lines)]))
    table = (
        # n is the 1-based offset
        (3, 4,  '# Before @others: line 1'),
        (2, 8,  'def spam(): # line 2'),
        (3, 9,  '    pass'),
        (1, 11, 'def eggs(): # line 4'),
        (2, 12, '    pass'),
        (5, 14, '# Last line: line 6'),
    )
    for i, data in enumerate(table):
        expected_offset, target_offset, expected_line = data
        p, offset, found = c.gotoCommands.find_file_line(i+1, p=target)
        assert expected_offset == offset, (
            'i: %s expected offset %s, got %s' % (i, expected_offset, offset))
        expected_line = expected_line.rstrip()
        got_line = stripped_lines[i].rstrip()
        assert expected_line == got_line, 'i: %s expected line:\n%s\ngot line:\n%s' % (
            i, expected_line, got_line)
        got_line2 = lines[target_offset].rstrip()
        assert expected_line == got_line2, 'i: %s expected line:\n%s\ngot line2:\n%s' % (
            i, expected_line, got_line)
    i = len(table)
    p, offset, found = c.gotoCommands.find_file_line(i+1, p=target)
    assert not found
</t>
<t tx="ekr.20160403150121.1">def eggs(): // line 4
    pass
</t>
<t tx="ekr.20160403150216.1">def spam(): # line 2
    pass
</t>
<t tx="ekr.20160403150222.1">def eggs(): # line 4
    pass
</t>
<t tx="ekr.20160403152507.1">def eggs(): # line 4
    pass</t>
<t tx="ekr.20160410152100.1"></t>
<t tx="ekr.20160410152100.2">&lt;&lt; define s &gt;&gt;
if 0:
    # The preamble...
    # g.cls()
    if c.isChanged(): c.save()
    # import leo
    import leo.core.leoImport as leoImport
    import leo.plugins.importers.linescanner as linescanner
    import leo.plugins.importers.markdown
    import leo.plugins.writers.markdown
    # Reload all.
    import imp
    imp.reload(leo.plugins.importers.linescanner)
    imp.reload(leo.plugins.importers.markdown)
    imp.reload(leo.plugins.writers.markdown)
    imp.reload(leoImport)
    markdown = leo.plugins.importers.markdown
    g.app.loadManager.createAllImporetersData()
    ic = leoImport.LeoImportCommands(c)
    # x = markdown.Markdown_Importer(ic)
else:
    ic = c.importCommands  
try:
    ic.markdownUnitTest(p,s=s,showTree=True) # Must be true.
    table = (
        (1, 'Top'),
        (2, 'Section 1'),
        (2, 'Section 2'),
        (3, 'Section 2.1'),
        (4, 'Section 2.1.1'),
        (3, 'Section 2.2'),
        (2, 'Section 3'),
    )
    after = p.nodeAfterTree()
    root = p.lastChild()
    assert root.h.startswith('@@auto-m'), root.h
    p = root.firstChild()
    for n, h in table:
        n2 = p.level() - root.level()
        assert h == p.h, (h, p.h)
        assert n == n2, (n, n2, p.h)
        p.moveToThreadNext()
    assert p == after, p.h
finally:
    if 1:
        if root:
            root.doDelete()
        c.redraw()
</t>
<t tx="ekr.20160411033840.1">&lt;&lt; define s &gt;&gt;
if 0:
    # The preamble...
    # g.cls()
    if c.isChanged(): c.save()
    # import leo
    import leo.core.leoImport as leoImport
    import leo.plugins.importers.linescanner as linescanner
    import leo.plugins.importers.markdown
    # import leo.plugins.writers.markdown
    # Reload all.
    import imp
    imp.reload(leo.plugins.importers.linescanner)
    imp.reload(leo.plugins.importers.markdown)
    # imp.reload(leo.plugins.writers.markdown)
    imp.reload(leoImport)
    markdown = leo.plugins.importers.markdown
    g.app.loadManager.createAllImporetersData()
    ic = leoImport.LeoImportCommands(c)
else:
    ic = c.importCommands  
try:
    ic.markdownUnitTest(p,s=s,showTree=True) # Must be True.
    table = (
        (1, 'Top'),
        (2, 'Section 1'),
        (2, 'Section 2'),
        (3, 'Section 2.1'),
        (4, 'Section 2.1.1'),
        (3, 'Section 2.2'),
        (2, 'Section 3'),
    )
    after = p.nodeAfterTree()
    root = p.lastChild()
    assert root.h.startswith('@@auto-m'), root.h
    p = root.firstChild()
    if 1:
        for n, h in table:
            n2 = p.level() - root.level()
            assert h == p.h, (h, p.h)
            assert n == n2, (n, n2, p.h)
            p.moveToThreadNext()
        assert p == after, p.h
finally:
    if 1:
        if root:
            root.doDelete()
        c.redraw()
</t>
<t tx="ekr.20160411034540.1">s = '''\
#Top
The top section

##Section 1
section 1, line 1
section 1, line 2

##Section 2
section 2, line 1

###Section 2.1
section 2.1, line 1

####Section 2.1.1
section 2.2.1 line 1
The next section is empty. It must not be deleted.

###Section 2.2

##Section 3
Section 3, line 1

'''
</t>
<t tx="ekr.20160523094102.1"># Great ast docs: http://greentreesnakes.readthedocs.io/en/latest/nodes.html

import leo.core.leoAst as leoAst
leoAst.unit_test(raise_on_fail=True)

import leo.external.make_stub_files as msf
msf.unit_test(raise_on_fail=True)

import leo.external.py2cs as py2cs
py2cs.unit_test(raise_on_fail=True)

</t>
<t tx="ekr.20161011052016.1">import imp
import leo.plugins.importers.javascript as js
imp.reload(js)
table = (
    # base  result          s
    (None, (0, 0, '/*'),    r'/* abc'),
    (None, (0, 0, ''),      r'a + b // /*'),
    (None, (0, 1, ''),      r'(function'),
    (None, (1, 1, ''),      r'(function(a) {'),
    (None, (0, 0, ''),      r'var x = /abc/'),
    (None, (0, 0, ''),      r'var x = /a"c/'),
    (None, (0, 0, ''),      r'var x = /a\//'),
    (None, (0, 0, ''),      r'var x = /a\//'),
    # (None, (0, 0, ''),      r"console.log(/'\d+'/)"),
    (None, (0, 1, ''),      r'var x = (0,'),
)
for base, result, s in table:
    importer = js.JS_Importer(c.importCommands)
    prev_state = js.JS_ScanState()
    new_state = importer.scan_line(s, prev_state)
    curlies, parens, context = result
    ok = (
        new_state.curlies == curlies and
        new_state.parens == parens and
        new_state.context == context)
    assert ok, '\nnew_state: %s\n        s: %s' % (new_state, s)
</t>
<t tx="ekr.20161011092326.7"># ~/at-auto-test.py

# This is valid Python, but it looks like a section reference.
a = b &lt;&lt; c &gt;&gt; d

</t>
<t tx="ekr.20161011095551.1">True: (Experimental): The @auto write code expands section references.
False: (Legacy):      The @auto write code ignores section references.
</t>
<t tx="ekr.20161103015908.1"></t>
<t tx="ekr.20161103015940.1">s = '''\
#!/usr/bin/perl

# Function definition
sub Hello{
   print "Hello, World!\n";
}

sub Test{
   print "Test!\n";
}
"\N{LATIN SMALL LIGATURE FI}" =~ /fi/i;

$bar = "foo";
if ($bar =~ /foo/){
   print "Second time is matching\n";
}else{
   print "Second time is not matching\n";
}

# Function call
Hello();
'''
try:
    c.importCommands.perlUnitTest(p,s=s,showTree=True)
finally:
    if 1:
        p.deleteAllChildren()
        c.redraw()
</t>
<t tx="ekr.20161103021420.1">s = '''\
#!/usr/bin/perl

# This would print with a line break in the middle
print "Hello

sub World {
    print "This is not a funtion!"
}

world\n";
'''
try:
    c.importCommands.perlUnitTest(p,s=s,showTree=True)
finally:
    if 1:
        p.deleteAllChildren()
        c.redraw()
</t>
<t tx="ekr.20161103021621.1">s = '''\
#!/usr/bin/perl
          
sub Test{
   print "Test!\n";
}

=begin comment
sub World {
    print "This is not a funtion!"
}
=cut

# Function definition
sub Hello{
   print "Hello, World!\n";
}
'''
try:
    c.importCommands.perlUnitTest(p,s=s,showTree=True)
finally:
    if 1:
        p.deleteAllChildren()
        c.redraw()
</t>
<t tx="ekr.20161103075725.1"># These fail with the NEW (strict) import tests and the OLD scanners.</t>
<t tx="ekr.20161108034116.1"></t>
<t tx="ekr.20161108034138.1">@killcolor

s = r'''

# The JavaScript to CoffeeScript compiler.
# Common usage:
#
#
#     var src = "var square = function(n) { return n * n };"
#
#     js2coffee = require('js2coffee');
#     js2coffee.build(src);
#     //=&gt; "square = (n) -&gt; n * n"

# ## Requires
#
# Js2coffee relies on Narcissus's parser. (Narcissus is Mozilla's JavaScript
# engine written in JavaScript).

{parser} = @Narcissus or require('./narcissus_packed')

_ = @_ or require('underscore')

{Types, Typenames, Node} = @NodeExt or require('./node_ext')

{Code, p, strEscape, unreserve, unshift, isSingleLine, trim, blockTrim,
  ltrim, rtrim, strRepeat, paren, truthy} = @Js2coffeeHelpers or require('./helpers')

# ## Main entry point
# This is `require('js2coffee').build()`. It takes a JavaScript source
# string as an argument, and it returns the CoffeeScript version.
#
# 1. Ask Narcissus to break it down into Nodes (`parser.parse`). This
#    returns a `Node` object of type `script`.
#
# 2. This node is now passed onto `Builder#build()`.

buildCoffee = (str) -&gt;
  str  = str.replace /\r/g, ''
  str += "\n"

  builder    = new Builder
  scriptNode = parser.parse str

  output = trim builder.build(scriptNode)
  (rtrim line for line in output.split('\n')).join('\n')
# ## Builder class
# This is the main class that proccesses the AST and spits out streng.
# See the `buildCoffee()` function above for info on how this is used.

class Builder
  constructor: -&gt;
    @transformer = new Transformer
  # `build()`
  # The main entry point.

  # This finds the appropriate @builder function for `node` based on it's type,
  # the passes the node onto that function.
  #
  # For instance, for a `function` node, it calls `@builders.function(node)`.
  # It defaults to `@builders.other` if it can't find a function for it.

  build: (args...) -&gt;
    node = args[0]
    @transform node

    name = 'other'
    name = node.typeName()  if node != undefined and node.typeName

    fn  = (@[name] or @other)
    out = fn.apply(this, args)

    if node.parenthesized then paren(out) else out
  # `transform()`
  # Perform a transformation on the node, if a transformation function is
  # available.

  transform: (args...) -&gt;
    @transformer.transform.apply(@transformer, args)
  # `body()`
  # Works like `@build()`, and is used for code blocks. It cleans up the returned
  # code block by removing any extraneous spaces and such.

  body: (node, opts={}) -&gt;
    str = @build(node, opts)
    str = blockTrim(str)
    str = unshift(str)

    if str.length &gt; 0 then str else ""
  # ## The builders
  #
  # Each of these method are passed a Node, and is expected to return
  # a string representation of it CoffeeScript counterpart.
  #
  # These are invoked using the main entry point, `Builder#build()`.

  # `script`
  # This is the main entry point.

  'script': (n, opts={}) -&gt;
    c = new Code

    # *Functions must always be declared first in a block.*
    _.each n.functions,    (item) =&gt; c.add @build(item)
    _.each n.nonfunctions, (item) =&gt; c.add @build(item)

    c.toString()
  # `property_identifier`
  # A key in an object literal.

  'property_identifier': (n) -&gt;
    str = n.value.toString()

    # **Caveat:**
    # *In object literals like `{ '#foo click': b }`, ensure that the key is
    # quoted if need be.*

    if str.match(/^([_\$a-z][_\$a-z0-9]*)$/i) or str.match(/^[0-9]+$/i)
      str
    else
      strEscape str
  # `identifier`
  # Any object identifier like a variable name.

  'identifier': (n) -&gt;
    if n.value is 'undefined'
      '`undefined`'
    else if n.property_accessor
      n.value.toString()
    else
      unreserve n.value.toString()
  'number': (n) -&gt;
    "#{n.src()}"
  'id': (n) -&gt;
    if n.property_accessor
      n
    else
      unreserve n
  # `id_param`
  # Function parameters. Belongs to `list`.

  'id_param': (n) -&gt;
    if n.toString() in ['undefined']
      "#{n}_"
    else
      @id n
  # `return`
  # A return statement. Has `n.value` of type `id`.

  'return': (n) -&gt;
    if not n.value?
      "return\n"

    else
      "return #{@build(n.value)}\n"
  # `;` (aka, statement)
  # A single statement.

  ';': (n) -&gt;
    # **Caveat:**
    # Some statements can be blank as some people are silly enough to use `;;`
    # sometimes. They should be ignored.

    unless n.expression?
      ""

    else if n.expression.typeName() == 'object_init'
      src = @object_init(n.expression)
      if n.parenthesized
        src
      else
        "#{unshift(blockTrim(src))}\n"

    else
      @build(n.expression) + "\n"
  # `new` + `new_with_args`
  # For `new X` and `new X(y)` respctively.

  'new': (n) -&gt; "new #{@build n.left()}"
  'new_with_args': (n) -&gt; "new #{@build n.left()}(#{@build n.right()})"
  # ### Unary operators

  'unary_plus': (n) -&gt; "+#{@build n.left()}"
  'unary_minus': (n) -&gt; "-#{@build n.left()}"
  # ### Keywords

  'this': (n) -&gt; 'this'
  'null': (n) -&gt; 'null'
  'true': (n) -&gt; 'true'
  'false': (n) -&gt; 'false'
  'void': (n) -&gt; 'undefined'
  'debugger': (n) -&gt; "debugger\n"
  'break': (n) -&gt; "break\n"
  'continue': (n) -&gt; "continue\n"
  # ### Some simple operators

  '~': (n) -&gt; "~#{@build n.left()}"
  'typeof': (n) -&gt; "typeof #{@build n.left()}"
  'index': (n) -&gt;
    right = @build n.right()
    if _.any(n.children, (child) -&gt; child.typeName() == 'object_init' and child.children.length &gt; 1)
      right = "{#{right}}"
    "#{@build n.left()}[#{right}]"
  'throw': (n) -&gt; "throw #{@build n.exception}"
  '!': (n) -&gt;
    target = n.left()
    negations = 1
    ++negations while (target.isA '!') and target = target.left()
    if (negations &amp; 1) and target.isA '==', '!=', '===', '!==', 'in', 'instanceof' # invertible binary operators
      target.negated = not target.negated
      return @build target
    "#{if negations &amp; 1 then 'not ' else '!!'}#{@build target}"
  # ### Binary operators
  # All of these are rerouted to the `binary_operator` @builder.

  # TODO: make a function that generates these functions, invoked like so:
  #   in: binop 'in', 'of'
  #   '+': binop '+'
  #   and so on...

  in: (n) -&gt;    @binary_operator n, 'of'
  '+': (n) -&gt;   @binary_operator n, '+'
  '-': (n) -&gt;   @binary_operator n, '-'
  '*': (n) -&gt;   @binary_operator n, '*'
  '/': (n) -&gt;   @binary_operator n, '/'
  '%': (n) -&gt;   @binary_operator n, '%'
  '&gt;': (n) -&gt;   @binary_operator n, '&gt;'
  '&lt;': (n) -&gt;   @binary_operator n, '&lt;'
  '&amp;': (n) -&gt;   @binary_operator n, '&amp;'
  '|': (n) -&gt;   @binary_operator n, '|'
  '^': (n) -&gt;   @binary_operator n, '^'
  '&amp;&amp;': (n) -&gt;  @binary_operator n, 'and'
  '||': (n) -&gt;  @binary_operator n, 'or'
  '&lt;&lt;': (n) -&gt;  @binary_operator n, '&lt;&lt;'
  '&lt;=': (n) -&gt;  @binary_operator n, '&lt;='
  '&gt;&gt;': (n) -&gt;  @binary_operator n, '&gt;&gt;'
  '&gt;=': (n) -&gt;  @binary_operator n, '&gt;='
  '===': (n) -&gt; @binary_operator n, 'is'
  '!==': (n) -&gt; @binary_operator n, 'isnt'
  '&gt;&gt;&gt;': (n) -&gt;  @binary_operator n, '&gt;&gt;&gt;'
  instanceof: (n) -&gt; @binary_operator n, 'instanceof'
  '==': (n) -&gt;
    # TODO: throw warning
    @binary_operator n, 'is'
  '!=': (n) -&gt;
    # TODO: throw warning
    @binary_operator n, 'isnt'
  'binary_operator': do -&gt;
    INVERSIONS =
      is: 'isnt'
      in: 'not in'
      of: 'not of'
      instanceof: 'not instanceof'
    INVERSIONS[v] = k for own k, v of INVERSIONS
    (n, sign) -&gt;
      sign = INVERSIONS[sign] if n.negated
      "#{@build n.left()} #{sign} #{@build n.right()}"
  # ### Increments and decrements
  # For `a++` and `--b`.

  '--': (n) -&gt; @increment_decrement n, '--'
  '++': (n) -&gt; @increment_decrement n, '++'
  'increment_decrement': (n, sign) -&gt;
    if n.postfix
      "#{@build n.left()}#{sign}"
    else
      "#{sign}#{@build n.left()}"
  # `=` (aka, assignment)
  # For `a = b` (but not `var a = b`: that's `var`).

  '=': (n) -&gt;
    sign = if n.assignOp?
      Types[n.assignOp] + '='
    else
      '='

    "#{@build n.left()} #{sign} #{@build n.right()}"
  # `,` (aka, comma)
  # For `a = 1, b = 2'

  ',': (n) -&gt;
    list = _.map n.children, (item) =&gt; @build(item) + "\n"
    list.join('')
  # `regexp`
  # Regular expressions.

  'regexp': (n) -&gt;
    m     = n.value.toString().match(/^\/(.*)\/([a-z]?)/)
    value = m[1]
    flag  = m[2]

    # **Caveat:**
    # *If it begins with `=` or a space, the CoffeeScript parser will choke if
    # it's written as `/=/`. Hence, they are written as `new RegExp('=')`.*

    begins_with = value[0]

    if begins_with in [' ', '=']
      if flag.length &gt; 0
        "RegExp(#{strEscape value}, \"#{flag}\")"
      else
        "RegExp(#{strEscape value})"
    else
      "/#{value}/#{flag}"
  'string': (n) -&gt;
    strEscape n.value
  # `call`
  # A Function call.
  # `n.left` is an `id`, and `n.right` is a `list`.

  'call': (n) -&gt;
    if n.right().children.length == 0
      "#{@build n.left()}()"
    else
      "#{@build n.left()}(#{@build n.right()})"
  # `call_statement`
  # A `call` that's on it's own line.

  'call_statement': (n) -&gt;
    left = @build n.left()

    # **Caveat:**
    # *When calling in this way: `function () { ... }()`,
    # ensure that there are parenthesis around the anon function
    # (eg, `(-&gt; ...)()`).*

    left = paren(left)  if n.left().isA('function')

    if n.right().children.length == 0
      "#{left}()"
    else
      "#{left} #{@build n.right()}"
  # `list`
  # A parameter list.

  'list': (n) -&gt;
    list = _.map(n.children, (item) =&gt;
      if n.children.length &gt; 1
        item.is_list_element = true
      @build(item))

    list.join(", ")
  'delete': (n) -&gt;
    ids = _.map(n.children, (el) =&gt; @build(el))
    ids = ids.join(', ')
    "delete #{ids}\n"
  # `.` (scope resolution?)
  # For instances such as `object.value`.

  '.': (n) -&gt;
    # **Caveat:**
    # *If called as `this.xxx`, it should use the at sign (`n.xxx`).*

    # **Caveat:**
    # *If called as `x.prototype`, it should use double colons (`x::`).*

    left  = @build n.left()
    right_obj = n.right()
    right_obj.property_accessor = true
    right = @build right_obj

    if n.isThis and n.isPrototype
      "@::"
    else if n.isThis
      "@#{right}"
    else if n.isPrototype
      "#{left}::"
    else if n.left().isPrototype
      "#{left}#{right}"
    else
      "#{left}.#{right}"
  'try': (n) -&gt;
    c = new Code
    c.add 'try'
    c.scope @body(n.tryBlock)

    _.each n.catchClauses, (clause) =&gt;
      c.add @build(clause)

    if n.finallyBlock?
      c.add "finally"
      c.scope @body(n.finallyBlock)

    c
  'catch': (n) -&gt;
    body_ = @body(n.block)
    return '' if trim(body_).length == 0

    c = new Code

    if n.varName?
      c.add "catch #{n.varName}"
    else
      c.add 'catch'

    c.scope @body(n.block)
    c
  # `?` (ternary operator)
  # For `a ? b : c`. Note that these will always be parenthesized, as (I
  # believe) the order of operations in JS is different in CS.

  '?': (n) -&gt;
    "(if #{@build n.left()} then #{@build n.children[1]} else #{@build n.children[2]})"
  'for': (n) -&gt;
    c = new Code

    if n.setup?
      c.add "#{@build n.setup}\n"

    if n.condition?
      c.add "while #{@build n.condition}\n"
    else
      c.add "loop"

    c.scope @body(n.body)
    c.scope @body(n.update)  if n.update?
    c
  'for_in': (n) -&gt;
    c = new Code

    c.add "for #{@build n.iterator} of #{@build n.object}"
    c.scope @body(n.body)
    c
  'while': (n) -&gt;
    c = new Code

    keyword   = if n.positive then "while" else "until"
    body_     = @body(n.body)

    # *Use `loop` whin something will go on forever (like `while (true)`).*
    if truthy(n.condition)
      statement = "loop"
    else
      statement = "#{keyword} #{@build n.condition}"

    if isSingleLine(body_) and statement isnt "loop"
      c.add "#{trim body_}  #{statement}\n"
    else
      c.add statement
      c.scope body_
    c
  'do': (n) -&gt;
    c = new Code

    c.add "loop"
    c.scope @body(n.body)
    c.scope "break unless #{@build n.condition}"  if n.condition?

    c
  'if': (n) -&gt;
    c = new Code

    keyword = if n.positive then "if" else "unless"
    body_   = @body(n.thenPart)
    n.condition.parenthesized = false

    # *Account for `if (xyz) {}`, which should be `xyz`. (#78)*
    # *Note that `!xyz` still compiles to `xyz` because the `!` will not change anything.*
    if n.thenPart.isA('block') and n.thenPart.children.length == 0 and !n.elsePart?
      console.log n.thenPart
      c.add "#{@build n.condition}\n"

    else if isSingleLine(body_) and !n.elsePart?
      c.add "#{trim body_}  #{keyword} #{@build n.condition}\n"

    else
      c.add "#{keyword} #{@build n.condition}"
      c.scope @body(n.thenPart)

      if n.elsePart?
        if n.elsePart.typeName() == 'if'
          c.add "else #{@build(n.elsePart).toString()}"
        else
          c.add "else\n"
          c.scope @body(n.elsePart)

    c
  'switch': (n) -&gt;
    c = new Code

    c.add "switch #{@build n.discriminant}\n"

    fall_through = false
    _.each n.cases, (item) =&gt;
      if item.value == 'default'
        c.scope "else"
      else
        if fall_through == true
          c.add ", #{@build item.caseLabel}\n"
        else
          c.add "  when #{@build item.caseLabel}"
          
      if @body(item.statements).length == 0
        fall_through = true
      else
        fall_through = false
        c.add "\n"
        c.scope @body(item.statements), 2

      first = false

    c
  'existence_check': (n) -&gt;
    "#{@build n.left()}?"
  'array_init': (n) -&gt;
    if n.children.length == 0
      "[]"
    else
      "[ #{@list n} ]"
  # `property_init`
  # Belongs to `object_init`;
  # left is a `identifier`, right can be anything.

  'property_init': (n) -&gt;
    left = n.left()
    right = n.right()
    right.is_property_value = true
    "#{@property_identifier left}: #{@build right}"
  # `object_init`
  # An object initializer.
  # Has many `property_init`.

  'object_init': (n, options={}) -&gt;
    if n.children.length == 0
      "{}"

    else if n.children.length == 1 and not (n.is_property_value or n.is_list_element)
      @build n.children[0]

    else
      list = _.map n.children, (item) =&gt; @build item

      c = new Code
      c.scope list.join("\n")
      c = "{#{c}}"  if options.brackets?
      c
  # `function`
  # A function. Can be an anonymous function (`function () { .. }`), or a named
  # function (`function name() { .. }`).

  'function': (n) -&gt;
    c = new Code

    params = _.map n.params, (str) =&gt;
      if str.constructor == String
        @id_param str
      else
        @build str

    if n.name
      c.add "#{n.name} = "

    if n.params.length &gt; 0
      c.add "(#{params.join ', '}) -&gt;"
    else
      c.add "-&gt;"

    body = @body(n.body)
    if trim(body).length &gt; 0
      c.scope body
    else
      c.add "\n"

    c
  'var': (n) -&gt;
    list = _.map n.children, (item) =&gt;
      "#{unreserve item.value} = #{if item.initializer? then @build(item.initializer) else 'undefined'}"

    _.compact(list).join("\n") + "\n"
  # ### Unsupported things
  #
  # Due to CoffeeScript limitations, the following things are not supported:
  #
  #  * New getter/setter syntax (`x.prototype = { get name() { ... } };`)
  #  * Break labels (`my_label: ...`)
  #  * Constants

  'other': (n) -&gt;   @unsupported n, "#{n.typeName()} is not supported yet"
  'getter': (n) -&gt;  @unsupported n, "getter syntax is not supported; use __defineGetter__"
  'setter': (n) -&gt;  @unsupported n, "setter syntax is not supported; use __defineSetter__"
  'label': (n) -&gt;   @unsupported n, "labels are not supported by CoffeeScript"
  'const': (n) -&gt;   @unsupported n, "consts are not supported by CoffeeScript"
  'block': (args...) -&gt;
    @script.apply @, args
  # `unsupported()`
  # Throws an unsupported error.
  'unsupported': (node, message) -&gt;
    throw new UnsupportedError("Unsupported: #{message}", node)
# ## AST manipulation
# Manipulation of the abstract syntax tree happens here. All these are done on
# the `build()` step, done just before a node is passed onto `Builders`.

class Transformer
  transform: (args...) -&gt;
    node = args[0]
    return  if node.transformed?
    type = node.typeName()
    fn = @[type]

    if fn
      fn.apply(this, args)
      node.transformed = true
  'script': (n) -&gt;
    n.functions    = []
    n.nonfunctions = []

    _.each n.children, (item) =&gt;
      if item.isA('function')
        n.functions.push item
      else
        n.nonfunctions.push item

    last = null

    # *Statements don't need parens, unless they are consecutive object
    # literals.*
    _.each n.nonfunctions, (item) =&gt;
      if item.expression?
        expr = item.expression

        if last?.isA('object_init') and expr.isA('object_init')
          item.parenthesized = true
        else
          item.parenthesized = false

        last = expr
  '.': (n) -&gt;
    n.isThis      = n.left().isA('this')
    n.isPrototype = (n.right().isA('identifier') and n.right().value == 'prototype')
  ';': (n) -&gt;
    if n.expression?
      # *Statements don't need parens.*
      n.expression.parenthesized = false

      # *If the statement only has one function call (eg, `alert(2);`), the
      # parentheses should be omitted (eg, `alert 2`).*
      if n.expression.isA('call')
        n.expression.type = Typenames['call_statement']
        @call_statement n
  'function': (n) -&gt;
    # *Unwrap the `return`s.*
    n.body.walk last: true, (parent, node, list) -&gt;
      if node.isA('return') and node.value
        # Hax
        lastNode = if list
          parent[list]
        else
          parent.children[parent.children.length-1]

        if lastNode
          lastNode.type = Typenames[';']
          lastNode.expression = lastNode.value
  'switch': (n) -&gt;
    _.each n.cases, (item) =&gt;
      block = item.statements
      ch    = block.children

      # *CoffeeScript does not need `break` statements on `switch` blocks.*
      delete ch[ch.length-1] if block.last()?.isA('break')
  'call_statement': (n) -&gt;
    if n.children[1]
      _.each n.children[1].children, (child, i) -&gt;
        if child.isA('function') and i != n.children[1].children.length-1
          child.parenthesized = true
  'return': (n) -&gt;
    # *Doing "return {x:2, y:3}" should parenthesize the return value.*
    if n.value and n.value.isA('object_init') and n.value.children.length &gt; 1
      n.value.parenthesized = true
  'block': (n) -&gt;
    @script n
  'if': (n) -&gt;
    # *Account for `if(x) {} else { something }` which should be `something unless x`.*
    if n.thenPart.children.length == 0 and n.elsePart?.children.length &gt; 0
      n.positive = false
      n.thenPart = n.elsePart
      delete n.elsePart

    @inversible n
  'while': (n) -&gt;
    # *A while with a blank body (`while(x){}`) should be accounted for.*
    # *You can't have empty blocks, so put a `continue` in there. (#78)*
    if n.body.children.length is 0
      n.body.children.push n.clone(type: Typenames['continue'], value: 'continue', children: [])

    @inversible n
  'inversible': (n) -&gt;
    @transform n.condition
    positive = if n.positive? then n.positive else true

    # *Invert a '!='. (`if (x != y)` =&gt; `unless x is y`)*
    if n.condition.isA('!=')
      n.condition.type = Typenames['==']
      n.positive = not positive

    # *Invert a '!'. (`if (!x)` =&gt; `unless x`)*
    else if n.condition.isA('!')
      n.condition = n.condition.left()
      n.positive = not positive

    else
      n.positive = positive
  '==': (n) -&gt;
    if n.right().isA('null', 'void')
      n.type     = Typenames['!']
      n.children = [n.clone(type: Typenames['existence_check'], children: [n.left()])]
  '!=': (n) -&gt;
    if n.right().isA('null', 'void')
      n.type     = Typenames['existence_check']
      n.children = [n.left()]
class UnsupportedError
  constructor: (str, src) -&gt;
    @message = str
    @cursor  = src.start
    @line    = src.lineno
    @source  = src.tokenizer.source
  toString: -&gt; @message

# ## Exports

@Js2coffee = exports =
  version: '0.1.3'
  build: buildCoffee
  UnsupportedError: UnsupportedError

module.exports = exports  if module?
'''
@color

table = (
    "buildCoffee = (str) -&gt;",
    "class Builder",
    "constructor: -&gt;",
    "build: (args...) -&gt;",
    "transform: (args...) -&gt;",
    "body: (node, opts={}) -&gt;",
    "'script': (n, opts={}) -&gt;",
    "'property_identifier': (n) -&gt;",
    "'identifier': (n) -&gt;",
    "'number': (n) -&gt;",
    "'id': (n) -&gt;",
    "'id_param': (n) -&gt;",
    "'return': (n) -&gt;",
    "';': (n) -&gt;",
    "'new': (n) -&gt; \"new #{@build n.left()}\"",
    "'new_with_args': (n) -&gt; \"new #{@build n.left()}(#{@build n.right()})\"",
    "'unary_plus': (n) -&gt; \"+#{@build n.left()}\"",
    "'unary_minus': (n) -&gt; \"-#{@build n.left()}\"",
    "'this': (n) -&gt; 'this'",
    "'null': (n) -&gt; 'null'",
    "'true': (n) -&gt; 'true'",
    "'false': (n) -&gt; 'false'",
    "'void': (n) -&gt; 'undefined'",
    "'debugger': (n) -&gt; \"debugger\\n\"",
    "'break': (n) -&gt; \"break\\n\"",
    "'continue': (n) -&gt; \"continue\\n\"",
    "'~': (n) -&gt; \"~#{@build n.left()}\"",
    "'typeof': (n) -&gt; \"typeof #{@build n.left()}\"",
    "'index': (n) -&gt;",
    "'throw': (n) -&gt; \"throw #{@build n.exception}\"",
    "'!': (n) -&gt;",
    "in: (n) -&gt;    @binary_operator n, 'of'",
    "'+': (n) -&gt;   @binary_operator n, '+'",
    "'-': (n) -&gt;   @binary_operator n, '-'",
    "'*': (n) -&gt;   @binary_operator n, '*'",
    "'/': (n) -&gt;   @binary_operator n, '/'",
    "'%': (n) -&gt;   @binary_operator n, '%'",
    "'&gt;': (n) -&gt;   @binary_operator n, '&gt;'",
    "'&lt;': (n) -&gt;   @binary_operator n, '&lt;'",
    "'&amp;': (n) -&gt;   @binary_operator n, '&amp;'",
    "'|': (n) -&gt;   @binary_operator n, '|'",
    "'^': (n) -&gt;   @binary_operator n, '^'",
    "'&amp;&amp;': (n) -&gt;  @binary_operator n, 'and'",
    "'||': (n) -&gt;  @binary_operator n, 'or'",
    "'&lt;&lt;': (n) -&gt;  @binary_operator n, '&lt;&lt;'",
    "'&lt;=': (n) -&gt;  @binary_operator n, '&lt;='",
    "'&gt;&gt;': (n) -&gt;  @binary_operator n, '&gt;&gt;'",
    "'&gt;=': (n) -&gt;  @binary_operator n, '&gt;='",
    "'===': (n) -&gt; @binary_operator n, 'is'",
    "'!==': (n) -&gt; @binary_operator n, 'isnt'",
    "'&gt;&gt;&gt;': (n) -&gt;  @binary_operator n, '&gt;&gt;&gt;'",
    "instanceof: (n) -&gt; @binary_operator n, 'instanceof'",
    "'==': (n) -&gt;",
    "'!=': (n) -&gt;",
    "'binary_operator': do -&gt;",
    "'--': (n) -&gt; @increment_decrement n, '--'",
    "'++': (n) -&gt; @increment_decrement n, '++'",
    "'increment_decrement': (n, sign) -&gt;",
    "'=': (n) -&gt;",
    "',': (n) -&gt;",
    "'regexp': (n) -&gt;",
    "'string': (n) -&gt;",
    "'call': (n) -&gt;",
    "'call_statement': (n) -&gt;",
    "'list': (n) -&gt;",
    "'delete': (n) -&gt;",
    "'.': (n) -&gt;",
    "'try': (n) -&gt;",
    "'catch': (n) -&gt;",
    "'?': (n) -&gt;",
    "'for': (n) -&gt;",
    "'for_in': (n) -&gt;",
    "'while': (n) -&gt;",
    "'do': (n) -&gt;",
    "'if': (n) -&gt;",
    "'switch': (n) -&gt;",
    "'existence_check': (n) -&gt;",
    "'array_init': (n) -&gt;",
    "'property_init': (n) -&gt;",
    "'object_init': (n, options={}) -&gt;",
    "'function': (n) -&gt;",
    "'var': (n) -&gt;",
    "'other': (n) -&gt;   @unsupported n, \"#{n.typeName()} is not supported yet\"",
    "'getter': (n) -&gt;  @unsupported n, \"getter syntax is not supported; use __defineGetter__\"",
    "'setter': (n) -&gt;  @unsupported n, \"setter syntax is not supported; use __defineSetter__\"",
    "'label': (n) -&gt;   @unsupported n, \"labels are not supported by CoffeeScript\"",
    "'const': (n) -&gt;   @unsupported n, \"consts are not supported by CoffeeScript\"",
    "'block': (args...) -&gt;",
    "'unsupported': (node, message) -&gt;",
    "class Transformer",
    "transform: (args...) -&gt;",
    "'script': (n) -&gt;",
    "'.': (n) -&gt;",
    "';': (n) -&gt;",
    "'function': (n) -&gt;",
    "n.body.walk last: true, (parent, node, list) -&gt;",
    "'switch': (n) -&gt;",
    "'call_statement': (n) -&gt;",
    "'return': (n) -&gt;",
    "'block': (n) -&gt;",
    "'if': (n) -&gt;",
    "'while': (n) -&gt;",
    "'inversible': (n) -&gt;",
    "'==': (n) -&gt;",
    "'!=': (n) -&gt;",
    "class UnsupportedError",
    "constructor: (str, src) -&gt;",
    "toString: -&gt; @message",
)

try:
    c.importCommands.coffeeScriptUnitTest(p,s=s,showTree=True)
    if 1:
      p2 = c.p.firstChild().firstChild()
      for h in table:
          assert p2.h == h, (p2.h, h)
          p2.moveToThreadNext()
finally:
    if 1:
        p.deleteAllChildren()
        c.redraw()
</t>
<t tx="ekr.20161109065940.1"># g.cls()
import leo.plugins.importers.linescanner as linescanner
# import imp
# imp.reload(linescanner)
lines_table = [
    'abc',
    '    xyz',
    '    ',
    '  # comment',
]
for language in ('python', 'coffeescript'):
    importer = linescanner.Importer(
        c.importCommands,
        language = language,
    )
    # print('%s %r' % (language, importer.comment_delim))
    assert importer.single_comment == '#', importer.single_comment
    for line in lines_table:
        lines = [line]
        n = importer.get_leading_indent(lines, 0)
        # print('%s %r' % (n, line))
</t>
<t tx="ekr.20161109065949.1"># g.cls()
import leo.plugins.importers.linescanner as linescanner
# import imp
# imp.reload(linescanner)
table = [
    (False, 'abc'),
    (False, '    xyz'),
    (True, '    '),
    (True,'  # comment'),
]
importer = linescanner.Importer(c.importCommands, language = 'python')
for val, s in table:
    assert val == importer.is_ws_line(s), (val, repr(s))
</t>
<t tx="ekr.20161109084732.1">s = r'''

# Js2coffee relies on Narcissus's parser.

{parser} = @Narcissus or require('./narcissus_packed')

# Main entry point

buildCoffee = (str) -&gt;
  str  = str.replace /\r/g, ''
  str += "\n"

  builder    = new Builder
  scriptNode = parser.parse str
'''
table = (
    'buildCoffee = (str) -&gt;',
)
try:
    c.importCommands.coffeeScriptUnitTest(p,s=s,showTree=True)
    if 1:
      p2 = c.p.firstChild().firstChild()
      for h in table:
          assert p2.h == h, (p2.h, h)
          p2.moveToThreadNext()
finally:
    if 1:
        p.deleteAllChildren()
        c.redraw()
</t>
<t tx="ekr.20161112061406.1">class TypeJoinVisitor(TypeVisitor[Type]):
    """Implementation of the least upper bound algorithm.

    Attributes:
      s: The other (left) type operand.
    """

    def __init__(self, s: Type) -&gt; None:
        self.s = s

    def visit_unbound_type(self, t: UnboundType) -&gt; Type:
        if isinstance(self.s, Void) or isinstance(self.s, ErrorType):
            return ErrorType()
        else:
            return AnyType()

    def visit_union_type(self, t: UnionType) -&gt; Type:
        if is_subtype(self.s, t):
            return t
        else:
            return UnionType(t.items + [self.s])

    def visit_error_type(self, t: ErrorType) -&gt; Type:
        return t

    def visit_type_list(self, t: TypeList) -&gt; Type:
        assert False, 'Not supported'

    def visit_any(self, t: AnyType) -&gt; Type:
        return t

    def visit_void(self, t: Void) -&gt; Type:
        if isinstance(self.s, Void):
            return t
        else:
            return ErrorType()

    def visit_none_type(self, t: NoneTyp) -&gt; Type:
        if not isinstance(self.s, Void):
            return self.s
        else:
            return self.default(self.s)

    def visit_erased_type(self, t: ErasedType) -&gt; Type:
        return self.s

    def visit_type_var(self, t: TypeVarType) -&gt; Type:
        if isinstance(self.s, TypeVarType) and (cast(TypeVarType, self.s)).id == t.id:
            return self.s
        else:
            return self.default(self.s)

    def visit_instance(self, t: Instance) -&gt; Type:
        if isinstance(self.s, Instance):
            return join_instances(t, cast(Instance, self.s))
        elif isinstance(self.s, FunctionLike):
            return join_types(t, self.s.fallback)
        else:
            return self.default(self.s)

    def visit_callable_type(self, t: CallableType) -&gt; Type:
        # TODO: Consider subtyping instead of just similarity.
        if isinstance(self.s, CallableType) and is_similar_callables(
                t, cast(CallableType, self.s)):
            return combine_similar_callables(t, cast(CallableType, self.s))
        elif isinstance(self.s, Overloaded):
            # Switch the order of arguments to that we'll get to visit_overloaded.
            return join_types(t, self.s)
        else:
            return join_types(t.fallback, self.s)

    def visit_overloaded(self, t: Overloaded) -&gt; Type:
        # This is more complex than most other cases. Here are some
        # examples that illustrate how this works.
        #
        # First let's define a concise notation:
        #  - Cn are callable types (for n in 1, 2, ...)
        #  - Ov(C1, C2, ...) is an overloaded type with items C1, C2, ...
        #  - Callable[[T, ...], S] is written as [T, ...] -&gt; S.
        #
        # We want some basic properties to hold (assume Cn are all
        # unrelated via Any-similarity):
        #
        #   join(Ov(C1, C2), C1) == C1
        #   join(Ov(C1, C2), Ov(C1, C2)) == Ov(C1, C2)
        #   join(Ov(C1, C2), Ov(C1, C3)) == C1
        #   join(Ov(C2, C2), C3) == join of fallback types
        #
        # The presence of Any types makes things more interesting. The join is the
        # most general type we can get with respect to Any:
        #
        #   join(Ov([int] -&gt; int, [str] -&gt; str), [Any] -&gt; str) == Any -&gt; str
        #
        # We could use a simplification step that removes redundancies, but that's not
        # implemented right now. Consider this example, where we get a redundancy:
        #
        #   join(Ov([int, Any] -&gt; Any, [str, Any] -&gt; Any), [Any, int] -&gt; Any) ==
        #       Ov([Any, int] -&gt; Any, [Any, int] -&gt; Any)
        #
        # TODO: Use callable subtyping instead of just similarity.
        result = []  # type: List[CallableType]
        s = self.s
        if isinstance(s, FunctionLike):
            # The interesting case where both types are function types.
            for t_item in t.items():
                for s_item in s.items():
                    if is_similar_callables(t_item, s_item):
                        result.append(combine_similar_callables(t_item, s_item))
            if result:
                # TODO: Simplify redundancies from the result.
                if len(result) == 1:
                    return result[0]
                else:
                    return Overloaded(result)
            return join_types(t.fallback, s.fallback)
        return join_types(t.fallback, s)

    def visit_tuple_type(self, t: TupleType) -&gt; Type:
        if (isinstance(self.s, TupleType) and
                cast(TupleType, self.s).length() == t.length()):
            items = []  # type: List[Type]
            for i in range(t.length()):
                items.append(self.join(t.items[i],
                                       (cast(TupleType, self.s)).items[i]))
            # TODO: What if the fallback types are different?
            return TupleType(items, t.fallback)
        else:
            return self.default(self.s)

    def join(self, s: Type, t: Type) -&gt; Type:
        return join_types(s, t)

    def default(self, typ: Type) -&gt; Type:
        if isinstance(typ, Instance):
            return object_from_instance(typ)
        elif isinstance(typ, UnboundType):
            return AnyType()
        elif isinstance(typ, Void) or isinstance(typ, ErrorType):
            return ErrorType()
        elif isinstance(typ, TupleType):
            return self.default(typ.fallback)
        elif isinstance(typ, FunctionLike):
            return self.default(typ.fallback)
        elif isinstance(typ, TypeVarType):
            return self.default(typ.upper_bound)
        else:
            return AnyType()
</t>
<t tx="ekr.20161112061414.1">class aClass:
    @others
</t>
<t tx="ekr.20161112061414.2">def __init__(self):
    pass
</t>
<t tx="ekr.20161112061414.3">def spam(self):
    pass
</t>
<t tx="ekr.20161112061414.4">bClass = aClass
</t>
<t tx="ekr.20161115063144.10">@tabwidth -4
    # Required when running unit tests externally.
if 0: # Preamble...
    # g.cls()
    if c.isChanged(): c.save()
    # import leo
    import leo.core.leoImport as leoImport
    import leo.plugins.importers.linescanner as linescanner
    import leo.plugins.importers.python
    # Reload all.
    import imp
    imp.reload(leo.plugins.importers.linescanner)
    imp.reload(leo.plugins.importers.python)
    imp.reload(leoImport)
    g.app.loadManager.createAllImporetersData()
    ic = leoImport.LeoImportCommands(c)
else:
    ic = c.importCommands  
s = '''\
class aClass:
    def outerDef(self):
        """docstring.
        line two."""

        def pr(*args,**keys):
            g.es_print(color='blue',*args,**keys)

        a = 3
'''
table = (
    (1, 'class aClass'),
    (2, 'outerDef'),
    # (3, 'pr'),
)
try:
    test_node = p.copy()
    test_node.deleteAllChildren()
    ic.pythonUnitTest(p,s=s,showTree=True)
    after = p.nodeAfterTree()
    root = p.lastChild()
    assert root.h.startswith('@@'), root.h
    p = root.firstChild()
    if 1:
        for n, h in table:
            n2 = p.level() - root.level()
            assert h == p.h, (h, p.h)
            assert n == n2, (n, n2, p.h)
            p.moveToThreadNext()
        assert p == after, ('tree comp failed', p.h)
    test_node.deleteAllChildren()
finally:
    c.redraw()
</t>
<t tx="ekr.20161115063144.11">@tabwidth -4
    # Required when running unit tests externally.
if 0: # Preamble...
    # g.cls()
    if c.isChanged(): c.save()
    # import leo
    import leo.core.leoImport as leoImport
    import leo.plugins.importers.linescanner as linescanner
    import leo.plugins.importers.python
    # Reload all.
    import imp
    imp.reload(leo.plugins.importers.linescanner)
    imp.reload(leo.plugins.importers.python)
    imp.reload(leoImport)
    g.app.loadManager.createAllImporetersData()
    ic = leoImport.LeoImportCommands(c)
else:
    ic = c.importCommands  
s = '''\

class test:

    def importFilesCommand (self,files=None,treeType=None,
        perfectImport=True,testing=False,verbose=False):
            # Not a command.  It must *not* have an event arg.

        c = self.c
        if c == None: return
        p = c.currentPosition()

    # Used by paste logic.

    def convertMoreStringToOutlineAfter (self,s,firstVnode):
        s = string.replace(s,"\\r","")
        strings = string.split(s,"\\n")
        return self.convertMoreStringsToOutlineAfter(strings,firstVnode)
'''
table = (
    (1, 'class test'),
    (2, 'importFilesCommand'),
    (2, 'convertMoreStringToOutlineAfter'),
)
try:
    test_node = p.copy()
    test_node.deleteAllChildren()
    ic.pythonUnitTest(p,s=s,showTree=True)
    after = p.nodeAfterTree()
    root = p.lastChild()
    assert root.h.startswith('@@'), root.h
    p = root.firstChild()
    if 1:
        for n, h in table:
            n2 = p.level() - root.level()
            assert h == p.h, (h, p.h)
            assert n == n2, (n, n2, p.h)
            p.moveToThreadNext()
        assert p == after, ('tree comp failed', p.h)
    if 1:
        root.doDelete()
finally:
    c.redraw()
</t>
<t tx="ekr.20161115063144.12">@tabwidth -4
    # Required when running unit tests externally.
if 0: # Preamble...
    # g.cls()
    if c.isChanged(): c.save()
    # import leo
    import leo.core.leoImport as leoImport
    import leo.plugins.importers.linescanner as linescanner
    import leo.plugins.importers.python
    # Reload all.
    import imp
    imp.reload(leo.plugins.importers.linescanner)
    imp.reload(leo.plugins.importers.python)
    imp.reload(leoImport)
    g.app.loadManager.createAllImporetersData()
    ic = leoImport.LeoImportCommands(c)
else:
    ic = c.importCommands

s = '''\

class test:
    def spam(b):
        pass

    # Used by paste logic.

    def foo(a):
        pass
'''
table = (
    (1, 'class test'),
    (2, 'spam'),
    (2, 'foo'),
)
try:
    test_node = p.copy()
    test_node.deleteAllChildren()
    ic.pythonUnitTest(p,s=s,showTree=True)
    after = p.nodeAfterTree()
    root = p.lastChild()
    assert root.h.startswith('@@'), root.h
    p = root.firstChild()
    if 1:
        for n, h in table:
            n2 = p.level() - root.level()
            assert h == p.h, (h, p.h)
            assert n == n2, (n, n2, p.h)
            p.moveToThreadNext()
        assert p == after, ('tree comp failed', p.h)
    if 1:
        test_node.deleteAllChildren()
finally:
    c.redraw()
</t>
<t tx="ekr.20161115063144.13">@tabwidth -4
    # Required when running unit tests externally.

s = '''\
"""A file consisting only of a docstring.
"""
'''

c.importCommands.pythonUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20161115063144.14">@tabwidth -4
    # Required when running unit tests externally.

s = '''\
import leo.core.leoGlobals as g

a = 3
'''

c.importCommands.pythonUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20161115063144.15">@tabwidth -4
    # Required when running unit tests externally.

s = '''\

class cls:
     def fun(): # one extra space.
        pass
'''


c.importCommands.pythonUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20161115063144.16">@tabwidth -4
    # Required when running unit tests externally.
if 0: # Preamble...
    # g.cls()
    if c.isChanged(): c.save()
    # import leo
    import leo.core.leoImport as leoImport
    import leo.plugins.importers.linescanner as linescanner
    import leo.plugins.importers.python
    # Reload all.
    import imp
    imp.reload(leo.plugins.importers.linescanner)
    imp.reload(leo.plugins.importers.python)
    imp.reload(leoImport)
    g.app.loadManager.createAllImporetersData()
    ic = leoImport.LeoImportCommands(c)
else:
    ic = c.importCommands  
s = '''\

class mammalProviderBase(object):
    """Root class for content providers used by DWEtree.py"""
    def __init__(self, params):
        """store reference to parameters"""
        self.params = params
    def provide(self, what):
        """default &lt;BASE&gt; value"""
        if what == 'doctitle':
            return ELE('base', href=self.params['/BASE/'])
        return None

    def imagePath(self, sppdat):
        """return path to images and list of images for *species*"""
        path = 'MNMammals/imglib/Mammalia'
        for i in 'Order', 'Family', 'Genus', 'Species':
            path = os.path.join(path, sppdat['%sName' % (i,)])
        imglib = os.path.join('/var/www',path)
        imglib = os.path.join(imglib, '*.[Jj][Pp][Gg]')
        path = os.path.join('/',path)
        lst = [os.path.split(i)[1] for i in glob.glob(imglib)]
        lst.sort()
        return path, lst

class mainPages(mammalProviderBase):
    """provide content for pages in 'main' folder"""
    __parent = mammalProviderBase
    def provide(self, what):
        """add one layer to &lt;BASE&gt;"""
        ans = self.__parent.provide(self, what)
        if what == 'doctitle':
            return ELE('base', href=self.params['/BASE/']+'main/')
        return ans
''' 
table = (
    (1, 'class mammalProviderBase'),
    (2, '__init__'),
    (2, 'provide'),
    (2, 'imagePath'),
    (1, 'class mainPages'),
    (2, 'provide'),
)
try:
    test_node = p.copy()
    test_node.deleteAllChildren()
    ic.pythonUnitTest(p,s=s,showTree=True)
    after = p.nodeAfterTree()
    root = p.lastChild()
    assert root.h.startswith('@@'), root.h
    p = root.firstChild()
    if 1:
        for n, h in table:
            n2 = p.level() - root.level()
            assert h == p.h, (h, p.h)
            assert n == n2, (n, n2, p.h)
            p.moveToThreadNext()
        assert p == after, ('tree comp failed', p.h)
    if 1:
        test_node.deleteAllChildren()
finally:
    c.redraw()
</t>
<t tx="ekr.20161115063144.18"># ~/at-auto-test.py

# Careful: don't put a section reference in the string.
s = '''\
# This is valid Python, but it looks like a section reference.
a = b &lt; &lt; c &gt; &gt; d
'''.replace('&gt; &gt;', '&gt;&gt;').replace('&lt; &lt;', '&lt;&lt;')

c.importCommands.pythonUnitTest(p,s=s,showTree=False)

</t>
<t tx="ekr.20161115063144.19">@tabwidth -4
    # Required when running unit tests externally.

s = '''\

class ItasException(Exception):

    pass

def gpRun(gp, cmd, args, log = None):

    """Wrapper for making calls to the geoprocessor and reporting errors"""

    if log:

        log('gp: %s: %s\\n' % (cmd, str(args)))
'''

c.importCommands.pythonUnitTest(p,s=s,showTree=False)


</t>
<t tx="ekr.20161115063144.20">@tabwidth -4
    # Required when running unit tests externally.

s = '''\

class emptyClass: pass

def followingDef():
    pass
'''

c.importCommands.pythonUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20161115063144.21">@tabwidth -4
    # Required when running unit tests externally.

s = '''\

class emptyClass: pass # comment

def followingDef(): # comment
    pass
'''

c.importCommands.pythonUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20161115063144.22">@tabwidth -4
    # Required when running unit tests externally.

s = '''\
class aClass:
    def def1(self):
        pass

    if False or g.unitTesting:

        def pr(*args,**keys): # reportMismatch test
            g.es_print(color='blue',*args,**keys)

        pr('input...')
'''

c.importCommands.pythonUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20161115063144.23">@tabwidth -4
    # Required when running unit tests externally.

s = '''\
class aClass:
    def def1(self):
        pass

    if False or g.unitTesting:

        def pr(*args,**keys): # reportMismatch test
            g.es_print(color='blue',*args,**keys)

        pr('input...')

    def def2(self):
        pass
'''

c.importCommands.pythonUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20161115063144.24">@tabwidth -4
    # Required when running unit tests externally.
if 0: # Preamble...
    # g.cls()
    if c.isChanged(): c.save()
    # import leo
    import leo.core.leoImport as leoImport
    import leo.plugins.importers.linescanner as linescanner
    import leo.plugins.importers.python
    # Reload all.
    import imp
    imp.reload(leo.plugins.importers.linescanner)
    imp.reload(leo.plugins.importers.python)
    imp.reload(leoImport)
    g.app.loadManager.createAllImporetersData()
    ic = leoImport.LeoImportCommands(c)
else:
    ic = c.importCommands  
# This caused PyParse.py not to be imported properly.
s = r'''
import re
if 0: # Causes the 'overindent'
   if 0:   # for throwaway debugging output
      def dump(*stuff):
        sys.__stdout__.write(" ".join(map(str, stuff)) + "\n")
for ch in "({[":
   _tran[ord(ch)] = '('
class testClass1:
    pass
'''
table = (
    (1, 'Declarations'),
    (1, 'class testClass1'),
)
try:
    test_node = p.copy()
    test_node.deleteAllChildren()
    ic.pythonUnitTest(p,s=s,showTree=True)
    after = p.nodeAfterTree()
    root = p.lastChild()
    assert root.h.startswith('@@'), root.h
    p = root.firstChild()
    if 1:
        for n, h in table:
            n2 = p.level() - root.level()
            assert h == p.h, (h, p.h)
            assert n == n2, (n, n2, p.h)
            p.moveToThreadNext()
        assert p == after, ('tree comp failed', p.h)
    if 1:
        test_node.deleteAllChildren()
finally:
    c.redraw()
</t>
<t tx="ekr.20161115063144.25">@tabwidth -4
    # Required when running unit tests externally.

s = '''\
class BaseScanner:

        """The base class for all import scanner classes."""

        def __init__ (self,importCommands,language):

            self.c = ic.c

        def createHeadline (self,parent,body,headline):
            # g.trace("parent,headline:",parent,headline)
            return p
'''

c.importCommands.pythonUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20161115063144.26">@tabwidth -4
    # Required when running unit tests externally.

s = '''\
class BaseScanner:
    def containsUnderindentedComment(self):
        a = 2
    # A true underindented comment.
        b = 3
    # This underindented comment should be placed with next function.
    def empty(self):
        pass
'''

c.importCommands.pythonUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20161115063144.27">@tabwidth -4
    # Required when running unit tests externally.

s = '''\
class BaseScanner:
    def containsUnderindentedComment(self):
        a = 2
    #
        b = 3
        # This comment is part of the present function.

    def empty(self):
        pass
'''

c.importCommands.pythonUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20161115063144.28">@tabwidth -4
    # Required when running unit tests externally.

s = '''\
class aClass: # trailing comment


    def def1(self):             # trailing comment
        pass
'''

c.importCommands.pythonUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20161115063144.29">@tabwidth -4
    # Required when running unit tests externally.

s = '''\

xyz = 6 # trailing comment
pass
'''

c.importCommands.pythonUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20161115063144.3">@tabwidth -4
    # Required when running unit tests externally.

s = '''\
class testClass1 # no colon
    pass

def spam():
    pass
'''

c.importCommands.pythonUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20161115063144.30"># For comparison with unindent does not end function.

@tabwidth -4
    # Required when running unit tests externally.

s = '''\

def foo():
    pass

def bar():
    pass
'''

c.importCommands.pythonUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20161115063144.31">@tabwidth -4
    # Required when running unit tests externally.
if 0: # Preamble...
    # g.cls()
    if c.isChanged(): c.save()
    # import leo
    import leo.core.leoImport as leoImport
    import leo.plugins.importers.linescanner as linescanner
    import leo.plugins.importers.python
    # Reload all.
    import imp
    imp.reload(leo.plugins.importers.linescanner)
    imp.reload(leo.plugins.importers.python)
    imp.reload(leoImport)
    g.app.loadManager.createAllImporetersData()
    ic = leoImport.LeoImportCommands(c)
else:
    ic = c.importCommands  
s = '''\

class emptyClass: 

    def spam():
        """docstring line 1
under-indented docstring line"""
        pass

def followingDef(): # comment
    pass
'''
table = (
    (1, 'class emptyClass'),
    (2, 'spam'),
    (1, 'followingDef'),
)
try:
    test_node = p.copy()
    test_node.deleteAllChildren()
    ic.pythonUnitTest(p,s=s,showTree=True)
    after = p.nodeAfterTree()
    root = p.lastChild()
    assert root.h.startswith('@@'), root.h
    p = root.firstChild()
    if 1:
        for n, h in table:
            n2 = p.level() - root.level()
            assert h == p.h, (h, p.h)
            assert n == n2, (n, n2, p.h)
            p.moveToThreadNext()
        assert p == after, ('tree comp failed', p.h)
    test_node.deleteAllChildren()
finally:
    c.redraw()
</t>
<t tx="ekr.20161115063144.32">@tabwidth -4
    # Required when running unit tests externally.

s = '''\

def foo():

    error("""line1
line2.
""")

    a = 5

def bar():
    pass
'''

showTree = False
keepTree = False

c.importCommands.pythonUnitTest(p,s=s,showTree=showTree)

if showTree:
    try:
        child = p.firstChild()
        n = child.numberOfChildren()
        assert n == 2, 'expected 2 children, got %s' % n
    finally:
        if keepTree:
            # h = child.h
            # print('h',h)
            child.setHeadString('@'+h)
        else:
            while p.hasChildren():
                p.firstChild().doDelete()
        c.redraw(p)
</t>
<t tx="ekr.20161115063144.33">@killcolor

s = '''\

"""Generic output formatting.
"""

import sys


AS_IS = None


class NullFormatter:
    """A formatter which does nothing.

    If the writer parameter is omitted, a NullWriter instance is created.
    No methods of the writer are called by NullFormatter instances.

    Implementations should inherit from this class if implementing a writer
    interface but don't need to inherit any implementation.

    """

    def __init__(self, writer=None):
        if writer is None:
            writer = NullWriter()
        self.writer = writer
    def end_paragraph(self, blankline): pass
    def add_line_break(self): pass
    def add_hor_rule(self, *args, **kw): pass
    def add_label_data(self, format, counter, blankline=None): pass
    def add_flowing_data(self, data): pass
    def add_literal_data(self, data): pass
    def flush_softspace(self): pass
    def push_alignment(self, align): pass
    def pop_alignment(self): pass
    def push_font(self, x): pass
    def pop_font(self): pass
    def push_margin(self, margin): pass
    def pop_margin(self): pass
    def set_spacing(self, spacing): pass
    def push_style(self, *styles): pass
    def pop_style(self, n=1): pass
    def assert_line_data(self, flag=1): pass


class AbstractFormatter:
    """The standard formatter.

    This implementation has demonstrated wide applicability to many writers,
    and may be used directly in most circumstances.  It has been used to
    implement a full-featured World Wide Web browser.

    """

    #  Space handling policy:  blank spaces at the boundary between elements
    #  are handled by the outermost context.  "Literal" data is not checked
    #  to determine context, so spaces in literal data are handled directly
    #  in all circumstances.

    def __init__(self, writer):
        self.writer = writer            # Output device
        self.align = None               # Current alignment
        self.align_stack = []           # Alignment stack
        self.font_stack = []            # Font state
        self.margin_stack = []          # Margin state
        self.spacing = None             # Vertical spacing state
        self.style_stack = []           # Other state, e.g. color
        self.nospace = 1                # Should leading space be suppressed
        self.softspace = 0              # Should a space be inserted
        self.para_end = 1               # Just ended a paragraph
        self.parskip = 0                # Skipped space between paragraphs?
        self.hard_break = 1             # Have a hard break
        self.have_label = 0

    def end_paragraph(self, blankline):
        if not self.hard_break:
            self.writer.send_line_break()
            self.have_label = 0
        if self.parskip &lt; blankline and not self.have_label:
            self.writer.send_paragraph(blankline - self.parskip)
            self.parskip = blankline
            self.have_label = 0
        self.hard_break = self.nospace = self.para_end = 1
        self.softspace = 0

    def add_line_break(self):
        if not (self.hard_break or self.para_end):
            self.writer.send_line_break()
            self.have_label = self.parskip = 0
        self.hard_break = self.nospace = 1
        self.softspace = 0

    def add_hor_rule(self, *args, **kw):
        if not self.hard_break:
            self.writer.send_line_break()
        self.writer.send_hor_rule(*args, **kw)
        self.hard_break = self.nospace = 1
        self.have_label = self.para_end = self.softspace = self.parskip = 0

    def add_label_data(self, format, counter, blankline = None):
        if self.have_label or not self.hard_break:
            self.writer.send_line_break()
        if not self.para_end:
            self.writer.send_paragraph((blankline and 1) or 0)
        if isinstance(format, str):
            self.writer.send_label_data(self.format_counter(format, counter))
        else:
            self.writer.send_label_data(format)
        self.nospace = self.have_label = self.hard_break = self.para_end = 1
        self.softspace = self.parskip = 0

    def format_counter(self, format, counter):
        label = ''
        for c in format:
            if c == '1':
                label = label + ('%d' % counter)
            elif c in 'aA':
                if counter &gt; 0:
                    label = label + self.format_letter(c, counter)
            elif c in 'iI':
                if counter &gt; 0:
                    label = label + self.format_roman(c, counter)
            else:
                label = label + c
        return label

    def format_letter(self, case, counter):
        label = ''
        while counter &gt; 0:
            counter, x = divmod(counter-1, 26)
            # This makes a strong assumption that lowercase letters
            # and uppercase letters form two contiguous blocks, with
            # letters in order!
            s = chr(ord(case) + x)
            label = s + label
        return label

    def format_roman(self, case, counter):
        ones = ['i', 'x', 'c', 'm']
        fives = ['v', 'l', 'd']
        label, index = '', 0
        # This will die of IndexError when counter is too big
        while counter &gt; 0:
            counter, x = divmod(counter, 10)
            if x == 9:
                label = ones[index] + ones[index+1] + label
            elif x == 4:
                label = ones[index] + fives[index] + label
            else:
                if x &gt;= 5:
                    s = fives[index]
                    x = x-5
                else:
                    s = ''
                s = s + ones[index]*x
                label = s + label
            index = index + 1
        if case == 'I':
            return label.upper()
        return label

    def add_flowing_data(self, data):
        if not data: return
        # The following looks a bit convoluted but is a great improvement over
        # data = regsub.gsub('[' + string.whitespace + ']+', ' ', data)
        prespace = data[:1].isspace()
        postspace = data[-1:].isspace()
        data = " ".join(data.split())
        if self.nospace and not data:
            return
        elif prespace or self.softspace:
            if not data:
                if not self.nospace:
                    self.softspace = 1
                    self.parskip = 0
                return
            if not self.nospace:
                data = ' ' + data
        self.hard_break = self.nospace = self.para_end = \
                          self.parskip = self.have_label = 0
        self.softspace = postspace
        self.writer.send_flowing_data(data)

    def add_literal_data(self, data):
        if not data: return
        if self.softspace:
            self.writer.send_flowing_data(" ")
        self.hard_break = data[-1:] == '\n'
        self.nospace = self.para_end = self.softspace = \
                       self.parskip = self.have_label = 0
        self.writer.send_literal_data(data)

    def flush_softspace(self):
        if self.softspace:
            self.hard_break = self.para_end = self.parskip = \
                              self.have_label = self.softspace = 0
            self.nospace = 1
            self.writer.send_flowing_data(' ')

    def push_alignment(self, align):
        if align and align != self.align:
            self.writer.new_alignment(align)
            self.align = align
            self.align_stack.append(align)
        else:
            self.align_stack.append(self.align)

    def pop_alignment(self):
        if self.align_stack:
            del self.align_stack[-1]
        if self.align_stack:
            self.align = align = self.align_stack[-1]
            self.writer.new_alignment(align)
        else:
            self.align = None
            self.writer.new_alignment(None)

    def push_font(self, (size, i, b, tt)):
        if self.softspace:
            self.hard_break = self.para_end = self.softspace = 0
            self.nospace = 1
            self.writer.send_flowing_data(' ')
        if self.font_stack:
            csize, ci, cb, ctt = self.font_stack[-1]
            if size is AS_IS: size = csize
            if i is AS_IS: i = ci
            if b is AS_IS: b = cb
            if tt is AS_IS: tt = ctt
        font = (size, i, b, tt)
        self.font_stack.append(font)
        self.writer.new_font(font)

    def pop_font(self):
        if self.font_stack:
            del self.font_stack[-1]
        if self.font_stack:
            font = self.font_stack[-1]
        else:
            font = None
        self.writer.new_font(font)

    def push_margin(self, margin):
        self.margin_stack.append(margin)
        fstack = filter(None, self.margin_stack)
        if not margin and fstack:
            margin = fstack[-1]
        self.writer.new_margin(margin, len(fstack))

    def pop_margin(self):
        if self.margin_stack:
            del self.margin_stack[-1]
        fstack = filter(None, self.margin_stack)
        if fstack:
            margin = fstack[-1]
        else:
            margin = None
        self.writer.new_margin(margin, len(fstack))

    def set_spacing(self, spacing):
        self.spacing = spacing
        self.writer.new_spacing(spacing)

    def push_style(self, *styles):
        if self.softspace:
            self.hard_break = self.para_end = self.softspace = 0
            self.nospace = 1
            self.writer.send_flowing_data(' ')
        for style in styles:
            self.style_stack.append(style)
        self.writer.new_styles(tuple(self.style_stack))

    def pop_style(self, n=1):
        del self.style_stack[-n:]
        self.writer.new_styles(tuple(self.style_stack))

    def assert_line_data(self, flag=1):
        self.nospace = self.hard_break = not flag
        self.para_end = self.parskip = self.have_label = 0


class NullWriter:
    """Minimal writer interface to use in testing &amp; inheritance.

    A writer which only provides the interface definition; no actions are
    taken on any methods.  This should be the base class for all writers
    which do not need to inherit any implementation methods.

    """
    def __init__(self): pass
    def flush(self): pass
    def new_alignment(self, align): pass
    def new_font(self, font): pass
    def new_margin(self, margin, level): pass
    def new_spacing(self, spacing): pass
    def new_styles(self, styles): pass
    def send_paragraph(self, blankline): pass
    def send_line_break(self): pass
    def send_hor_rule(self, *args, **kw): pass
    def send_label_data(self, data): pass
    def send_flowing_data(self, data): pass
    def send_literal_data(self, data): pass


class AbstractWriter(NullWriter):
    """A writer which can be used in debugging formatters, but not much else.

    Each method simply announces itself by printing its name and
    arguments on standard output.

    """

    def new_alignment(self, align):
        print "new_alignment(%s)" % `align`

    def new_font(self, font):
        print "new_font(%s)" % `font`

    def new_margin(self, margin, level):
        print "new_margin(%s, %d)" % (`margin`, level)

    def new_spacing(self, spacing):
        print "new_spacing(%s)" % `spacing`

    def new_styles(self, styles):
        print "new_styles(%s)" % `styles`

    def send_paragraph(self, blankline):
        print "send_paragraph(%s)" % `blankline`

    def send_line_break(self):
        print "send_line_break()"

    def send_hor_rule(self, *args, **kw):
        print "send_hor_rule()"

    def send_label_data(self, data):
        print "send_label_data(%s)" % `data`

    def send_flowing_data(self, data):
        print "send_flowing_data(%s)" % `data`

    def send_literal_data(self, data):
        print "send_literal_data(%s)" % `data`


class DumbWriter(NullWriter):
    """Simple writer class which writes output on the file object passed in
    as the file parameter or, if file is omitted, on standard output.  The
    output is simply word-wrapped to the number of columns specified by
    the maxcol parameter.  This class is suitable for reflowing a sequence
    of paragraphs.

    """

    def __init__(self, file=None, maxcol=72):
        self.file = file or sys.stdout
        self.maxcol = maxcol
        NullWriter.__init__(self)
        self.reset()

    def reset(self):
        self.col = 0
        self.atbreak = 0

    def send_paragraph(self, blankline):
        self.file.write('\n'*blankline)
        self.col = 0
        self.atbreak = 0

    def send_line_break(self):
        self.file.write('\n')
        self.col = 0
        self.atbreak = 0

    def send_hor_rule(self, *args, **kw):
        self.file.write('\n')
        self.file.write('-'*self.maxcol)
        self.file.write('\n')
        self.col = 0
        self.atbreak = 0

    def send_literal_data(self, data):
        self.file.write(data)
        i = data.rfind('\n')
        if i &gt;= 0:
            self.col = 0
            data = data[i+1:]
        data = data.expandtabs()
        self.col = self.col + len(data)
        self.atbreak = 0

    def send_flowing_data(self, data):
        if not data: return
        atbreak = self.atbreak or data[0].isspace()
        col = self.col
        maxcol = self.maxcol
        write = self.file.write
        for word in data.split():
            if atbreak:
                if col + len(word) &gt;= maxcol:
                    write('\n')
                    col = 0
                else:
                    write(' ')
                    col = col + 1
            write(word)
            col = col + len(word)
            atbreak = 1
        self.col = col
        self.atbreak = data[-1].isspace()


def test(file = None):
    w = DumbWriter()
    f = AbstractFormatter(w)
    if file is not None:
        fp = open(file)
    elif sys.argv[1:]:
        fp = open(sys.argv[1])
    else:
        fp = sys.stdin
    while 1:
        line = fp.readline()
        if not line:
            break
        if line == '\n':
            f.end_paragraph(1)
        else:
            f.add_flowing_data(line)
    f.end_paragraph(0)


if __name__ == '__main__':
    test()
'''

c.importCommands.pythonUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20161115063144.34"># Was unittest/at_auto-unit-test.py
if 0: # Preamble...
    # g.cls()
    if c.isChanged(): c.save()
    # import leo
    import leo.core.leoImport as leoImport
    import leo.plugins.importers.linescanner as linescanner
    import leo.plugins.importers.python
    # Reload all.
    import imp
    imp.reload(leo.plugins.importers.linescanner)
    imp.reload(leo.plugins.importers.python)
    imp.reload(leoImport)
    g.app.loadManager.createAllImporetersData()
    ic = leoImport.LeoImportCommands(c)
else:
    ic = c.importCommands

s = '''\
class class1:
    def class1_method1():
        pass
    def class1_method2():
        pass
    # After @others in child1.
class class2:
    def class2_method1():
        pass
    def class2_method2():
        pass
# last line
'''
table = (
    (1, 'class class1'),
    (2, 'class1_method1'),
    (2, 'class1_method2'),
    (1, 'class class2'),
    (2, 'class2_method1'),
    (2, 'class2_method2'),
)
try:
    test_node = p.copy()
    test_node.deleteAllChildren()
    ic.pythonUnitTest(p,s=s,showTree=True)
    after = p.nodeAfterTree()
    root = p.lastChild()
    assert root.h.startswith('@@'), root.h
    p = root.firstChild()
    if 1:
        for n, h in table:
            n2 = p.level() - root.level()
            assert h == p.h, (h, p.h)
            assert n == n2, (n, n2, p.h)
            p.moveToThreadNext()
        assert p == after, ('tree comp failed', p.h)
    if 1:
        test_node.deleteAllChildren()
finally:
    c.redraw()

</t>
<t tx="ekr.20161115063144.4">@tabwidth -4
    # Required when running unit tests externally.

# Leo bug 603720
# Within the docstring we must change '\' to '\\'
s = '''\
def foo():
    s = \\
"""#!/bin/bash
cd /tmp
ls"""
    file('/tmp/script', 'w').write(s)

class bar:
    pass

foo()
'''

tree = c.importCommands.pythonUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20161115063144.5">@tabwidth -4
    # Required when running unit tests externally.

s = '''\
class testClass2:
    pass
'''

tree = c.importCommands.pythonUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20161115063144.6">@tabwidth -4
    # Required when running unit tests externally.

s = '''\
class testClass1:
    """A docstring"""
    def __init__ (self):
        pass
    def f1(self):
        pass
'''

c.importCommands.pythonUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20161115063144.7">@tabwidth -4
    # Required when running unit tests externally.
if 0: # Preamble...
    # g.cls()
    if c.isChanged(): c.save()
    # import leo
    import leo.core.leoImport as leoImport
    import leo.plugins.importers.linescanner as linescanner
    import leo.plugins.importers.python
    # Reload all.
    import imp
    imp.reload(leo.plugins.importers.linescanner)
    imp.reload(leo.plugins.importers.python)
    imp.reload(leoImport)
    g.app.loadManager.createAllImporetersData()
    ic = leoImport.LeoImportCommands(c)
else:
    ic = c.importCommands  

s = '''\
NS = { 'i': 'http://www.inkscape.org/namespaces/inkscape',
      's': 'http://www.w3.org/2000/svg',
      'xlink' : 'http://www.w3.org/1999/xlink'}

tabLevels = 4  # number of defined tablevels, FIXME, could derive from template?
'''
table = (
    (1, 'Declarations'),
)
try:
    test_node = p.copy()
    test_node.deleteAllChildren()
    ic.pythonUnitTest(p,s=s,showTree=True)
    after = p.nodeAfterTree()
    root = p.lastChild()
    assert root.h.startswith('@@'), root.h
    p = root.firstChild()
    if 1:
        for n, h in table:
            n2 = p.level() - root.level()
            assert h == p.h, (h, p.h)
            assert n == n2, (n, n2, p.h)
            p.moveToThreadNext()
        assert p == after, ('tree comp failed', p.h)
    test_node.deleteAllChildren()
finally:
    c.redraw()
</t>
<t tx="ekr.20161115063144.8">@tabwidth -4
    # Required when running unit tests externally.
if 0: # Preamble...
    # g.cls()
    if c.isChanged(): c.save()
    # import leo
    import leo.core.leoImport as leoImport
    import leo.plugins.importers.linescanner as linescanner
    import leo.plugins.importers.python
    # Reload all.
    import imp
    imp.reload(leo.plugins.importers.linescanner)
    imp.reload(leo.plugins.importers.python)
    imp.reload(leoImport)
    g.app.loadManager.createAllImporetersData()
    ic = leoImport.LeoImportCommands(c)
else:
    ic = c.importCommands  

s = '''\
import leo.core.leoGlobals as g

a = 3
'''
table = (
    (1, 'Declarations'),
)
try:
    test_node = p.copy()
    test_node.deleteAllChildren()
    ic.pythonUnitTest(p,s=s,showTree=True)
    after = p.nodeAfterTree()
    root = p.lastChild()
    assert root.h.startswith('@@'), root.h
    p = root.firstChild()
    if 1:
        for n, h in table:
            n2 = p.level() - root.level()
            assert h == p.h, (h, p.h)
            assert n == n2, (n, n2, p.h)
            p.moveToThreadNext()
        assert p == after, ('tree comp failed', p.h)
    test_node.deleteAllChildren()
finally:
    c.redraw()
</t>
<t tx="ekr.20161115063144.9">@tabwidth -4
    # Required when running unit tests externally.

s = '''\
class Index:
    """docstring"""
    @cherrypy.nocolor
    @cherrypy.expose
    def index(self):
        return "Hello world!"
        
    @cmd('abc')
    def abc(self):
        return "abc"
'''

try:
    c.importCommands.pythonUnitTest(p,s=s,showTree=True) # Must be true.
    index = g.findNodeInTree(c, p, '@cherrypy.nocolor index')
    assert index
    lines = g.splitLines(index.b)
    assert lines[0] == '@cherrypy.nocolor\n', repr(lines[0])
    assert lines[1] == '@cherrypy.expose\n', repr(lines[1])
    abc = g.findNodeInTree(c,p, "@cmd('abc') abc")
    lines = g.splitLines(abc.b)
    assert lines[0] == "@cmd('abc')\n", repr(lines[0])
    if 1:
        p.deleteAllChildren()
finally:
    c.redraw()
</t>
<t tx="ekr.20161115092708.1"># g.cls()
import leo.plugins.importers.python as python
# import imp
# imp.reload(python)
# A list of dictionaries.
if 0:
    tests = [
        # g.Bunch(line='s = "\\""', ctx=('', '')),
        g.Bunch(line='\\\n'),
    ]
else:
    tests = [
        g.Bunch(line='\n'),
        g.Bunch(line='\\\n'),
        g.Bunch(line='s = "\\""', ctx=('', '')), # empty string.
        g.Bunch(line="s = '\\''", ctx=('', '')), # empty string.
        g.Bunch(line='# comment'),
        g.Bunch(line='  # comment'),
        g.Bunch(line='    # comment'),
        g.Bunch(line='a = "string"'),
        g.Bunch(line='a = "Continued string', ctx=('', '"')),
        g.Bunch(line='end of continued string"', ctx=('"', '')),
        g.Bunch(line='a = """Continued docstring', ctx=('', '"""')),
        g.Bunch(line='a = """#', ctx=('', '"""')),
        g.Bunch(line='end of continued string"""', ctx=('"""', '')),
        g.Bunch(line="a = '''Continued docstring", ctx=('', "'''")),
        g.Bunch(line="end of continued string'''", ctx=("'''", '')),
        g.Bunch(line='a = {[(')
    ]
if hasattr(python, 'Py_Importer'):
    importer = python.Py_Importer(c.importCommands)
    importer.test_scan_state(tests, State=python.Python_ScanState)
else:
    self.skipTest('Skipping test for new python importer')
</t>
<t tx="ekr.20161117000902.1">if 0: # Preamble...
    # g.cls()
    if c.isChanged(): c.save()
    # import leo
    import leo.core.leoImport as leoImport
    import leo.plugins.importers.linescanner as linescanner
    import leo.plugins.importers.python
    # Reload all.
    import imp
    imp.reload(leo.plugins.importers.linescanner)
    imp.reload(leo.plugins.importers.python)
    imp.reload(leoImport)
    g.app.loadManager.createAllImporetersData()
    ic = leoImport.LeoImportCommands(c)
else:
    ic = c.importCommands

s = """\
# -*- coding: utf-8 -*-
import leo.core.leoGlobals as g
class LeoImportCommands(object):
    '''A class implementing all of Leo's import/export code.'''
    def createOutline(self, fileName, parent, s=None, ext=None):
        '''Create an outline by importing a file or string.'''

    def dispatch(self, ext, p):
        '''Return the correct scanner function for p, an @auto node.'''
        # Match the @auto type first, then the file extension.
        return self.scanner_for_at_auto(p) or self.scanner_for_ext(ext)
    def scanner_for_at_auto(self, p):
        '''A factory returning a scanner function for p, an @auto node.'''
        d = self.atAutoDict
        for key in d.keys():
            aClass = d.get(key)
            if aClass and g.match_word(p.h, 0, key):
                if trace: g.trace('found', aClass.__name__)

                def scanner_for_at_auto_cb(parent, s, prepass=False):
                    try:
                        scanner = aClass(importCommands=self)
                        return scanner.run(s, parent, prepass=prepass)
                    except Exception:
                        g.es_print('Exception running', aClass.__name__)
                        g.es_exception()
                        return None

                if trace: g.trace('found', p.h)
                return scanner_for_at_auto_cb
        if trace: g.trace('not found', p.h, sorted(d.keys()))
        return None
    def scanner_for_ext(self, ext):
        '''A factory returning a scanner function for the given file extension.'''
        aClass = self.classDispatchDict.get(ext)
        if aClass:

            def scanner_for_ext_cb(parent, s, prepass=False):
                try:
                    scanner = aClass(importCommands=self)
                    return scanner.run(s, parent, prepass=prepass)
                except Exception:
                    g.es_print('Exception running', aClass.__name__)
                    g.es_exception()
                    return None

            return scanner_for_ext_cb
        else:
            return None
    def get_import_filename(self, fileName, parent):
        '''Return the absolute path of the file and set .default_directory.'''

    def init_import(self, ext, fileName, s):
        '''Init ivars &amp; vars for imports.'''
"""
table = (
    (1, 'Declarations'),
    (1, "class LeoImportCommands"),
    (2, "createOutline"),
    (2, "dispatch"),
    (2, "scanner_for_at_auto"),
    (2, "scanner_for_ext"),
    (2, "get_import_filename"),
    (2, "init_import"),
)
try:
    test_node = p.copy()
    test_node.deleteAllChildren()
    ic.pythonUnitTest(p,s=s,showTree=True)
    after = p.nodeAfterTree()
    root = p.lastChild()
    assert root.h.startswith('@@'), root.h
    p = root.firstChild()
    if 1:
        for n, h in table:
            n2 = p.level() - root.level()
            assert h == p.h, (h, p.h)
            assert n == n2, (n, n2, p.h)
            p.moveToThreadNext()
        assert p == after, ('tree comp failed', p.h)
    test_node.deleteAllChildren()
finally:
    c.redraw()
</t>
<t tx="ekr.20161117011147.1">import leo.plugins.importers.linescanner as linescanner
table = [
    ('', 'abc\n'),
    ('    ', '    xyz\n'),
    ('    ', '    \n'),
    ('  ','  # comment\n'),
    ('', '\n'),
]
importer = linescanner.Importer(c.importCommands, language='python')
for val, s in table:
    assert val == importer.get_str_lws(s), (val, repr(s))
</t>
<t tx="ekr.20161118144658.1">@tabwidth -2 # Required

s = r'''
class Builder
  constructor: -&gt;
    @transformer = new Transformer
  # `build()`

  build: (args...) -&gt;
    node = args[0]
    @transform node

    name = 'other'
    name = node.typeName()  if node != undefined and node.typeName

    fn  = (@[name] or @other)
    out = fn.apply(this, args)

    if node.parenthesized then paren(out) else out
  # `transform()`

  transform: (args...) -&gt;
    @transformer.transform.apply(@transformer, args)

  # `body()`

  body: (node, opts={}) -&gt;
    str = @build(node, opts)
    str = blockTrim(str)
    str = unshift(str)
    if str.length &gt; 0 then str else ""
'''
table = (
  'class Builder',
  'constructor: -&gt;',
  'build: (args...) -&gt;',
  'transform: (args...) -&gt;',
  'body: (node, opts={}) -&gt;',
)
try:
    c.importCommands.coffeeScriptUnitTest(p,s=s,showTree=True)
    if 1:
      p2 = c.p.firstChild().firstChild()
      for h in table:
          assert p2.h == h, (p2.h, h)
          p2.moveToThreadNext()
finally:
    if 1:
        p.deleteAllChildren()
        c.redraw()
</t>
<t tx="ekr.20161119031833.1"># ('len',   'tr///', '/',       context,  0,       0,       0),
# ('len',   's///',  '/',       context,  0,       0,       0),
# ('len',   'm//',   '/',       context,  0,       0,       0),
# ('len',   '/',     '/',       '',       0,       0,       0),

s = '''\
#!/usr/bin/perl

sub test1 {
    s = /{/g;
}

sub test2 {
    s = m//{/;
}

sub test3 {
    s = s///{/;
}

sub test4 {
    s = tr///{/;
}
'''
try:
    c.importCommands.perlUnitTest(p,s=s,showTree=True)
finally:
    if 1:
        p.deleteAllChildren()
        c.redraw()
</t>
<t tx="ekr.20161119032623.1">if 0:
    # The preamble...
    # g.cls()
    if c.isChanged(): c.save()
    # import leo
    import leo.core.leoImport as leoImport
    import leo.plugins.importers.linescanner as linescanner
    import leo.plugins.importers.perl
    # Reload all.
    import imp
    imp.reload(leo.plugins.importers.linescanner)
    imp.reload(leo.plugins.importers.perl)
    imp.reload(leoImport)
    g.app.loadManager.createAllImporetersData()
    ic = leoImport.LeoImportCommands(c)
else:
    ic = c.importCommands

s = '''\
#!/usr/bin/perl

sub test1 {
    s = /}/g;
}

sub test2 {
    s = m//}/;
}

sub test3 {
    s = s///}/;
}

sub test4 {
    s = tr///}/;
}
'''
table = (
    'sub test1',
    'sub test2',
    'sub test3',
    'sub test4'
)
try:
    ic.perlUnitTest(p,s=s,showTree=True)
    if 1:
        root = c.p.lastChild()
        assert root.h.startswith('@@'), root.h
        p2 = root.firstChild()
        for h in table:
            assert p2.h == h, (p2.h, h)
            p2.moveToThreadNext()
        assert not root.isAncestorOf(p2), p2.h # Extra nodes
finally:
    if 1:
        p.deleteAllChildren()
        c.redraw()
</t>
<t tx="ekr.20161123080832.1">'''
Create a table of expected headlines in a unit test.

Usage: select the desired subnode of an @test node.
'''
g.cls()
# Proper escapes are tricky.
if p.parent() and p.parent().h.startswith('@test'):
    table = [
        '(%s, "%s"),' % (
            p.level()-c.p.level(),
            p.h.replace('\\', '\\\\').replace('"', '\\"'),
        )
            for p in p.subtree()
    ]
    print("table = (\n    %s\n)" % '\n    '.join(table))
else:
    print('select a child of an @test node node')</t>
<t tx="ekr.20161123115047.1"></t>
<t tx="ekr.20161123120652.1">s = r'''
var name = 'Bob';

hello() {
  print('Hello, World!');
}

// Define a function.
printNumber(num aNumber) {
  print('The number is $aNumber.'); // Print to console.
}

// This is where the app starts executing.
void main() {
  var number = 42; // Declare and initialize a variable.
  printNumber(number); // Call a function.
}
'''
table = (
    'hello',
    'printNumber',
    'void main',
)
try:
    c.importCommands.dartUnitTest(p,s=s,showTree=True)
    root = c.p.firstChild()
    p2 = root.firstChild()
    for h in table:
        assert p2.h == h, (p2.h, h)
        p2.moveToThreadNext()
    assert not root.isAncestorOf(p2), p2.h # Extra nodes
finally:
    if 1:
        p.deleteAllChildren()
        c.redraw()
</t>
<t tx="ekr.20161123202857.1"></t>
<t tx="ekr.20161123202924.1">s = '''\
* Section 1
Sec 1.
* Section 2
Sec 2.
** Section 2-1
Sec 2.1
*** Section 2-1-1
Sec 2.1.1
* Section 3
** Section 3.1
Sec 3.1
'''
table = (
    'Section 1',
    'Section 2', 'Section 2-1', 'Section 2-1-1',
    'Section 3', 'Section 3.1',
)
try:
    c.importCommands.orgUnitTest(p,s=s,showTree=True)
    if 1:
        root = c.p.firstChild()
        p2 = root.firstChild()
        for h in table:
            assert p2.h == h, (p2.h, h)
            p2.moveToThreadNext()
        assert not root.isAncestorOf(p2), p2.h # Extra nodes
finally:
    if 1:
        p.deleteAllChildren()
    c.redraw()
</t>
<t tx="ekr.20161124040933.1"></t>
<t tx="ekr.20161124040933.2">@tabwidth 4 # Required
s = '''\
preamble.
Section 1
: Sec 1.
Section 2
: Sec 2.
\tSection 2-1
: Sec 2-1
\t\tSection 2-1-1
: Sect 2-1-1
Section 3
: Sec 3
\tSection 3.1
: Sec 3.1
'''
table = (
    'Section 1',
    'Section 2', 'Section 2-1', 'Section 2-1-1',
    'Section 3', 'Section 3.1',
)
try:
    c.importCommands.otlUnitTest(p,s=s,showTree=True)
    if 0:
        root = c.p.firstChild()
        p2 = root.firstChild()
        for h in table:
            assert p2.h == h, (p2.h, h)
            p2.moveToThreadNext()
        assert not root.isAncestorOf(p2), p2.h # Extra nodes
finally:
    if 1:
        p.deleteAllChildren()
        c.redraw()
</t>
<t tx="ekr.20161125134815.1">if 0:
    # The preamble...
    # g.cls()
    if c.isChanged(): c.save()
    # import leo
    import leo.core.leoImport as leoImport
    import leo.plugins.importers.linescanner as linescanner
    import leo.plugins.importers.markdown
    # import leo.plugins.writers.markdown
    # Reload all.
    import imp
    imp.reload(leo.plugins.importers.linescanner)
    imp.reload(leo.plugins.importers.markdown)
    # imp.reload(leo.plugins.writers.markdown)
    imp.reload(leoImport)
    markdown = leo.plugins.importers.markdown
    g.app.loadManager.createAllImporetersData()
    ic = leoImport.LeoImportCommands(c)
else:
    ic = c.importCommands  
# insert test for markdown here.
s = '''\
Decl line.
#Header

After header text

##Subheader

Not an underline

----------------

After subheader text

#Last header: no text
'''
table = (
    '!Declarations',
    'Header',
        'Subheader',
        'Last header: no text',
)
try:
    ic.markdownUnitTest(p,s=s,showTree=True)
    if 1:
        root = c.p.lastChild()
        assert root.h.startswith('@@auto-m'), root.h
        p2 = root.firstChild()
        for h in table:
            assert p2.h == h, (p2.h, h)
            p2.moveToThreadNext()
        assert not root.isAncestorOf(p2), p2.h # Extra nodes
finally:
    if 1:
        p.deleteAllChildren()
        c.redraw()
</t>
<t tx="ekr.20161125230415.1">s = '''\
Top
====

The top section

Section 1
---------

section 1, line 1
-- Not an underline
secttion 1, line 2

Section 2
---------

section 2, line 1

###Section 2.1

section 2.1, line 1

####Section 2.1.1

section 2.2.1 line 1

###Section 2.2
section 2.2, line 1.

Section 3
---------

section 3, line 1

'''
</t>
<t tx="ekr.20161126111517.1">if 0:
    # The preamble...
    # g.cls()
    if c.isChanged(): c.save()
    # import leo
    import leo.core.leoImport as leoImport
    import leo.plugins.importers.linescanner as linescanner
    import leo.plugins.importers.markdown
    # import leo.plugins.writers.markdown
    # Reload all.
    import imp
    imp.reload(leo.plugins.importers.linescanner)
    imp.reload(leo.plugins.importers.markdown)
    # imp.reload(leo.plugins.writers.markdown)
    imp.reload(leoImport)
    markdown = leo.plugins.importers.markdown
    g.app.loadManager.createAllImporetersData()
    ic = leoImport.LeoImportCommands(c)
else:
    ic = c.importCommands  
# insert test for markdown here.
s = '''\
Decl line.
#Header

After header text

##Subheader

Not an underline

----------------

This *should* be a section
==========================

After subheader text

#Last header: no text
'''
table = (
    '!Declarations',
    'Header',
        'Subheader',
            'This *should* be a section',
        'Last header: no text',
)
try:
    g.app.suppressImportChecks = True
        # Required, because the implicit underlining *must*
        # cause the perfect-import test to fail!
    ic.markdownUnitTest(p,s=s,showTree=True)
    if 1:
        root = c.p.lastChild()
        assert root.h.startswith('@@auto-m'), root.h
        p2 = root.firstChild()
        for h in table:
            assert p2.h == h, (p2.h, h)
            p2.moveToThreadNext()
        assert not root.isAncestorOf(p2), p2.h # Extra nodes
finally:
    g.app.suppressImportChecks = False
        # Not needed: done in Importer.check
    if 1:
        p.deleteAllChildren()
        c.redraw()
</t>
<t tx="ekr.20161127181028.1">@first # -*- coding: utf-8 -*-
    # Required (Python 2 only) because test contains ```.
if 0:
    # The preamble...
    # g.cls()
    if c.isChanged(): c.save()
    # import leo
    import leo.core.leoImport as leoImport
    import leo.plugins.importers.linescanner as linescanner
    import leo.plugins.importers.markdown
    # import leo.plugins.writers.markdown
    # Reload all.
    import imp
    imp.reload(leo.plugins.importers.linescanner)
    imp.reload(leo.plugins.importers.markdown)
    # imp.reload(leo.plugins.writers.markdown)
    imp.reload(leoImport)
    markdown = leo.plugins.importers.markdown
    g.app.loadManager.createAllImporetersData()
    ic = leoImport.LeoImportCommands(c)
else:
    ic = c.importCommands  
# insert test for markdown here.
s = '''\
Decl line.
#Header

`​``python
loads.init = {
    Chloride: 11.5,
    TotalP: 0.002,
}
`​``
#Last header
'''
table = (
    '!Declarations',
    'Header',
    'Last header',
)
try:
    ic.markdownUnitTest(p,s=s,showTree=True)
    if 1:
        root = c.p.lastChild()
        assert root.h.startswith('@@'), root.h
        p2 = root.firstChild()
        for h in table:
            assert p2.h == h, (p2.h, h)
            p2.moveToThreadNext()
        assert not root.isAncestorOf(p2), p2.h # Extra nodes
finally:
    if 1:
        p.deleteAllChildren()
        c.redraw()
</t>
<t tx="ekr.20161129030232.1"></t>
<t tx="ekr.20161129104243.1">import leo.core.leoImport as leoImport
if leoImport.docutils is None:
    self.skipTest('no docutils')

if 0:
    # The preamble...
    # g.cls()
    if c.isChanged(): c.save()
    import leo
    import leo.core.leoImport as leoImport
    import leo.plugins.importers.linescanner as linescanner
    import leo.plugins.importers.leo_rst as leo_rst
    # Reload all.
    import imp
    imp.reload(leo.plugins.importers.linescanner)
    imp.reload(leo.plugins.importers.leo_rst)
    imp.reload(leoImport)
    g.app.loadManager.createAllImporetersData()
    ic = leoImport.LeoImportCommands(c)
else:
    ic = c.importCommands

# Notes:
# All heading must be followed by an empty line.
### g.app.suppressImportChecks = True
s = '''\
  #########
Chapter 1
  #########

It was a dark and stormy night.
section 1
+++++++++

Sec 1.
section 2
+++++++++

Sec 2.
'''
table = (
    '!Dummy chapter',
    'section 1',
    'section 2',
)
try:
    ic.rstUnitTest(p,s=s,showTree=True)
    if 1:
        root = c.p.lastChild()
        assert root.h.startswith('@@'), root.h
        p2 = root.firstChild()
        for h in table:
            assert p2.h == h, (p2.h, h)
            p2.moveToThreadNext()
        assert not root.isAncestorOf(p2), p2.h # Extra nodes
finally:
    if 1:
        p.deleteAllChildren()
        c.redraw()
</t>
<t tx="ekr.20161129222003.1">s = '''\
&lt;?php
class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
'''

c.importCommands.phpUnitTest(p,s=s,showTree=True)
</t>
<t tx="ekr.20161130041921.1">#section 1
Sec 1.

#section 2
Sec 2.
@language python
@tabwidth -4
@ignore
</t>
<t tx="ekr.20161130042452.50">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161130042452.51">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20161130050706.29">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161130050706.30">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20161130051657.1">s = '''\
Leading text in root node of subtree

Etc. etc.

### A level one node ######################################################

This would be the text in this level one node.

And this.

### Another level one node ################################################

Another one

#### A level 2 node #######################################################

See what we did there - one more '#' - this is a subnode.
'''
ic = c.importCommands
ic.ctextUnitTest(p,fileName='@auto-ctext test.txt',s=s,showTree=True)</t>
<t tx="ekr.20161130052935.1">Leading text in root node of subtree

Etc. etc.
</t>
<t tx="ekr.20161130053149.1">Leading text in root node of subtree

Etc. etc.

### A level one node ######################################################

This would be the text in this level one node.

And this.

### Another level one node ################################################

Another one

#### A level 2 node #######################################################

See what we did there - one more '#' - this is a subnode.

</t>
<t tx="ekr.20161202053644.21">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161202053644.22">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20161202083956.10">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161202083956.11">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20161202093319.1">@others

Warning: this node is ignored when writing this file.

@language md
@tabwidth -4
</t>
<t tx="ekr.20161202093319.2">
The top section

</t>
<t tx="ekr.20161202093319.3">
section 1, line 1
-- Not an underline
secttion 1, line 2

</t>
<t tx="ekr.20161202093319.4">
section 2, line 1

</t>
<t tx="ekr.20161202093319.5">
section 2.1, line 1

</t>
<t tx="ekr.20161202093319.6">
section 2.2.1 line 1

</t>
<t tx="ekr.20161202093319.7">section 2.2, line 1.

</t>
<t tx="ekr.20161202093319.8">
section 3, line 1

</t>
<t tx="ekr.20161202093322.10">
The top section

</t>
<t tx="ekr.20161202093322.11">
section 1, line 1
-- Not an underline
secttion 1, line 2

</t>
<t tx="ekr.20161202093322.12">
section 2, line 1

</t>
<t tx="ekr.20161202093322.13">
section 2.1, line 1

</t>
<t tx="ekr.20161202093322.14">
section 2.2.1 line 1

</t>
<t tx="ekr.20161202093322.15">section 2.2, line 1.

</t>
<t tx="ekr.20161202093322.16">
section 3, line 1

</t>
<t tx="ekr.20161202093322.9">@others

Warning: this node is ignored when writing this file.

@language md
@tabwidth -4
</t>
<t tx="ekr.20161202093409.1">@others

Warning: this node is ignored when writing this file.

@language md
@tabwidth -4
</t>
<t tx="ekr.20161202093409.2">
The top section

</t>
<t tx="ekr.20161202093409.3">
section 1, line 1
-- Not an underline
secttion 1, line 2

</t>
<t tx="ekr.20161202093409.4">
section 2, line 1

</t>
<t tx="ekr.20161202093409.5">
section 2.1, line 1

</t>
<t tx="ekr.20161202093409.6">
section 2.2.1 line 1

</t>
<t tx="ekr.20161202093409.7">section 2.2, line 1.

</t>
<t tx="ekr.20161202093409.8">
section 3, line 1

</t>
<t tx="ekr.20161202093410.1">@others

Warning: this node is ignored when writing this file.

@language md
@tabwidth -4
</t>
<t tx="ekr.20161202093410.2">
The top section

</t>
<t tx="ekr.20161202093410.3">
section 1, line 1
-- Not an underline
secttion 1, line 2

</t>
<t tx="ekr.20161202093410.4">
section 2, line 1

</t>
<t tx="ekr.20161202093410.5">
section 2.1, line 1

</t>
<t tx="ekr.20161202093410.6">
section 2.2.1 line 1

</t>
<t tx="ekr.20161202093410.7">section 2.2, line 1.

</t>
<t tx="ekr.20161202093410.8">
section 3, line 1

</t>
<t tx="ekr.20161202093505.10">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161202093505.11">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20161202093509.22">@others

Warning: this node is ignored when writing this file.

@language md
@tabwidth -4
</t>
<t tx="ekr.20161202093509.23">
The top section

</t>
<t tx="ekr.20161202093509.24">
section 1, line 1
-- Not an underline
secttion 1, line 2

</t>
<t tx="ekr.20161202093509.25">
section 2, line 1

</t>
<t tx="ekr.20161202093509.26">
section 2.1, line 1

</t>
<t tx="ekr.20161202093509.27">
section 2.2.1 line 1

</t>
<t tx="ekr.20161202093509.28">section 2.2, line 1.

</t>
<t tx="ekr.20161202093509.29">
section 3, line 1

</t>
<t tx="ekr.20161202093709.1">@others

Warning: this node is ignored when writing this file.

@language md
@tabwidth -4
</t>
<t tx="ekr.20161202093709.2">#Top
The top section

</t>
<t tx="ekr.20161202093709.3">section 1, line 1
section 1, line 2

</t>
<t tx="ekr.20161202093709.4">section 2, line 1

</t>
<t tx="ekr.20161202093709.5">section 2.1, line 1

</t>
<t tx="ekr.20161202093709.6">section 2.2.1 line 1
The next section is empty. It must not be deleted.

</t>
<t tx="ekr.20161202093709.7">
</t>
<t tx="ekr.20161202093709.8">Section 3, line 1

</t>
<t tx="ekr.20161204034138.15">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161204034138.16">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20161204034142.19">@others

Warning: this node is ignored when writing this file.

@language md
@tabwidth -4
</t>
<t tx="ekr.20161204034142.20">The top section

</t>
<t tx="ekr.20161204034142.21">section 1, line 1
section 1, line 2

</t>
<t tx="ekr.20161204034142.22">section 2, line 1

</t>
<t tx="ekr.20161204034142.23">section 2.1, line 1

</t>
<t tx="ekr.20161204034142.24">section 2.2.1 line 1
The next section is empty. It must not be deleted.

</t>
<t tx="ekr.20161204034142.25">
</t>
<t tx="ekr.20161204034142.26">Section 3, line 1

</t>
<t tx="ekr.20161204034142.27">@others

Warning: this node is ignored when writing this file.

@language md
@tabwidth -4
</t>
<t tx="ekr.20161204034142.28">
The top section

</t>
<t tx="ekr.20161204034142.29">
section 1, line 1
-- Not an underline
secttion 1, line 2

</t>
<t tx="ekr.20161204034142.30">
section 2, line 1

</t>
<t tx="ekr.20161204034142.31">
section 2.1, line 1

</t>
<t tx="ekr.20161204034142.32">
section 2.2.1 line 1

</t>
<t tx="ekr.20161204034142.33">section 2.2, line 1.

</t>
<t tx="ekr.20161204034142.34">
section 3, line 1

</t>
<t tx="ekr.20161204034207.1">@others

Warning: this node is ignored when writing this file.

@language md
@tabwidth -4
</t>
<t tx="ekr.20161204034207.10">
The top section

</t>
<t tx="ekr.20161204034207.11">
section 1, line 1
-- Not an underline
secttion 1, line 2

</t>
<t tx="ekr.20161204034207.12">
section 2, line 1

</t>
<t tx="ekr.20161204034207.13">
section 2.1, line 1

</t>
<t tx="ekr.20161204034207.14">
section 2.2.1 line 1

</t>
<t tx="ekr.20161204034207.15">section 2.2, line 1.

</t>
<t tx="ekr.20161204034207.16">
section 3, line 1

</t>
<t tx="ekr.20161204034207.2">The top section

</t>
<t tx="ekr.20161204034207.3">section 1, line 1
section 1, line 2

</t>
<t tx="ekr.20161204034207.4">section 2, line 1

</t>
<t tx="ekr.20161204034207.5">section 2.1, line 1

</t>
<t tx="ekr.20161204034207.6">section 2.2.1 line 1
The next section is empty. It must not be deleted.

</t>
<t tx="ekr.20161204034207.7">
</t>
<t tx="ekr.20161204034207.8">Section 3, line 1

</t>
<t tx="ekr.20161204034207.9">@others

Warning: this node is ignored when writing this file.

@language md
@tabwidth -4
</t>
<t tx="ekr.20161204035447.20">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161204035447.21">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20161204035451.19">@others

Warning: this node is ignored when writing this file.

@language md
@tabwidth -4
</t>
<t tx="ekr.20161204035451.20">The top section

</t>
<t tx="ekr.20161204035451.21">section 1, line 1
section 1, line 2

</t>
<t tx="ekr.20161204035451.22">section 2, line 1

</t>
<t tx="ekr.20161204035451.23">section 2.1, line 1

</t>
<t tx="ekr.20161204035451.24">section 2.2.1 line 1
The next section is empty. It must not be deleted.

</t>
<t tx="ekr.20161204035451.25">
</t>
<t tx="ekr.20161204035451.26">Section 3, line 1

</t>
<t tx="ekr.20161204035451.27">@others

Warning: this node is ignored when writing this file.

@language md
@tabwidth -4
</t>
<t tx="ekr.20161204035451.28">
The top section

</t>
<t tx="ekr.20161204035451.29">
section 1, line 1
-- Not an underline
secttion 1, line 2

</t>
<t tx="ekr.20161204035451.30">
section 2, line 1

</t>
<t tx="ekr.20161204035451.31">
section 2.1, line 1

</t>
<t tx="ekr.20161204035451.32">
section 2.2.1 line 1

</t>
<t tx="ekr.20161204035451.33">section 2.2, line 1.

</t>
<t tx="ekr.20161204035451.34">
section 3, line 1

</t>
<t tx="ekr.20161204040924.1"># Alt-G works.  The tests themselves are erroneous.
</t>
<t tx="ekr.20161204041306.21">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161204041306.22">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20161204041310.53">@others

Warning: this node is ignored when writing this file.

@language md
@tabwidth -4
</t>
<t tx="ekr.20161204041310.54">The top section

</t>
<t tx="ekr.20161204041310.55">section 1, line 1
section 1, line 2

</t>
<t tx="ekr.20161204041310.56">section 2, line 1

</t>
<t tx="ekr.20161204041310.57">section 2.1, line 1

</t>
<t tx="ekr.20161204041310.58">section 2.2.1 line 1
The next section is empty. It must not be deleted.

</t>
<t tx="ekr.20161204041310.59">
</t>
<t tx="ekr.20161204041310.60">Section 3, line 1

</t>
<t tx="ekr.20161204041310.61">@others

Warning: this node is ignored when writing this file.

@language md
@tabwidth -4
</t>
<t tx="ekr.20161204041310.62">
The top section

</t>
<t tx="ekr.20161204041310.63">
section 1, line 1
-- Not an underline
secttion 1, line 2

</t>
<t tx="ekr.20161204041310.64">
section 2, line 1

</t>
<t tx="ekr.20161204041310.65">
section 2.1, line 1

</t>
<t tx="ekr.20161204041310.66">
section 2.2.1 line 1

</t>
<t tx="ekr.20161204041310.67">section 2.2, line 1.

</t>
<t tx="ekr.20161204041310.68">
section 3, line 1

</t>
<t tx="ekr.20161204041354.25">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161204041354.26">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20161204041358.103">@others

Warning: this node is ignored when writing this file.

@language md
@tabwidth -4
</t>
<t tx="ekr.20161204041358.104">The top section

</t>
<t tx="ekr.20161204041358.105">section 1, line 1
section 1, line 2

</t>
<t tx="ekr.20161204041358.106">section 2, line 1

</t>
<t tx="ekr.20161204041358.107">section 2.1, line 1

</t>
<t tx="ekr.20161204041358.108">section 2.2.1 line 1
The next section is empty. It must not be deleted.

</t>
<t tx="ekr.20161204041358.109">
</t>
<t tx="ekr.20161204041358.110">Section 3, line 1

</t>
<t tx="ekr.20161204041359.1">@others

Warning: this node is ignored when writing this file.

@language md
@tabwidth -4
</t>
<t tx="ekr.20161204041359.2">
The top section

</t>
<t tx="ekr.20161204041359.3">
section 1, line 1
-- Not an underline
secttion 1, line 2

</t>
<t tx="ekr.20161204041359.4">
section 2, line 1

</t>
<t tx="ekr.20161204041359.5">
section 2.1, line 1

</t>
<t tx="ekr.20161204041359.6">
section 2.2.1 line 1

</t>
<t tx="ekr.20161204041359.7">section 2.2, line 1.

</t>
<t tx="ekr.20161204041359.8">
section 3, line 1

</t>
<t tx="ekr.20161204041418.1">@others

Warning: this node is ignored when writing this file.

@language md
@tabwidth -4
</t>
<t tx="ekr.20161204041418.10">
The top section

</t>
<t tx="ekr.20161204041418.11">
section 1, line 1
-- Not an underline
secttion 1, line 2

</t>
<t tx="ekr.20161204041418.12">
section 2, line 1

</t>
<t tx="ekr.20161204041418.13">
section 2.1, line 1

</t>
<t tx="ekr.20161204041418.14">
section 2.2.1 line 1

</t>
<t tx="ekr.20161204041418.15">section 2.2, line 1.

</t>
<t tx="ekr.20161204041418.16">
section 3, line 1

</t>
<t tx="ekr.20161204041418.2">The top section

</t>
<t tx="ekr.20161204041418.3">section 1, line 1
section 1, line 2

</t>
<t tx="ekr.20161204041418.4">section 2, line 1

</t>
<t tx="ekr.20161204041418.5">section 2.1, line 1

</t>
<t tx="ekr.20161204041418.6">section 2.2.1 line 1
The next section is empty. It must not be deleted.

</t>
<t tx="ekr.20161204041418.7">
</t>
<t tx="ekr.20161204041418.8">Section 3, line 1

</t>
<t tx="ekr.20161204041418.9">@others

Warning: this node is ignored when writing this file.

@language md
@tabwidth -4
</t>
<t tx="ekr.20161204041426.33">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161204041426.34">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20161204041557.1"></t>
<t tx="ekr.20161204041641.25">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161204041641.26">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20161204041645.103">@others

Warning: this node is ignored when writing this file.

@language md
@tabwidth -4
</t>
<t tx="ekr.20161204041645.104">The top section

</t>
<t tx="ekr.20161204041645.105">section 1, line 1
section 1, line 2

</t>
<t tx="ekr.20161204041645.106">section 2, line 1

</t>
<t tx="ekr.20161204041645.107">section 2.1, line 1

</t>
<t tx="ekr.20161204041645.108">section 2.2.1 line 1
The next section is empty. It must not be deleted.

</t>
<t tx="ekr.20161204041645.109">
</t>
<t tx="ekr.20161204041645.110">Section 3, line 1

</t>
<t tx="ekr.20161204041646.1">@others

Warning: this node is ignored when writing this file.

@language md
@tabwidth -4
</t>
<t tx="ekr.20161204041646.2">
The top section

</t>
<t tx="ekr.20161204041646.3">
section 1, line 1
-- Not an underline
secttion 1, line 2

</t>
<t tx="ekr.20161204041646.4">
section 2, line 1

</t>
<t tx="ekr.20161204041646.5">
section 2.1, line 1

</t>
<t tx="ekr.20161204041646.6">
section 2.2.1 line 1

</t>
<t tx="ekr.20161204041646.7">section 2.2, line 1.

</t>
<t tx="ekr.20161204041646.8">
section 3, line 1

</t>
<t tx="ekr.20161204041720.21">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161204041720.22">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20161204041724.1">@others

Warning: this node is ignored when writing this file.

@language md
@tabwidth -4
</t>
<t tx="ekr.20161204041724.10">
The top section

</t>
<t tx="ekr.20161204041724.11">
section 1, line 1
-- Not an underline
secttion 1, line 2

</t>
<t tx="ekr.20161204041724.12">
section 2, line 1

</t>
<t tx="ekr.20161204041724.13">
section 2.1, line 1

</t>
<t tx="ekr.20161204041724.14">
section 2.2.1 line 1

</t>
<t tx="ekr.20161204041724.15">section 2.2, line 1.

</t>
<t tx="ekr.20161204041724.16">
section 3, line 1

</t>
<t tx="ekr.20161204041724.2">The top section

</t>
<t tx="ekr.20161204041724.3">section 1, line 1
section 1, line 2

</t>
<t tx="ekr.20161204041724.4">section 2, line 1

</t>
<t tx="ekr.20161204041724.5">section 2.1, line 1

</t>
<t tx="ekr.20161204041724.6">section 2.2.1 line 1
The next section is empty. It must not be deleted.

</t>
<t tx="ekr.20161204041724.7">
</t>
<t tx="ekr.20161204041724.8">Section 3, line 1

</t>
<t tx="ekr.20161204041724.9">@others

Warning: this node is ignored when writing this file.

@language md
@tabwidth -4
</t>
<t tx="ekr.20161204041755.29">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161204041755.30">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20161204041800.1">@others

Warning: this node is ignored when writing this file.

@language md
@tabwidth -4
</t>
<t tx="ekr.20161204041800.10">
The top section

</t>
<t tx="ekr.20161204041800.11">
section 1, line 1
-- Not an underline
secttion 1, line 2

</t>
<t tx="ekr.20161204041800.12">
section 2, line 1

</t>
<t tx="ekr.20161204041800.13">
section 2.1, line 1

</t>
<t tx="ekr.20161204041800.14">
section 2.2.1 line 1

</t>
<t tx="ekr.20161204041800.15">section 2.2, line 1.

</t>
<t tx="ekr.20161204041800.16">
section 3, line 1

</t>
<t tx="ekr.20161204041800.2">The top section

</t>
<t tx="ekr.20161204041800.3">section 1, line 1
section 1, line 2

</t>
<t tx="ekr.20161204041800.4">section 2, line 1

</t>
<t tx="ekr.20161204041800.5">section 2.1, line 1

</t>
<t tx="ekr.20161204041800.6">section 2.2.1 line 1
The next section is empty. It must not be deleted.

</t>
<t tx="ekr.20161204041800.7">
</t>
<t tx="ekr.20161204041800.8">Section 3, line 1

</t>
<t tx="ekr.20161204041800.9">@others

Warning: this node is ignored when writing this file.

@language md
@tabwidth -4
</t>
<t tx="ekr.20161204041842.20">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161204041842.21">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20161204041902.25">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161204041902.26">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20161204041920.33">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161204041920.34">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20161204042116.25">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161204042116.26">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20161204042155.7">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161204042155.8">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20161204042301.25">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161204042301.26">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20161204042305.100">section 2.1, line 1

</t>
<t tx="ekr.20161204042305.101">section 2.2.1 line 1
The next section is empty. It must not be deleted.

</t>
<t tx="ekr.20161204042305.102">
</t>
<t tx="ekr.20161204042305.103">Section 3, line 1

</t>
<t tx="ekr.20161204042305.104">@others

Warning: this node is ignored when writing this file.

@language md
@tabwidth -4
</t>
<t tx="ekr.20161204042305.105">
The top section

</t>
<t tx="ekr.20161204042305.106">
section 1, line 1
-- Not an underline
secttion 1, line 2

</t>
<t tx="ekr.20161204042305.107">
section 2, line 1

</t>
<t tx="ekr.20161204042305.108">
section 2.1, line 1

</t>
<t tx="ekr.20161204042305.109">
section 2.2.1 line 1

</t>
<t tx="ekr.20161204042305.110">section 2.2, line 1.

</t>
<t tx="ekr.20161204042305.111">
section 3, line 1

</t>
<t tx="ekr.20161204042305.96">@others

Warning: this node is ignored when writing this file.

@language md
@tabwidth -4
</t>
<t tx="ekr.20161204042305.97">The top section

</t>
<t tx="ekr.20161204042305.98">section 1, line 1
section 1, line 2

</t>
<t tx="ekr.20161204042305.99">section 2, line 1

</t>
<t tx="ekr.20161204042714.33">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161204042714.34">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20161204042719.10">
</t>
<t tx="ekr.20161204042719.11">Section 3, line 1

</t>
<t tx="ekr.20161204042719.12">@others

Warning: this node is ignored when writing this file.

@language md
@tabwidth -4
</t>
<t tx="ekr.20161204042719.13">
The top section

</t>
<t tx="ekr.20161204042719.14">
section 1, line 1
-- Not an underline
secttion 1, line 2

</t>
<t tx="ekr.20161204042719.15">
section 2, line 1

</t>
<t tx="ekr.20161204042719.16">
section 2.1, line 1

</t>
<t tx="ekr.20161204042719.17">
section 2.2.1 line 1

</t>
<t tx="ekr.20161204042719.18">section 2.2, line 1.

</t>
<t tx="ekr.20161204042719.19">
section 3, line 1

</t>
<t tx="ekr.20161204042719.4">@others

Warning: this node is ignored when writing this file.

@language md
@tabwidth -4
</t>
<t tx="ekr.20161204042719.5">The top section

</t>
<t tx="ekr.20161204042719.6">section 1, line 1
section 1, line 2

</t>
<t tx="ekr.20161204042719.7">section 2, line 1

</t>
<t tx="ekr.20161204042719.8">section 2.1, line 1

</t>
<t tx="ekr.20161204042719.9">section 2.2.1 line 1
The next section is empty. It must not be deleted.

</t>
<t tx="ekr.20161204042739.15">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161204042739.16">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20161204042822.1">@others

Warning: this node is ignored when writing this file.

@language md
@tabwidth -4
</t>
<t tx="ekr.20161204042822.10">
The top section

</t>
<t tx="ekr.20161204042822.11">
section 1, line 1
-- Not an underline
secttion 1, line 2

</t>
<t tx="ekr.20161204042822.12">
section 2, line 1

</t>
<t tx="ekr.20161204042822.13">
section 2.1, line 1

</t>
<t tx="ekr.20161204042822.14">
section 2.2.1 line 1

</t>
<t tx="ekr.20161204042822.15">section 2.2, line 1.

</t>
<t tx="ekr.20161204042822.16">
section 3, line 1

</t>
<t tx="ekr.20161204042822.2">The top section

</t>
<t tx="ekr.20161204042822.3">section 1, line 1
section 1, line 2

</t>
<t tx="ekr.20161204042822.4">section 2, line 1

</t>
<t tx="ekr.20161204042822.5">section 2.1, line 1

</t>
<t tx="ekr.20161204042822.6">section 2.2.1 line 1
The next section is empty. It must not be deleted.

</t>
<t tx="ekr.20161204042822.7">
</t>
<t tx="ekr.20161204042822.8">Section 3, line 1

</t>
<t tx="ekr.20161204042822.9">@others

Warning: this node is ignored when writing this file.

@language md
@tabwidth -4
</t>
<t tx="ekr.20161204042916.1">print('start python tests')
</t>
<t tx="ekr.20161204042938.1">print('end python tests')
</t>
<t tx="ekr.20161204043013.1">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161204043013.2">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20161204043017.19">@others

Warning: this node is ignored when writing this file.

@language md
@tabwidth -4
</t>
<t tx="ekr.20161204043017.20">The top section

</t>
<t tx="ekr.20161204043017.21">section 1, line 1
section 1, line 2

</t>
<t tx="ekr.20161204043017.22">section 2, line 1

</t>
<t tx="ekr.20161204043017.23">section 2.1, line 1

</t>
<t tx="ekr.20161204043017.24">section 2.2.1 line 1
The next section is empty. It must not be deleted.

</t>
<t tx="ekr.20161204043017.25">
</t>
<t tx="ekr.20161204043017.26">Section 3, line 1

</t>
<t tx="ekr.20161204043017.27">@others

Warning: this node is ignored when writing this file.

@language md
@tabwidth -4
</t>
<t tx="ekr.20161204043017.28">
The top section

</t>
<t tx="ekr.20161204043017.29">
section 1, line 1
-- Not an underline
secttion 1, line 2

</t>
<t tx="ekr.20161204043017.30">
section 2, line 1

</t>
<t tx="ekr.20161204043017.31">
section 2.1, line 1

</t>
<t tx="ekr.20161204043017.32">
section 2.2.1 line 1

</t>
<t tx="ekr.20161204043017.33">section 2.2, line 1.

</t>
<t tx="ekr.20161204043017.34">
section 3, line 1

</t>
<t tx="ekr.20161204043028.10">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161204043028.11">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20161204043032.100">section 2.1, line 1

</t>
<t tx="ekr.20161204043032.101">section 2.2.1 line 1
The next section is empty. It must not be deleted.

</t>
<t tx="ekr.20161204043032.102">
</t>
<t tx="ekr.20161204043032.103">Section 3, line 1

</t>
<t tx="ekr.20161204043032.104">@others

Warning: this node is ignored when writing this file.

@language md
@tabwidth -4
</t>
<t tx="ekr.20161204043032.105">
The top section

</t>
<t tx="ekr.20161204043032.106">
section 1, line 1
-- Not an underline
secttion 1, line 2

</t>
<t tx="ekr.20161204043032.107">
section 2, line 1

</t>
<t tx="ekr.20161204043032.108">
section 2.1, line 1

</t>
<t tx="ekr.20161204043032.109">
section 2.2.1 line 1

</t>
<t tx="ekr.20161204043032.110">section 2.2, line 1.

</t>
<t tx="ekr.20161204043032.111">
section 3, line 1

</t>
<t tx="ekr.20161204043032.96">@others

Warning: this node is ignored when writing this file.

@language md
@tabwidth -4
</t>
<t tx="ekr.20161204043032.97">The top section

</t>
<t tx="ekr.20161204043032.98">section 1, line 1
section 1, line 2

</t>
<t tx="ekr.20161204043032.99">section 2, line 1

</t>
<t tx="ekr.20161204043342.40">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161204043342.41">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20161204043346.10">
</t>
<t tx="ekr.20161204043346.11">Section 3, line 1

</t>
<t tx="ekr.20161204043346.12">@others

Warning: this node is ignored when writing this file.

@language md
@tabwidth -4
</t>
<t tx="ekr.20161204043346.13">
The top section

</t>
<t tx="ekr.20161204043346.14">
section 1, line 1
-- Not an underline
secttion 1, line 2

</t>
<t tx="ekr.20161204043346.15">
section 2, line 1

</t>
<t tx="ekr.20161204043346.16">
section 2.1, line 1

</t>
<t tx="ekr.20161204043346.17">
section 2.2.1 line 1

</t>
<t tx="ekr.20161204043346.18">section 2.2, line 1.

</t>
<t tx="ekr.20161204043346.19">
section 3, line 1

</t>
<t tx="ekr.20161204043346.4">@others

Warning: this node is ignored when writing this file.

@language md
@tabwidth -4
</t>
<t tx="ekr.20161204043346.5">The top section

</t>
<t tx="ekr.20161204043346.6">section 1, line 1
section 1, line 2

</t>
<t tx="ekr.20161204043346.7">section 2, line 1

</t>
<t tx="ekr.20161204043346.8">section 2.1, line 1

</t>
<t tx="ekr.20161204043346.9">section 2.2.1 line 1
The next section is empty. It must not be deleted.

</t>
<t tx="ekr.20161204045827.15">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161204045827.16">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20161204045955.21">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161204045955.22">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20161204154852.10">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161204154852.11">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20161204155218.25">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161204155218.26">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20161206135449.10">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161206135449.11">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20161206165824.10">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161206165824.11">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20161216141227.1">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161216141227.2">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20161216141315.1">if 0:
    # The preamble...
    # g.cls()
    if c.isChanged(): c.save()
    # import leo
    import leo.core.leoImport as leoImport
    import leo.plugins.importers.linescanner as linescanner
    import leo.plugins.importers.markdown
    # import leo.plugins.writers.markdown
    # Reload all.
    import imp
    imp.reload(leo.plugins.importers.linescanner)
    imp.reload(leo.plugins.importers.markdown)
    # imp.reload(leo.plugins.writers.markdown)
    imp.reload(leoImport)
    markdown = leo.plugins.importers.markdown
    g.app.loadManager.createAllImporetersData()
    ic = leoImport.LeoImportCommands(c)
else:
    ic = c.importCommands  
# insert test for markdown here.
s = '''\
Decl line.

#@@ Header

After header text

##@@Subheader

Not an underline

----------------

This *should* be a section
==========================

After subheader text

#Last header: no text
'''
table = (
    '!Declarations',
    '@verbatim', # This is an artifact of the unit test.
    '@@ Header',
        '@@Subheader',
            'This *should* be a section',
        'Last header: no text',
)
try:
    g.app.suppressImportChecks = True
        # Required, because the implicit underlining *must*
        # cause the perfect-import test to fail!
    ic.markdownUnitTest(p,s=s,showTree=True)
    if 1:
        root = c.p.lastChild()
        assert root.h.startswith('@@auto-m'), root.h
        p2 = root.firstChild()
        for h in table:
            assert p2.h == h, (p2.h, h)
            p2.moveToThreadNext()
        assert not root.isAncestorOf(p2), p2.h # Extra nodes
finally:
    g.app.suppressImportChecks = False
        # Not needed: done in Importer.check
    if 1:
        p.deleteAllChildren()
        c.redraw()
</t>
<t tx="ekr.20161218103650.1">@tabwidth -4
    # Required when running unit tests externally.
if 0: # Preamble...
    # g.cls()
    if c.isChanged(): c.save()
    # import leo
    import leo.core.leoImport as leoImport
    import leo.plugins.importers.linescanner as linescanner
    import leo.plugins.importers.python
    # Reload all.
    import imp
    imp.reload(leo.plugins.importers.linescanner)
    imp.reload(leo.plugins.importers.python)
    imp.reload(leoImport)
    g.app.loadManager.createAllImporetersData()
    ic = leoImport.LeoImportCommands(c)
else:
    ic = c.importCommands  
s = '''\
import sys

if sys.version_info[0] &gt;= 3:
    exec_ = eval('exec')
else:
    def exec_(_code_, _globs_=None, _locs_=None):
        """Execute code in a namespace."""
        if _globs_ is None:
            frame = sys._getframe(1)
            _globs_ = frame.f_globals
            if _locs_ is None:
                _locs_ = frame.f_locals
            del frame
        elif _locs_ is None:
            _locs_ = _globs_
        exec("""exec _code_ in _globs_, _locs_""")

def make_parser():

    parser = argparse.ArgumentParser(
        description="""Raster calcs. with GDAL.
        The first --grid defines the projection, extent, cell size, and origin
        for all calculations, all other grids are transformed and resampled
        as needed to match.""",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
)
'''
table = (
    (1, 'Declarations'),
    (1, 'make_parser'),
)
try:
    test_node = p.copy()
    test_node.deleteAllChildren()
    ic.pythonUnitTest(p,s=s,showTree=True)
    after = p.nodeAfterTree()
    root = p.lastChild()
    assert root.h.startswith('@@'), root.h
    p = root.firstChild()
    if 1:
        for n, h in table:
            n2 = p.level() - root.level()
            assert h == p.h, (h, p.h)
            assert n == n2, (n, n2, p.h)
            p.moveToThreadNext()
        assert p == after, ('tree comp failed', p.h)
    if 1:
        test_node.deleteAllChildren()
finally:
    c.redraw()
</t>
<t tx="ekr.20161218104646.1">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161218104646.2">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20161220185154.21">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161220185154.22">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20161221062411.1">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161221062411.2">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20161221063734.10">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161221063734.11">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20161221065216.7">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161221065216.8">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20161221080848.25">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161221080848.26">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20161221091453.20">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161221091453.21">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20161221091950.20">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161221091950.21">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20161221092230.10">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161221092230.11">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20161222064421.1"># From xo.py.
if 0: # Preamble...
    # g.cls()
    if c.isChanged(): c.save()
    # import leo
    import leo.core.leoImport as leoImport
    import leo.plugins.importers.linescanner as linescanner
    import leo.plugins.importers.python
    # Reload all.
    import imp
    imp.reload(leo.plugins.importers.linescanner)
    imp.reload(leo.plugins.importers.python)
    imp.reload(leoImport)
    g.app.loadManager.createAllImporetersData()
    ic = leoImport.LeoImportCommands(c)
else:
    ic = c.importCommands  

s = r'''#!/usr/bin/env python3

import os
import re

def merge_value(v1, v2):
    return v

class MainDisplay(object):

    def save_file(self):
        """Write the file out to disk."""
        with open(self.save_name, "w") as f:
            for newline in newlines:
                f.write(newline)

# This line should be included at the end of the class node.
ensure_endswith_newline = lambda x: x if x.endswith('\n') else x + '\n'

def retab(s, tabsize):
    return ''.join(pieces)

if __name__=="__main__":
    main()
'''
table = (
    (1, 'Declarations'),
    (1, 'merge_value'),
    (1, 'class MainDisplay'),
    (2, 'save_file'),
    (1, 'retab'),
)
try:
    test_node = p.copy()
    test_node.deleteAllChildren()
    ic.pythonUnitTest(p,s=s,showTree=True)
    after = p.nodeAfterTree()
    root = p.lastChild()
    assert root.h.startswith('@@'), root.h
    p = root.firstChild()
    if 1:
        for n, h in table:
            n2 = p.level() - root.level()
            assert h == p.h, (h, p.h)
            assert n == n2, (n, n2, p.h)
            p.moveToThreadNext()
        assert p == after, ('tree comp failed', p.h)
    if 1:
        test_node.deleteAllChildren()
finally:
    c.redraw()
</t>
<t tx="ekr.20161222122038.3">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161222122038.4">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20161222123534.3">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161222123534.4">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20161222123751.3">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161222123751.4">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20161223153848.1">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161223153848.2">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20161224101046.1">@tabwidth -4
    # Required when running unit tests externally.
if 0: # Preamble...
    # g.cls()
    if c.isChanged(): c.save()
    # import leo
    import leo.core.leoImport as leoImport
    import leo.plugins.importers.linescanner as linescanner
    import leo.plugins.importers.python
    # Reload all.
    import imp
    imp.reload(leo.plugins.importers.linescanner)
    imp.reload(leo.plugins.importers.python)
    imp.reload(leoImport)
    g.app.loadManager.createAllImporetersData()
    ic = leoImport.LeoImportCommands(c)
else:
    ic = c.importCommands

s = '''
"""
A PyQt "task launcher" for quick access to python scripts.

Buttons to click to make working in Windows less unproductive.

e.g. a button to move the current window to top or bottom half
of screen, because Windows-Up / Windows-Down doesn't do that.
Or quote the text on the clipboard properly, because Outlook
can't do that.

terrynbrown@gmail.com, 2016-12-23
"""

import sys
import time
from PyQt4 import QtGui, QtCore, Qt
from PyQt4.QtCore import Qt as QtConst

COMMANDS = []

class Draggable(QtGui.QWidget):
    def __init__(self, *args, **kwargs):
        """__init__
        """

        QtGui.QWidget.__init__(self, *args, **kwargs)
        # self.setMouseTracking(True)
        self.offset = None
        layout = QtGui.QHBoxLayout()
        self.setLayout(layout)
        layout.addItem(QtGui.QSpacerItem(15, 5))
        layout.setSpacing(0)
        layout.setContentsMargins(0, 0, 0, 0)

    def mousePressEvent(self, event):
        self.offset = event.pos()

    def mouseMoveEvent(self, event):
        x=event.globalX()
        y=event.globalY()
        x_w = self.offset.x()
        y_w = self.offset.y()
        self.parent().move(x-x_w, y-y_w)

def command(name):
    def makebutton(function):
        COMMANDS.append((name, function))
        return function
    return makebutton

@command("Exit")
def exit_():
    exit()

def main():

    app = Qt.QApplication(sys.argv)

    main = QtGui.QMainWindow(None,
       # QtConst.CustomizeWindowHint  |
       QtConst.FramelessWindowHint #  |
       # QtConst.WindowCloseButtonHint
    )

    main.resize(800,16)
    main.move(40,40)
    mainwidj = Draggable()

    for name, function in COMMANDS:
        button = QtGui.QPushButton(name)
        button.clicked.connect(function)
        mainwidj.layout().addWidget(button)

    main.setCentralWidget(mainwidj)
    main.show()
    app.exec_()

if __name__ == '__main__':
    main()
'''
table = (
    (1, "Declarations"),
    (1, "class Draggable"),
    (2, "__init__"),
    (2, "mousePressEvent"),
    (2, "mouseMoveEvent"),
    (1, "command"),
    (1, '@command("Exit") exit_'),
    (1, "main"),
)
try:
    test_node = p.copy()
    test_node.deleteAllChildren()
    c.importCommands.pythonUnitTest(p,s=s,showTree=True) # Must be true.
    after = p.nodeAfterTree()
    root = p.lastChild()
    assert root.h.startswith('@@'), root.h
    p = root.firstChild()
    if 1:
        for n, h in table:
            n2 = p.level() - root.level()
            assert h == p.h, (h, p.h)
            assert n == n2, (n, n2, p.h)
            p.moveToThreadNext()
        assert p == after, ('tree comp failed', p.h)
    target = g.findNodeInTree(c, root, '@command("Exit") exit_')
    assert target
    lines = g.splitLines(target.b)
    assert lines[0] == '@command("Exit")\n', repr(lines[0])
    if 1:
        test_node.deleteAllChildren()
finally:
    c.redraw()
</t>
<t tx="ekr.20161224111342.1">import glob
import os
if 0: # Preamble...
    g.cls()
    if c.isChanged(): c.save()
    # import leo
    import leo.core.leoImport as leoImport
    # import leo.plugins.importers.basescanner as basescanner
    import leo.plugins.importers.linescanner as linescanner
    import leo.plugins.importers.python
    # Reload all.
    import imp
    # imp.reload(leo.plugins.importers.basescanner)
    imp.reload(leo.plugins.importers.linescanner)
    imp.reload(leo.plugins.importers.python)
    imp.reload(leoImport)
    ic = leoImport.LeoImportCommands(c)
else:
    ic = c.importCommands

try:
    base_dir = g.os_path_finalize_join(g.app.loadDir, '..', 'core')
    assert g.os_path_exists(base_dir), base_dir
    files = glob.glob('%s%s%s' % (base_dir, os.sep, '*.py'))
    files = [z for z in files if g.shortFileName(z).startswith('leo')]
    # leoTangle contains section refs in @c sections.
    files = [z for z in files
        if not g.shortFileName(z).endswith('leoTangle.py')]
    if 0: # Do only files in the table.
        table = (
            'leoColorizer.py',
            'leoFileCommands.py',
            'leoNodes.py',
        )
        result = []
        for fn in files:
            for z in table:
                if g.shortFileName(fn).endswith(z):
                    result.append(fn)
        files = result
    test_node = p.copy()
    fails = []
    test_node.deleteAllChildren()
    for fn in files:
        sfn = g.shortFileName(fn)
        s = g.readFileIntoUnicodeString(fn)
        s2 = ic.removeSentinelLines(s, '#', None, None)
        try:
            print(sfn)
            ic.pythonUnitTest(p,s=s2,showTree=True)
            test_node.lastChild().h = '@@file %s' % sfn
        except AssertionError:
            print('FAIL: %6s %6s %s' % (len(s), len(s2), sfn))
            fails.append(sfn)
            # break
    if fails:
        print('%s failures' % (len(fails)))
        g.printList(sorted(fails))
    elif 1:
        test_node.deleteAllChildren()
finally:
    c.redraw()
</t>
<t tx="ekr.20161224145026.1">if 0: # Preamble...
    # g.cls()
    if c.isChanged(): c.save()
    # import leo
    import leo.core.leoImport as leoImport
    import leo.plugins.importers.linescanner as linescanner
    import leo.plugins.importers.python
    # Reload all.
    import imp
    imp.reload(leo.plugins.importers.linescanner)
    imp.reload(leo.plugins.importers.python)
    imp.reload(leoImport)
    g.app.loadManager.createAllImporetersData()
    ic = leoImport.LeoImportCommands(c)
else:
    ic = c.importCommands
    
s = '''
def isValidPython(self):
    if sys.platform == 'cli':
        return True
    minimum_python_version = '2.6'
    message = """\
Leo requires Python %s or higher.
You may download Python from
http://python.org/download/
""" % minimum_python_version
    try:
        version = '.'.join([str(sys.version_info[i]) for i in (0, 1, 2)])
        ok = g.CheckVersion(version, minimum_python_version)
        if not ok:
            print(message)
            try:
                # g.app.gui does not exist yet.
                import Tkinter as Tk
                class EmergencyDialog(object):
                    def run(self):
                        """Run the modal emergency dialog."""
                        self.top.geometry("%dx%d%+d%+d" % (300, 200, 50, 50))
                        self.top.lift()
                        self.top.grab_set() # Make the dialog a modal dialog.
                        self.root.wait_window(self.top)
                d = EmergencyDialog(
                    title='Python Version Error',
                    message=message)
                d.run()
            except Exception:
                pass
        return ok
    except Exception:
        print("isValidPython: unexpected exception: g.CheckVersion")
        traceback.print_exc()
        return 0
def loadLocalFile(self, fn, gui, old_c):
    trace = (False or g.trace_startup) and not g.unitTesting
'''
table = (
    (1, 'isValidPython'),
    # (2, 'class EmergencyDialog'),
    # (3, 'run'),
    (1, 'loadLocalFile'),
)
try:
    test_node = p.copy()
    test_node.deleteAllChildren()
    ic.pythonUnitTest(p,s=s,showTree=True)
    after = p.nodeAfterTree()
    root = p.lastChild()
    assert root.h.startswith('@@'), root.h
    p = root.firstChild()
    if 1:
        for n, h in table:
            n2 = p.level() - root.level()
            assert h == p.h, (h, p.h)
            assert n == n2, (n, n2, p.h)
            p.moveToThreadNext()
        assert p == after, ('tree comp failed', p.h)
    if 1:
        test_node.deleteAllChildren()
finally:
    c.redraw()
</t>
<t tx="ekr.20161228070933.1">if 0: # Preamble...
    # g.cls()
    if c.isChanged(): c.save()
    import leo.core.leoImport as leoImport
    import leo.plugins.importers.linescanner as linescanner
    import leo.plugins.importers.python
    # Reload all.
    import imp
    imp.reload(leo.plugins.importers.linescanner)
    imp.reload(leo.plugins.importers.python)
    imp.reload(leoImport)
    g.app.loadManager.createAllImporetersData()
    ic = leoImport.LeoImportCommands(c)
else:
    ic = c.importCommands 
s = """
if isPython3:
    def u(s):
        '''Return s, converted to unicode from Qt widgets.'''
        return s

    def ue(s, encoding):
        return s if g.isUnicode(s) else str(s, encoding)
else:
    def u(s):
        '''Return s, converted to unicode from Qt widgets.'''
        return builtins.unicode(s) # Suppress pyflakes complaint.

    def ue(s, encoding):
        return builtins.unicode(s, encoding)
"""
table = (
    (1, 'Declarations'),
)
try:
    test_node = p.copy()
    test_node.deleteAllChildren()
    ic.pythonUnitTest(p,s=s,showTree=True)
    after = p.nodeAfterTree()
    root = p.lastChild()
    assert root.h.startswith('@@'), root.h
    p = root.firstChild()
    if 1:
        for n, h in table:
            n2 = p.level() - root.level()
            assert h == p.h, (h, p.h)
            assert n == n2, (n, n2, p.h)
            p.moveToThreadNext()
        assert p == after, ('tree comp failed', p.h)
    if 1:
        test_node.deleteAllChildren()
finally:
    c.redraw()
</t>
<t tx="ekr.20161228071435.1">if isPython3: # g.not defined yet.
    &lt;&lt; u:1 &gt;&gt;
    &lt;&lt; ue:1 &gt;&gt;
else:
    &lt;&lt; u:2 &gt;&gt;
    &lt;&lt; ue: 2&gt;&gt;
</t>
<t tx="ekr.20161228071822.1">def u(s):
    '''Return s, converted to unicode from Qt widgets.'''
    return s</t>
<t tx="ekr.20161228071836.1">def ue(s, encoding):
    return s if g.isUnicode(s) else str(s, encoding)</t>
<t tx="ekr.20161228071849.1">def u(s):
    '''Return s, converted to unicode from Qt widgets.'''
    return builtins.unicode(s) # Suppress pyflakes complaint.</t>
<t tx="ekr.20161228071905.1">def ue(s, encoding):
    return builtins.unicode(s, encoding)</t>
<t tx="ekr.20161228071915.1">@language python
@tabwidth -4
@others
</t>
<t tx="ekr.20161228072352.1">if isPython3: # g.not defined yet.
    def u(s):
        '''Return s, converted to unicode from Qt widgets.'''
        return s
    def ue(s, encoding):
        return s if g.isUnicode(s) else str(s, encoding)
else:
    def u(s):
        '''Return s, converted to unicode from Qt widgets.'''
        return builtins.unicode(s) # Suppress pyflakes complaint.
    def ue(s, encoding):
        return builtins.unicode(s, encoding)
</t>
<t tx="ekr.20161231115630.10">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20161231115630.11">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20170101085120.25">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20170101085120.26">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20170101131839.10">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20170101131839.11">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20170101134221.7">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20170101134221.8">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20170101134417.1"></t>
<t tx="ekr.20170105122516.10">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20170105122516.11">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20170112111339.7">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20170112111339.8">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20170112111900.10">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20170112111900.11">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20170113162613.7">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20170113162613.8">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20170114055256.3">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20170114055256.4">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20170114080041.1">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20170114080041.2">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20170114200550.3">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20170114200550.4">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20170115052901.10">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20170115052901.11">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20170122032242.1">s = """
@base_task(
    targets=['img/who_map.png', 'img/who_map.pdf'],
    file_dep=[data_path('phyto')],
    task_dep=['load_data'],
)
def make_map():
    '''make_map - plot the Thompson / Bartsh / WHO map'''
"""
table = (
    (1, '@base_task make_map'),
)
try:
    test_node = p.copy()
    test_node.deleteAllChildren()
    c.importCommands .pythonUnitTest(p,s=s,showTree=True)
    after = p.nodeAfterTree()
    root = p.lastChild()
    assert root.h.startswith('@@'), root.h
    p = root.firstChild()
    if 1:
        for n, h in table:
            n2 = p.level() - root.level()
            assert h == p.h, (h, p.h)
            assert n == n2, (n, n2, p.h)
            p.moveToThreadNext()
        assert p == after, ('tree comp failed', p.h)
    if 1:
        test_node.deleteAllChildren()
finally:
    c.redraw()
</t>
<t tx="ekr.20170122033034.1">if 0: # Preamble...
    # g.cls()
    if c.isChanged(): c.save()
    import leo.core.leoImport as leoImport
    import leo.plugins.importers.linescanner as linescanner
    import leo.plugins.importers.python
    # Reload all.
    import imp
    imp.reload(leo.plugins.importers.linescanner)
    imp.reload(leo.plugins.importers.python)
    imp.reload(leoImport)
    g.app.loadManager.createAllImporetersData()
    ic = leoImport.LeoImportCommands(c)
else:
    ic = c.importCommands 
s = '''
"""
sheet_stats.py - report column stats for spreadsheets

requires openpyxl and numpy

Terry N. Brown, terrynbrown@gmail.com, Fri Dec 16 13:20:47 2016
2016-12-26 Henry Helgen added average, variance, standard deviation,
                        coefficient of variation to output
2016-12-23 Henry Helgen updated to Python 3.5 syntax including print() and
                        writer = csv.writer(open(opt.output, 'w', newline=''))
"""

import csv
import argparse
import glob
import multiprocessing
import os
import sys
from collections import namedtuple
from math import sqrt, isnan
NAN = float('NAN')

from openpyxl import load_workbook

PYTHON_2 = sys.version_info[0] &lt; 3
if not PYTHON_2:
    unicode = str

class AttrDict(dict):
    """allow d.attr instead of d['attr']
    http://stackoverflow.com/a/14620633
    """
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

FIELDS = [  # fields in outout table
    'file', 'field', 'n', 'blank', 'bad', 'min', 'max', 'mean', 'std',
    'sum', 'sumsq', 'variance', 'coefvar'
]
def make_parser():
    """build an argparse.ArgumentParser, don't call this directly,
       call get_options() instead.
    """
    parser = argparse.ArgumentParser(
        description="""Report column stats for spreadsheets""",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )

    parser.add_argument('files', type=str, nargs='+',
        help="Files to process, '*' patterns expanded."
    )

    required_named = parser.add_argument_group('required named arguments')

    required_named.add_argument("--output",
        help="Path to .csv file for output, will be overwritten",
        metavar='FILE'
    )

    return parser

def get_options(args=None):
    """
    get_options - use argparse to parse args, and return a
    argparse.Namespace, possibly with some changes / expansions /
    validatations.

    Client code should call this method with args as per sys.argv[1:],
    rather than calling make_parser() directly.

    :param [str] args: arguments to parse
    :return: options with modifications / validations
    :rtype: argparse.Namespace
    """
    opt = make_parser().parse_args(args)

    # modifications / validations go here

    if not opt.output:
        print("No --output supplied")
        exit(10)

    return opt

def get_aggregate(psumsqn, psumn, pcountn):
    """
    get_aggregate - compute mean, variance, standard deviation,
    coefficient of variation This function is used instead of
    numpy.mean, numpy.var, numpy.std since the sum, sumsq, and count are
    available when the function is called. It avoids an extra pass
    through the list.

    # note pcountn means the full list n,  not a sample n - 1

    :param sum of squares, sum, count
    :return: a tuple of floats mean, variance, standard deviation, coefficient of variation
    """

    Agg = namedtuple("Agg", "mean variance std coefvar")

    # validate inputs check for count == 0
    if pcountn == 0:
        result = Agg(NAN, NAN, NAN, NAN)
    else:

        mean = psumn / pcountn # mean

        # compute variance from sum squared without knowing mean while summing
        variance = (psumsqn - (psumn * psumn) / pcountn ) / pcountn

        #compute standard deviation
        if variance &lt; 0:
            std = NAN
        else:
            std = sqrt(variance)

        # compute coefficient of variation
        if mean == 0:
            coefvar = NAN
        else:
            coefvar = std / mean

        result = Agg(mean, variance, std, coefvar)

    return result


def proc_file(filepath):
    """
    proc_file - process one .xlsx file

    :param str filepath: path to file
    :return: list of lists, rows of info. as expected in main()
    """

    print(filepath)

    # get the first sheet
    book = load_workbook(filename=filepath, read_only=True)
    sheets = book.get_sheet_names()
    sheet = book[sheets[0]]
    row_source = sheet.rows
    row0 = next(row_source)
    # get field names from the first row
    fields = [i.value for i in row0]

    data = {
        'filepath': filepath,
        'fields': {field:AttrDict({f:0 for f in FIELDS}) for field in fields}
    }

    for field in fields:
        # init. mins/maxs with invalid value for later calc.
        data['fields'][field].update(dict(
            min=NAN,
            max=NAN,
            field=field,
            file=filepath,
        ))

    rows = 0
    for row in row_source:

        if rows % 1000 == 0:  # feedback every 1000 rows
            print(rows)
            # Much cleaner to exit by creating a file called "STOP" in the
            # local directory than to try and use Ctrl-C, when using
            # multiprocessing.  Save time by checking only every 1000 rows.
            if os.path.exists("STOP"):
                return

        rows += 1

        for cell_n, cell in enumerate(row):
            d = data['fields'][fields[cell_n]]
            if cell.value is None or unicode(cell.value).strip() == '':
                d.blank += 1
            else:
                try:
                    x = float(cell.value)
                    d.sum += x
                    d.sumsq += x*x
                    d.n += 1
                    # min is x if no value seen yet, else min(prev-min, x)
                    if isnan(d.min):
                        d.min = x
                    else:
                        d.min = min(d.min, x)
                    # as for min
                    if isnan(d.max):
                        d.max = x
                    else:
                        d.max = max(d.max, x)
                except ValueError:
                    d.bad += 1

    assert sum(d.n+d.blank+d.bad for d in data['fields'].values()) == rows * len(fields)

    # compute the derived values
    for field in data['fields']:
        d = data['fields'][field]
        d.update(get_aggregate(d.sumsq, d.sum, d.n)._asdict().items())

    return data
def get_answers(opt=None, **kwargs):
    """get_answers - process files

    :param argparse.Namespace opt: options
    :return: list of answers from proc_file
    """

    if opt is None:  # API call rather than command line
        opt = type("opt", (), kwargs)

    # pass filenames through glob() to expand "2017_*.xlsx" etc.
    files = []
    for filepath in opt.files:
        files.extend(glob.glob(filepath))

    # create a pool of processors
    pool = multiprocessing.Pool(multiprocessing.cpu_count()-1)

    # process file list with processor pool
    return pool.map(proc_file, files)
def get_table_rows(answers):
    """get_table_rows - generator - convert get_answers() output to table format

    :param list answers: output from get_answers()
    :return: list of rows suitable for csv.writer
    """
    yield FIELDS
    for answer in answers:
        for field in answer['fields']:
            row = [answer['fields'][field][k] for k in FIELDS]
            if PYTHON_2:
                yield [unicode(col).encode('utf-8') for col in row]
            else:
                yield row

def main():
    """main() - when invoked directly"""
    opt = get_options()

    # csv.writer does its own EOL handling,
    # see https://docs.python.org/3/library/csv.html#csv.reader
    if PYTHON_2:
        output = open(opt.output, 'wb')
    else:
        output = open(opt.output, 'w', newline='')

    with output as out:
        writer = csv.writer(out)
        for row in get_table_rows(get_answers(opt)):
            writer.writerow(row)

if __name__ == '__main__':
    main()
'''
table = (
    (1, "Declarations"),
    (1, "class AttrDict"),
    (2, "__init__"),
    (1, "make_parser"),
    (1, "get_options"),
    (1, "get_aggregate"),
    (1, "proc_file"),
    (1, "get_answers"),
    (1, "get_table_rows"),
    (1, "main"),
)
try:
    test_node = p.copy()
    test_node.deleteAllChildren()
    ic.pythonUnitTest(p,s=s,showTree=True)
    after = p.nodeAfterTree()
    root = p.lastChild()
    assert root.h.startswith('@@'), root.h
    p = root.firstChild()
    if 1:
        for n, h in table:
            n2 = p.level() - root.level()
            assert h == p.h, (h, p.h)
            assert n == n2, (n, n2, p.h)
            p.moveToThreadNext()
        assert p == after, ('tree comp failed', p.h)
    if 1:
        test_node.deleteAllChildren()
finally:
    c.redraw()
</t>
<t tx="ekr.20170128023431.1">@language html
</t>
<t tx="ekr.20170302201859.3">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20170302201859.4">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20170306041801.1">s = """\
import sys

class Foo():
    pass
    
a = 2

def main(self):
    pass

if __name__ == '__main__':
    main()
"""
table = (
    (1, 'Declarations'),
    (1, 'class Foo'),
    (1, 'main'),
)
try:
    test_node = p.copy()
    test_node.deleteAllChildren()
    c.importCommands .pythonUnitTest(p,s=s,showTree=True)
    after = p.nodeAfterTree()
    root = p.lastChild()
    assert root.h.startswith('@@'), root.h
    p = root.firstChild()
    if 1:
        for n, h in table:
            n2 = p.level() - root.level()
            assert h == p.h, (h, p.h)
            assert n == n2, (n, n2, p.h)
            p.moveToThreadNext()
        assert p == after, ('tree comp failed', p.h)
        assert root.b.find("if __name__ == '__main__':") &gt; -1
    if 1:
        test_node.deleteAllChildren()
finally:
    c.redraw()
</t>
<t tx="ekr.20170401122024.7">@language cweb
@ % This file is part of CWEB.
% This program by Silvio Levy and Donald E. Knuth
% is based on a program by Knuth.
% It is distributed WITHOUT ANY WARRANTY, express or implied.
% Version 3.61 --- July 2000
% (essentially the same as version 3.6, which added
%  recently introduced features of standard C++ to version 3.4)

% Copyright (C) 1987,1990,1993,2000 Silvio Levy and Donald E. Knuth

% Permission is granted to make and distribute verbatim copies of this
% document provided that the copyright notice and this permission notice
% are preserved on all copies.

% Permission is granted to copy and distribute modified versions of this
% document under the conditions for verbatim copying, provided that the
% entire resulting derived work is given a different name and distributed
% under the terms of a permission notice identical to this one.

% Here is TeX material that gets inserted after \input cwebmac
\def\hang{\hangindent 3em\indent\ignorespaces}
\def\pb{$\.|\ldots\.|$} % C brackets (|...|)
\def\v{\char'174} % vertical (|) in typewriter font
\def\dleft{[\![} \def\dright{]\!]} % double brackets
\mathchardef\RA="3221 % right arrow
\mathchardef\BA="3224 % double arrow
\def\({} % ) kludge for alphabetizing certain section names
\def\TeXxstring{\\{\TEX/\_string}}
\def\skipxTeX{\\{skip\_\TEX/}}
\def\copyxTeX{\\{copy\_\TEX/}}

\def\title{CWEAVE (Version 3.61)}
\def\topofcontents{\null\vfill
  \centerline{\titlefont The {\ttitlefont CWEAVE} processor}
  \vskip 15pt
  \centerline{(Version 3.61)}
  \vfill}
\def\botofcontents{\vfill
\noindent
Copyright \copyright\ 1987, 1990, 1993, 2000 Silvio Levy and Donald E. Knuth
\bigskip\noindent
Permission is granted to make and distribute verbatim copies of this
document provided that the copyright notice and this permission notice
are preserved on all copies.

\smallskip\noindent
Permission is granted to copy and distribute modified versions of this
document under the conditions for verbatim copying, provided that the
entire resulting derived work is given a different name and distributed
under the terms of a permission notice identical to this one.
}
\pageno=\contentspagenumber \advance\pageno by 1
\let\maybe=\iftrue
@s not_eq normal @q unreserve a C++ keyword @&gt;@** Introduction. This is the \.{CWEAVE} program by Silvio Levy and Donald E. Knuth, based on \.{WEAVE} by Knuth. We are thankful to Steve Avery, Nelson Beebe, Hans-Hermann Bode (to whom the original \CPLUSPLUS/ adaptation is due), Klaus Guntermann, Norman Ramsey, Tomas Rokicki, Joachim Schnitter, Joachim Schrod, Lee Wittenberg, Saroj Mahapatra, Cesar Augusto Rorato Crusius, and others who have contributed improvements.  The ``banner line'' defined here should be changed whenever \.{CWEAVE} is modified.

@d banner "This is CWEAVE (Version 3.61)\n"

@c @&lt;Include files@&gt;@/
@h
@&lt;Common code for \.{CWEAVE} and \.{CTANGLE}@&gt;@/
@&lt;Typedef declarations@&gt;@/
@&lt;Global variables@&gt;@/
@&lt;Predeclaration of procedures@&gt;
@ We predeclare several standard system functions here instead of including their system header files, because the names of the header files are not as standard as the names of the functions. (For example, some \CEE/ environments have \.{&lt;string.h&gt;} where others have \.{&lt;strings.h&gt;}.)

@&lt;Predeclaration of procedures@&gt;=
extern int strlen(); /* length of string */
extern int strcmp(); /* compare strings lexicographically */
extern char* strcpy(); /* copy one string to another */
extern int strncmp(); /* compare up to $n$ string characters */
extern char* strncpy(); /* copy up to $n$ string characters */
@ \.{CWEAVE} has a fairly straightforward outline.  It operates in three phases: First it inputs the source file and stores cross-reference data, then it inputs the source once again and produces the \TEX/ output file, finally it sorts and outputs the index.  Please read the documentation for \.{common}, the set of routines common to \.{CTANGLE} and \.{CWEAVE}, before proceeding further.

@c
int main (ac, av)
int ac; /* argument count */
char **av; /* argument values */
{
  argc=ac; argv=av;
  program=cweave;
  make_xrefs=force_lines=1; /* controlled by command-line options */
  common_init();
  @&lt;Set initial values@&gt;;
  if (show_banner) printf(banner); /* print a ``banner line'' */
  @&lt;Store all the reserved words@&gt;;
  phase_one(); /* read all the user's text and store the cross-references */
  phase_two(); /* read all the text again and translate it to \TEX/ form */
  phase_three(); /* output the cross-reference index */
  return wrap_up(); /* and exit gracefully */
}@ We have to get \CEE/'s reserved words into the hash table, and the simplest way to do this is to insert them every time \.{CWEAVE} is run.  Fortunately there are relatively few reserved words. (Some of these are not strictly ``reserved,'' but are defined in header files of the ISO Standard \CEE/ Library.) @^reserved words@&gt;

@&lt;Store all the reserved words@&gt;=
id_lookup("and",NULL,alfop);
id_lookup("and_eq",NULL,alfop);
id_lookup("asm",NULL,sizeof_like);
id_lookup("auto",NULL,int_like);
id_lookup("bitand",NULL,alfop);
id_lookup("bitor",NULL,alfop);
id_lookup("bool",NULL,raw_int);
id_lookup("break",NULL,case_like);
id_lookup("case",NULL,case_like);
id_lookup("catch",NULL,catch_like);
id_lookup("char",NULL,raw_int);
id_lookup("class",NULL,struct_like);
id_lookup("clock_t",NULL,raw_int);
id_lookup("compl",NULL,alfop);
id_lookup("const",NULL,const_like);
id_lookup("const_cast",NULL,raw_int);
id_lookup("continue",NULL,case_like);
id_lookup("default",NULL,case_like);
id_lookup("define",NULL,define_like);
id_lookup("defined",NULL,sizeof_like);
id_lookup("delete",NULL,delete_like);
id_lookup("div_t",NULL,raw_int);
id_lookup("do",NULL,do_like);
id_lookup("double",NULL,raw_int);
id_lookup("dynamic_cast",NULL,raw_int);
id_lookup("elif",NULL,if_like);
id_lookup("else",NULL,else_like);
id_lookup("endif",NULL,if_like);
id_lookup("enum",NULL,struct_like);
id_lookup("error",NULL,if_like);
id_lookup("explicit",NULL,int_like);
id_lookup("export",NULL,int_like);
id_lookup("extern",NULL,int_like);
id_lookup("FILE",NULL,raw_int);
id_lookup("float",NULL,raw_int);
id_lookup("for",NULL,for_like);
id_lookup("fpos_t",NULL,raw_int);
id_lookup("friend",NULL,int_like);
id_lookup("goto",NULL,case_like);
id_lookup("if",NULL,if_like);
id_lookup("ifdef",NULL,if_like);
id_lookup("ifndef",NULL,if_like);
id_lookup("include",NULL,if_like);
id_lookup("inline",NULL,int_like);
id_lookup("int",NULL,raw_int);
id_lookup("jmp_buf",NULL,raw_int);
id_lookup("ldiv_t",NULL,raw_int);
id_lookup("line",NULL,if_like);
id_lookup("long",NULL,raw_int);
id_lookup("mutable",NULL,int_like);
id_lookup("namespace",NULL,struct_like);
id_lookup("new",NULL,new_like);
id_lookup("not",NULL,alfop);
id_lookup("not_eq",NULL,alfop);
id_lookup("NULL",NULL,custom);
id_lookup("offsetof",NULL,raw_int);
id_lookup("operator",NULL,operator_like);
id_lookup("or",NULL,alfop);
id_lookup("or_eq",NULL,alfop);
id_lookup("pragma",NULL,if_like);
id_lookup("private",NULL,public_like);
id_lookup("protected",NULL,public_like);
id_lookup("ptrdiff_t",NULL,raw_int);
id_lookup("public",NULL,public_like);
id_lookup("register",NULL,int_like);
id_lookup("reinterpret_cast",NULL,raw_int);
id_lookup("return",NULL,case_like);
id_lookup("short",NULL,raw_int);
id_lookup("sig_atomic_t",NULL,raw_int);
id_lookup("signed",NULL,raw_int);
id_lookup("size_t",NULL,raw_int);
id_lookup("sizeof",NULL,sizeof_like);
id_lookup("static",NULL,int_like);
id_lookup("static_cast",NULL,raw_int);
id_lookup("struct",NULL,struct_like);
id_lookup("switch",NULL,for_like);
id_lookup("template",NULL,template_like);
id_lookup("this",NULL,custom);
id_lookup("throw",NULL,case_like);
id_lookup("time_t",NULL,raw_int);
id_lookup("try",NULL,else_like);
id_lookup("typedef",NULL,typedef_like);
id_lookup("typeid",NULL,raw_int);
id_lookup("typename",NULL,struct_like);
id_lookup("undef",NULL,if_like);
id_lookup("union",NULL,struct_like);
id_lookup("unsigned",NULL,raw_int);
id_lookup("using",NULL,int_like);
id_lookup("va_dcl",NULL,decl); /* Berkeley's variable-arg-list convention */
id_lookup("va_list",NULL,raw_int); /* ditto */
id_lookup("virtual",NULL,int_like);
id_lookup("void",NULL,raw_int);
id_lookup("volatile",NULL,const_like);
id_lookup("wchar_t",NULL,raw_int);
id_lookup("while",NULL,for_like);
id_lookup("xor",NULL,alfop);
id_lookup("xor_eq",NULL,alfop);
res_wd_end=name_ptr;
id_lookup("TeX",NULL,custom);
id_lookup("make_pair",NULL,func_template);
@ The following parameters were sufficient in the original \.{WEAVE} to handle \TEX/, so they should be sufficient for most applications of \.{CWEAVE}. If you change |max_bytes|, |max_names|, |hash_size|, or |buf_size| you have to change them also in the file |"common.w"|.

@d max_bytes 90000 /* the number of bytes in identifiers,
  index entries, and section names */
@d max_names 4000 /* number of identifiers, strings, section names;
  must be less than 10240; used in |"common.w"| */
@d max_sections 2000 /* greater than the total number of sections */
@d hash_size 353 /* should be prime */
@d buf_size 100 /* maximum length of input line, plus one */
@d longest_name 10000 /* section names and strings shouldn't be longer than this */
@d long_buf_size (buf_size+longest_name)
@d line_length 80 /* lines of \TEX/ output have at most this many characters;
  should be less than 256 */
@d max_refs 20000 /* number of cross-references; must be less than 65536 */
@d max_toks 20000 /* number of symbols in \CEE/ texts being parsed;
  must be less than 65536 */
@d max_texts 4000 /* number of phrases in \CEE/ texts being parsed;
  must be less than 10240 */
@d max_scraps 2000 /* number of tokens in \CEE/ texts being parsed */
@d stack_size 400 /* number of simultaneous output levels */

@ The next few sections contain stuff from the file |"common.w"| that must
be included in both |"ctangle.w"| and |"cweave.w"|. It appears in
file |"common.h"|, which needs to be updated when |"common.w"| changes.

@i common.h@* Data structures exclusive to {\tt CWEAVE}. As explained in \.{common.w}, the field of a |name_info| structure that contains the |rlink| of a section name is used for a completely different purpose in the case of identifiers.  It is then called the |ilk| of the identifier, and it is used to distinguish between various types of identifiers, as follows:  \yskip\hang |normal| and |func_template| identifiers are part of the \CEE/ program that will  appear in italic type (or in typewriter type if all uppercase).  \yskip\hang |custom| identifiers are part of the \CEE/ program that will be typeset in special ways.  \yskip\hang |roman| identifiers are index entries that appear after \.{@@\^} in the \.{CWEB} file.  \yskip\hang |wildcard| identifiers are index entries that appear after \.{@@:} in the \.{CWEB} file.  \yskip\hang |typewriter| identifiers are index entries that appear after \.{@@.} in the \.{CWEB} file.  \yskip\hang |alfop|, \dots, |template_like| identifiers are \CEE/ or \CPLUSPLUS/ reserved words whose |ilk| explains how they are to be treated when \CEE/ code is being formatted.

@d ilk dummy.Ilk
@d normal 0 /* ordinary identifiers have |normal| ilk */
@d roman 1 /* normal index entries have |roman| ilk */
@d wildcard 2 /* user-formatted index entries have |wildcard| ilk */
@d typewriter 3 /* `typewriter type' entries have |typewriter| ilk */
@d abnormal(a) (a-&gt;ilk&gt;typewriter) /* tells if a name is special */
@d func_template 4 /* identifiers that can be followed by optional template */
@d custom 5 /* identifiers with user-given control sequence */
@d alfop 22 /* alphabetic operators like \&amp;{and} or \&amp;{not\_eq} */
@d else_like 26 /* \&amp;{else} */
@d public_like 40 /* \&amp;{public}, \&amp;{private}, \&amp;{protected} */
@d operator_like 41 /* \&amp;{operator} */
@d new_like 42 /* \&amp;{new} */
@d catch_like 43 /* \&amp;{catch} */
@d for_like 45 /* \&amp;{for}, \&amp;{switch}, \&amp;{while} */
@d do_like 46 /* \&amp;{do} */
@d if_like 47 /* \&amp;{if}, \&amp;{ifdef}, \&amp;{endif}, \&amp;{pragma}, \dots */
@d delete_like 48 /* \&amp;{delete} */
@d raw_ubin 49 /* `\.\&amp;' or `\.*' when looking for \&amp;{const} following */
@d const_like 50 /* \&amp;{const}, \&amp;{volatile} */
@d raw_int 51 /* \&amp;{int}, \&amp;{char}, \dots; also structure and class names  */
@d int_like 52 /* same, when not followed by left parenthesis or \DC\ */
@d case_like 53 /* \&amp;{case}, \&amp;{return}, \&amp;{goto}, \&amp;{break}, \&amp;{continue} */
@d sizeof_like 54 /* \&amp;{sizeof} */
@d struct_like 55 /* \&amp;{struct}, \&amp;{union}, \&amp;{enum}, \&amp;{class} */
@d typedef_like 56 /* \&amp;{typedef} */
@d define_like 57 /* \&amp;{define} */
@d template_like 58 /* \&amp;{template} */
@ We keep track of the current section number in |section_count|, which is the total number of sections that have started.  Sections which have been altered by a change file entry have their |changed_section| flag turned on during the first phase.

@&lt;Global variables@&gt;=
boolean change_exists; /* has any section changed? */

@ The other large memory area in \.{CWEAVE} keeps the cross-reference data. All uses of the name |p| are recorded in a linked list beginning at |p-&gt;xref|, which points into the |xmem| array. The elements of |xmem| are structures consisting of an integer, |num|, and a pointer |xlink| to another element of |xmem|.  If |x=p-&gt;xref| is a pointer into |xmem|, the value of |x-&gt;num| is either a section number where |p| is used, or |cite_flag| plus a section number where |p| is mentioned, or |def_flag| plus a section number where |p| is defined; and |x-&gt;xlink| points to the next such cross-reference for |p|, if any. This list of cross-references is in decreasing order by section number. The next unused slot in |xmem| is |xref_ptr|. The linked list ends at |&amp;xmem[0]|.  The global variable |xref_switch| is set either to |def_flag| or to zero, depending on whether the next cross-reference to an identifier is to be underlined or not in the index. This switch is set to |def_flag| when \.{@@!} or \.{@

@d} is scanned, and it is cleared to zero when
the next identifier or index entry cross-reference has been made.
Similarly, the global variable |section_xref_switch| is either
|def_flag| or |cite_flag| or zero, depending
on whether a section name is being defined, cited or used in \CEE/ text.

@&lt;Typedef declarations@&gt;=
typedef struct xref_info {
  sixteen_bits num; /* section number plus zero or |def_flag| */
  struct xref_info *xlink; /* pointer to the previous cross-reference */
} xref_info;
typedef xref_info *xref_pointer;

@ @&lt;Global...@&gt;=
xref_info xmem[max_refs]; /* contains cross-reference information */
xref_pointer xmem_end = xmem+max_refs-1;
xref_pointer xref_ptr; /* the largest occupied position in |xmem| */
sixteen_bits xref_switch,section_xref_switch; /* either zero or |def_flag| */

@ A section that is used for multi-file output (with the \.{@@(} feature) has a special first cross-reference whose |num| field is |file_flag|.

@d file_flag (3*cite_flag)
@d def_flag (2*cite_flag)
@d cite_flag 10240 /* must be strictly larger than |max_sections| */
@d xref equiv_or_xref

@&lt;Set initial values@&gt;=
xref_ptr=xmem; name_dir-&gt;xref=(char*)xmem; xref_switch=0; section_xref_switch=0;
xmem-&gt;num=0; /* sentinel value */@ A new cross-reference for an identifier is formed by calling |new_xref|, which discards duplicate entries and ignores non-underlined references to one-letter identifiers or \CEE/'s reserved words.  If the user has sent the |no_xref| flag (the \.{-x} option of the command line), it is unnecessary to keep track of cross-references for identifiers. If one were careful, one could probably make more changes around section 100 to avoid a lot of identifier looking up.

@d append_xref(c) if (xref_ptr==xmem_end) overflow("cross-reference");
  else (++xref_ptr)-&gt;num=c;
@d no_xref (flags['x']==0)
@d make_xrefs flags['x'] /* should cross references be output? */
@d is_tiny(p) ((p+1)-&gt;byte_start==(p)-&gt;byte_start+1)
@d unindexed(a) (a&lt;res_wd_end &amp;&amp; a-&gt;ilk&gt;=custom)
      /* tells if uses of a name are to be indexed */

@c
void
new_xref(p)
name_pointer p;
{
  xref_pointer q; /* pointer to previous cross-reference */
  sixteen_bits m, n; /* new and previous cross-reference value */
  if (no_xref) return;
  if ((unindexed(p) || is_tiny(p)) &amp;&amp; xref_switch==0) return;
  m=section_count+xref_switch; xref_switch=0; q=(xref_pointer)p-&gt;xref;
  if (q != xmem) {
    n=q-&gt;num;
    if (n==m || n==m+def_flag) return;
    else if (m==n+def_flag) {
        q-&gt;num=m; return;
    }
  }
  append_xref(m); xref_ptr-&gt;xlink=q; p-&gt;xref=(char*)xref_ptr;
}@ The cross-reference lists for section names are slightly different. Suppose that a section name is defined in sections $m_1$, \dots, $m_k$, cited in sections $n_1$, \dots, $n_l$, and used in sections $p_1$, \dots, $p_j$.  Then its list will contain $m_1+|def_flag|$, \dots, $m_k+|def_flag|$, $n_1+|cite_flag|$, \dots, $n_l+|cite_flag|$, $p_1$, \dots, $p_j$, in this order.  Although this method of storage takes quadratic time with respect to the length of the list, under foreseeable uses of \.{CWEAVE} this inefficiency is insignificant.

@c
void
new_section_xref(p)
name_pointer p;
{
  xref_pointer q,r; /* pointers to previous cross-references */
  q=(xref_pointer)p-&gt;xref; r=xmem;
  if (q&gt;xmem)
        while (q-&gt;num&gt;section_xref_switch) {r=q; q=q-&gt;xlink;}
  if (r-&gt;num==section_count+section_xref_switch)
        return; /* don't duplicate entries */
  append_xref(section_count+section_xref_switch);
  xref_ptr-&gt;xlink=q; section_xref_switch=0;
  if (r==xmem) p-&gt;xref=(char*)xref_ptr;
  else r-&gt;xlink=xref_ptr;
}@ The cross-reference list for a section name may also begin with |file_flag|. Here's how that flag gets put~in.

@c
void
set_file_flag(p)
name_pointer p;
{
  xref_pointer q;
  q=(xref_pointer)p-&gt;xref;
  if (q-&gt;num==file_flag) return;
  append_xref(file_flag);
  xref_ptr-&gt;xlink = q;
  p-&gt;xref = (char *)xref_ptr;
}@ A third large area of memory is used for sixteen-bit `tokens', which appear in short lists similar to the strings of characters in |byte_mem|. Token lists are used to contain the result of \CEE/ code translated into \TEX/ form; further details about them will be explained later. A |text_pointer| variable is an index into |tok_start|.

@&lt;Typedef declarations@&gt;=
typedef sixteen_bits token;
typedef token *token_pointer;
typedef token_pointer *text_pointer;

@ The first position of |tok_mem| that is unoccupied by replacement text is called |tok_ptr|, and the first unused location of |tok_start| is called |text_ptr|. Thus, we usually have |*text_ptr==tok_ptr|.

@&lt;Global variables@&gt;=
token tok_mem[max_toks]; /* tokens */
token_pointer tok_mem_end = tok_mem+max_toks-1; /* end of |tok_mem| */
token_pointer tok_start[max_texts]; /* directory into |tok_mem| */
token_pointer tok_ptr; /* first unused position in |tok_mem| */
text_pointer text_ptr; /* first unused position in |tok_start| */
text_pointer tok_start_end = tok_start+max_texts-1; /* end of |tok_start| */
token_pointer max_tok_ptr; /* largest value of |tok_ptr| */
text_pointer max_text_ptr; /* largest value of |text_ptr| */

@ @&lt;Set init...@&gt;=
tok_ptr=tok_mem+1; text_ptr=tok_start+1; tok_start[0]=tok_mem+1;
tok_start[1]=tok_mem+1;
max_tok_ptr=tok_mem+1; max_text_ptr=tok_start+1;@ Here are the three procedures needed to complete |id_lookup|:

@c
int names_match(p,first,l,t)
name_pointer p; /* points to the proposed match */
char *first; /* position of first character of string */
int l; /* length of identifier */
eight_bits t; /* desired ilk */
{
  if (length(p)!=l) return 0;
  if (p-&gt;ilk!=t &amp;&amp; !(t==normal &amp;&amp; abnormal(p))) return 0;
  return !strncmp(first,p-&gt;byte_start,l);
}

void
init_p(p,t)
name_pointer p;
eight_bits t;
{
  p-&gt;ilk=t; p-&gt;xref=(char*)xmem;
}

void
init_node(p)
name_pointer p;
{
  p-&gt;xref=(char*)xmem;
}@* Lexical scanning. Let us now consider the subroutines that read the \.{CWEB} source file and break it into meaningful units. There are four such procedures: One simply skips to the next `\.{@@\ }' or `\.{@

@*}' that begins a
section; another passes over the \TEX/ text at the beginning of a
section; the third passes over the \TEX/ text in a \CEE/ comment;
and the last, which is the most interesting, gets the next token of
a \CEE/ text.  They all use the pointers |limit| and |loc| into
the line of input currently being studied.@ Control codes in \.{CWEB}, which begin with `\.{@@}', are converted into a numeric code designed to simplify \.{CWEAVE}'s logic; for example, larger numbers are given to the control codes that denote more significant milestones, and the code of |new_section| should be the largest of all. Some of these numeric control codes take the place of |char| control codes that will not otherwise appear in the output of the scanning routines. @^ASCII code dependencies@&gt;

@d ignore 00 /* control code of no interest to \.{CWEAVE} */
@d verbatim 02 /* takes the place of extended ASCII \.{\char2} */
@d begin_short_comment 03 /* \CPLUSPLUS/ short comment */
@d begin_comment '\t' /* tab marks will not appear */
@d underline '\n' /* this code will be intercepted without confusion */
@d noop 0177 /* takes the place of ASCII delete */
@d xref_roman 0203 /* control code for `\.{@@\^}' */
@d xref_wildcard 0204 /* control code for `\.{@@:}' */
@d xref_typewriter 0205 /* control code for `\.{@@.}' */
@d TeX_string 0206 /* control code for `\.{@@t}' */
@f TeX_string TeX
@d ord 0207 /* control code for `\.{@@'}' */
@d join 0210 /* control code for `\.{@@\&amp;}' */
@d thin_space 0211 /* control code for `\.{@@,}' */
@d math_break 0212 /* control code for `\.{@@\v}' */
@d line_break 0213 /* control code for `\.{@@/}' */
@d big_line_break 0214 /* control code for `\.{@@\#}' */
@d no_line_break 0215 /* control code for `\.{@@+}' */
@d pseudo_semi 0216 /* control code for `\.{@@;}' */
@d macro_arg_open 0220 /* control code for `\.{@@[}' */
@d macro_arg_close 0221 /* control code for `\.{@@]}' */
@d trace 0222 /* control code for `\.{@@0}', `\.{@@1}' and `\.{@@2}' */
@d translit_code 0223 /* control code for `\.{@@l}' */
@d output_defs_code 0224 /* control code for `\.{@@h}' */
@d format_code 0225 /* control code for `\.{@@f}' and `\.{@@s}' */
@d definition 0226 /* control code for `\.{@@d}' */
@d begin_C 0227 /* control code for `\.{@@c}' */
@d section_name 0230 /* control code for `\.{@@&lt;}' */
@d new_section 0231 /* control code for `\.{@@\ }' and `\.{@@*}' */

@ Control codes are converted to \.{CWEAVE}'s internal representation by means of the table |ccode|.

@&lt;Global variables@&gt;=
eight_bits ccode[256]; /* meaning of a char following \.{@@} */

@ @&lt;Set ini...@&gt;=
{int c; for (c=0; c&lt;256; c++) ccode[c]=0;}
ccode[' ']=ccode['\t']=ccode['\n']=ccode['\v']=ccode['\r']=ccode['\f']
   =ccode['*']=new_section;
ccode['@@']='@@'; /* `quoted' at sign */
ccode['=']=verbatim;
ccode['d']=ccode['D']=definition;
ccode['f']=ccode['F']=ccode['s']=ccode['S']=format_code;
ccode['c']=ccode['C']=ccode['p']=ccode['P']=begin_C;
ccode['t']=ccode['T']=TeX_string;
ccode['l']=ccode['L']=translit_code;
ccode['q']=ccode['Q']=noop;
ccode['h']=ccode['H']=output_defs_code;
ccode['&amp;']=join; ccode['&lt;']=ccode['(']=section_name;
ccode['!']=underline; ccode['^']=xref_roman;
ccode[':']=xref_wildcard; ccode['.']=xref_typewriter; ccode[',']=thin_space;
ccode['|']=math_break; ccode['/']=line_break; ccode['#']=big_line_break;
ccode['+']=no_line_break; ccode[';']=pseudo_semi;
ccode['[']=macro_arg_open; ccode[']']=macro_arg_close;
ccode['\'']=ord;
@&lt;Special control codes for debugging@&gt;@;

@ Users can write \.{@@2}, \.{@@1}, and \.{@@0} to turn tracing fully on, partly on, and off, respectively.

@&lt;Special control codes for debugging@&gt;=
ccode['0']=ccode['1']=ccode['2']=trace;
@ The |skip_limbo| routine is used on the first pass to skip through portions of the input that are not in any sections, i.e., that precede the first section. After this procedure has been called, the value of |input_has_ended| will tell whether or not a section has actually been found.  There's a complication that we will postpone until later: If the \.{@@s} operation appears in limbo, we want to use it to adjust the default interpretation of identifiers.

@&lt;Predeclaration of procedures@&gt;=
void skip_limbo();

@ @c
void
skip_limbo() {
  while(1) {
    if (loc&gt;limit &amp;&amp; get_line()==0) return;
    *(limit+1)='@@';
    while (*loc!='@@') loc++; /* look for '@@', then skip two chars */
    if (loc++ &lt;=limit) { int c=ccode[(eight_bits)*loc++];
      if (c==new_section) return;
      if (c==noop) skip_restricted();
      else if (c==format_code) @&lt;Process simple format in limbo@&gt;;
    }
  }
}
@ During the definition and \CEE/ parts of a section, cross-references are made for all identifiers except reserved words. However, the right identifier in a format definition is not referenced, and the left identifier is referenced only if it has been explicitly underlined (preceded by \.{@@!}). The \TEX/ code in comments is, of course, ignored, except for \CEE/ portions enclosed in \pb; the text of a section name is skipped entirely, even if it contains \pb\ constructions.  The variables |lhs| and |rhs| point to the respective identifiers involved in a format definition.

@&lt;Global variables@&gt;=
name_pointer lhs, rhs; /* pointers to |byte_start| for format identifiers */
name_pointer res_wd_end; /* pointer to the first nonreserved identifier */

@ A much simpler processing of format definitions occurs when the definition is found in limbo.

@&lt;Process simple format in limbo@&gt;=
{
  if (get_next()!=identifier)
    err_print("! Missing left identifier of @@s");
@.Missing left identifier...@&gt;
  else {
    lhs=id_lookup(id_first,id_loc,normal);
    if (get_next()!=identifier)
      err_print("! Missing right identifier of @@s");
@.Missing right identifier...@&gt;
    else {
      rhs=id_lookup(id_first,id_loc,normal);
      lhs-&gt;ilk=rhs-&gt;ilk;
    }
  }
}
@ The |skip_TeX| routine is used on the first pass to skip through the \TEX/ code at the beginning of a section. It returns the next control code or `\.{\v}' found in the input. A |new_section| is assumed to exist at the very end of the file.

@f skip_TeX TeX

@c
unsigned
skip_TeX() /* skip past pure \TEX/ code */
{
  while (1) {
    if (loc&gt;limit &amp;&amp; get_line()==0) return(new_section);
    *(limit+1)='@@';
    while (*loc!='@@' &amp;&amp; *loc!='|') loc++;
    if (*loc++ =='|') return('|');
    if (loc&lt;=limit) return(ccode[(eight_bits)*(loc++)]);
  }
}@*1 Inputting the next token. As stated above, \.{CWEAVE}'s most interesting lexical scanning routine is the |get_next| function that inputs the next token of \CEE/ input. However, |get_next| is not especially complicated.  The result of |get_next| is either a |char| code for some special character, or it is a special code representing a pair of characters (e.g., `\.{!=}'), or it is the numeric value computed by the |ccode| table, or it is one of the following special codes:  \yskip\hang |identifier|: In this case the global variables |id_first| and |id_loc| will have been set to the beginning and ending-plus-one locations in the buffer, as required by the |id_lookup| routine.  \yskip\hang |string|: The string will have been copied into the array |section_text|; |id_first| and |id_loc| are set as above (now they are pointers into |section_text|).  \yskip\hang |constant|: The constant is copied into |section_text|, with slight modifications; |id_first| and |id_loc| are set.  \yskip\noindent Furthermore, some of the control codes cause |get_next| to take additional actions:  \yskip\hang |xref_roman|, |xref_wildcard|, |xref_typewriter|, |TeX_string|, |verbatim|: The values of |id_first| and |id_loc| will have been set to the beginning and ending-plus-one locations in the buffer.  \yskip\hang |section_name|: In this case the global variable |cur_section| will point to the |byte_start| entry for the section name that has just been scanned. The value of |cur_section_char| will be |'('| if the section name was preceded by \.{@@(} instead of \.{@

@&lt;}.

\yskip\noindent If |get_next| sees `\.{@@!}'
it sets |xref_switch| to |def_flag| and goes on to the next token.

@d constant 0200 /* \CEE/ constant */
@d string 0201 /* \CEE/ string */
@d identifier 0202 /* \CEE/ identifier or reserved word */

@&lt;Global variables@&gt;=
name_pointer cur_section; /* name of section just scanned */
char cur_section_char; /* the character just before that name */@ @&lt;Include...@&gt;=
#include &lt;ctype.h&gt; /* definition of |isalpha|, |isdigit| and so on */
#include &lt;stdlib.h&gt; /* definition of |exit| */
@ As one might expect, |get_next| consists mostly of a big switch that branches to the various special cases that can arise. \CEE/ allows underscores to appear in identifiers, and some \CEE/ compilers even allow the dollar sign.

@d isxalpha(c) ((c)=='_' || (c)=='$')
   /* non-alpha characters allowed in identifier */
@d ishigh(c) ((eight_bits)(c)&gt;0177)
@^high-bit character handling@&gt;

@&lt;Predeclaration of procedures@&gt;=
eight_bits get_next();
@ @c
eight_bits
get_next() /* produces the next input token */
{@+eight_bits c; /* the current character */
  while (1) {
    @&lt;Check if we're at the end of a preprocessor command@&gt;;
    if (loc&gt;limit &amp;&amp; get_line()==0) return(new_section);
    c=*(loc++);
    if (xisdigit(c) || c=='\\' || c=='.') @&lt;Get a constant@&gt;@;
    else if (c=='\'' || c=='"' || (c=='L'&amp;&amp;(*loc=='\'' || *loc=='"'))@|
           || (c=='&lt;' &amp;&amp; sharp_include_line==1))
        @&lt;Get a string@&gt;@;
    else if (xisalpha(c) || isxalpha(c) || ishigh(c))
      @&lt;Get an identifier@&gt;@;
    else if (c=='@@') @&lt;Get control code and possible section name@&gt;@;
    else if (xisspace(c)) continue; /* ignore spaces and tabs */
    if (c=='#' &amp;&amp; loc==buffer+1) @&lt;Raise preprocessor flag@&gt;;
    mistake: @&lt;Compress two-symbol operator@&gt;@;
    return(c);
  }
}
@ Because preprocessor commands do not fit in with the rest of the syntax of \CEE/, we have to deal with them separately.  One solution is to enclose such commands between special markers.  Thus, when a \.\# is seen as the first character of a line, |get_next| returns a special code |left_preproc| and raises a flag |preprocessing|.  We can use the same internal code number for |left_preproc| as we do for |ord|, since |get_next| changes |ord| into a string.

@d left_preproc ord /* begins a preprocessor command */
@d right_preproc 0217 /* ends a preprocessor command */

@&lt;Global variables@&gt;=
boolean preprocessing=0; /* are we scanning a preprocessor command? */

@ @&lt;Raise prep...@&gt;= {
  preprocessing=1;
  @&lt;Check if next token is |include|@&gt;;
  return (left_preproc);
}
@ An additional complication is the freakish use of \.&lt; and \.&gt; to delimit a file name in lines that start with \.{\#include}.  We must treat this file name as a string.

@&lt;Global variables@&gt;=
boolean sharp_include_line=0; /* are we scanning a |#include| line? */

@ @&lt;Check if next token is |include|@&gt;=
while (loc&lt;=buffer_end-7 &amp;&amp; xisspace(*loc)) loc++;
if (loc&lt;=buffer_end-6 &amp;&amp; strncmp(loc,"include",7)==0) sharp_include_line=1;
@ When we get to the end of a preprocessor line, we lower the flag and send a code |right_preproc|, unless the last character was a \.\\.

@&lt;Check if we're at the end of a preprocessor command@&gt;=
  while (loc==limit-1 &amp;&amp; preprocessing &amp;&amp; *loc=='\\')
    if (get_line()==0) return(new_section); /* still in preprocessor mode */
  if (loc&gt;=limit &amp;&amp; preprocessing) {
    preprocessing=sharp_include_line=0;
    return(right_preproc);
  }
@ The following code assigns values to the combinations
\.{++}, \.{--}, \.{-&gt;}, \.{&gt;=}, \.{&lt;=}, \.{==}, \.{&lt;&lt;},
\.{&gt;&gt;}, \.{!=}, \.{\v\v}, and \.{\&amp;\&amp;}, and to the \CPLUSPLUS/ combinations \.{...}, \.{::}, \.{.*} and \.{-&gt;*}. The compound assignment operators (e.g., \.{+=}) are treated as separate tokens.

@d compress(c) if (loc++&lt;=limit) return(c)

@&lt;Compress two-symbol operator@&gt;=
switch(c) {
  case '/': if (*loc=='*') {compress(begin_comment);}
    else if (*loc=='/') compress(begin_short_comment); break;
  case '+': if (*loc=='+') compress(plus_plus); break;
  case '-': if (*loc=='-') {compress(minus_minus);}
    else if (*loc=='&gt;') if (*(loc+1)=='*') {loc++; compress(minus_gt_ast);}
                        else compress(minus_gt); break;
  case '.': if (*loc=='*') {compress(period_ast);}
            else if (*loc=='.' &amp;&amp; *(loc+1)=='.') {
              loc++; compress(dot_dot_dot);
            }
            break;
  case ':': if (*loc==':') compress(colon_colon); break;
  case '=': if (*loc=='=') compress(eq_eq); break;
  case '&gt;': if (*loc=='=') {compress(gt_eq);}
    else if (*loc=='&gt;') compress(gt_gt); break;
  case '&lt;': if (*loc=='=') {compress(lt_eq);}
    else if (*loc=='&lt;') compress(lt_lt); break;
  case '&amp;': if (*loc=='&amp;') compress(and_and); break;
  case '|': if (*loc=='|') compress(or_or); break;
  case '!': if (*loc=='=') compress(not_eq); break;
}
@ @&lt;Get an identifier@&gt;= {
  id_first=--loc;
  while (isalpha(*++loc) || isdigit(*loc) || isxalpha(*loc) || ishigh(*loc));
  id_loc=loc; return(identifier);
}
@ Different conventions are followed by \TEX/ and \CEE/ to express octal and hexadecimal numbers; it is reasonable to stick to each convention within its realm.  Thus the \CEE/ part of a \.{CWEB} file has octals introduced by \.0 and hexadecimals by \.{0x}, but \.{CWEAVE} will print with \TeX/ macros that the user can redefine to fit the context. In order to simplify such macros, we replace some of the characters.  Notice that in this section and the next, |id_first| and |id_loc| are pointers into the array |section_text|, not into |buffer|.

@&lt;Get a constant@&gt;= {
  id_first=id_loc=section_text+1;
  if (*(loc-1)=='\\') {*id_loc++='~';
  while (xisdigit(*loc)) *id_loc++=*loc++;} /* octal constant */
  else if (*(loc-1)=='0') {
    if (*loc=='x' || *loc=='X') {*id_loc++='^'; loc++;
      while (xisxdigit(*loc)) *id_loc++=*loc++;} /* hex constant */
    else if (xisdigit(*loc)) {*id_loc++='~';
      while (xisdigit(*loc)) *id_loc++=*loc++;} /* octal constant */
    else goto dec; /* decimal constant */
  }
  else { /* decimal constant */
    if (*(loc-1)=='.' &amp;&amp; !xisdigit(*loc)) goto mistake; /* not a constant */
    dec: *id_loc++=*(loc-1);
    while (xisdigit(*loc) || *loc=='.') *id_loc++=*loc++;
    if (*loc=='e' || *loc=='E') { /* float constant */
      *id_loc++='_'; loc++;
      if (*loc=='+' || *loc=='-') *id_loc++=*loc++;
      while (xisdigit(*loc)) *id_loc++=*loc++;
    }
  }
  while (*loc=='u' || *loc=='U' || *loc=='l' || *loc=='L'
         || *loc=='f' || *loc=='F') {
    *id_loc++='$'; *id_loc++=toupper(*loc); loc++;
  }
  return(constant);
}
@ \CEE/ strings and character constants, delimited by double and single quotes, respectively, can contain newlines or instances of their own delimiters if they are protected by a backslash.  We follow this convention, but do not allow the string to be longer than |longest_name|.

@&lt;Get a string@&gt;= {
  char delim = c; /* what started the string */
  id_first = section_text+1;
  id_loc = section_text;
  if (delim=='\'' &amp;&amp; *(loc-2)=='@@') {*++id_loc='@@'; *++id_loc='@@';}
  *++id_loc=delim;
  if (delim=='L') { /* wide character constant */
    delim=*loc++; *++id_loc=delim;
  }
  if (delim=='&lt;') delim='&gt;'; /* for file names in |#include| lines */
  while (1) {
    if (loc&gt;=limit) {
      if(*(limit-1)!='\\') {
        err_print("! String didn't end"); loc=limit; break;
@.String didn't end@&gt;
      }
      if(get_line()==0) {
        err_print("! Input ended in middle of string"); loc=buffer; break;
@.Input ended in middle of string@&gt;
      }
    }
    if ((c=*loc++)==delim) {
      if (++id_loc&lt;=section_text_end) *id_loc=c;
      break;
    }
    if (c=='\\') if (loc&gt;=limit) continue;
      else if (++id_loc&lt;=section_text_end) {
        *id_loc = '\\'; c=*loc++;
      }
    if (++id_loc&lt;=section_text_end) *id_loc=c;
  }
  if (id_loc&gt;=section_text_end) {
    printf("\n! String too long: ");
@.String too long@&gt;
    term_write(section_text+1,25);
    printf("..."); mark_error;
  }
  id_loc++;
  return(string);
}
@ After an \.{@@} sign has been scanned, the next character tells us whether there is more work to do.

@&lt;Get control code and possible section name@&gt;= {
  c=*loc++;
  switch(ccode[(eight_bits)c]) {
    case translit_code: err_print("! Use @@l in limbo only"); continue;
@.Use @@l in limbo...@&gt;
    case underline: xref_switch=def_flag; continue;
    case trace: tracing=c-'0'; continue;
    case xref_roman: case xref_wildcard: case xref_typewriter:
    case noop: case TeX_string: c=ccode[c]; skip_restricted(); return(c);
    case section_name:
      @&lt;Scan the section name and make |cur_section| point to it@&gt;;
    case verbatim: @&lt;Scan a verbatim string@&gt;;
    case ord: @&lt;Get a string@&gt;;
    default: return(ccode[(eight_bits)c]);
  }
}
@ The occurrence of a section name sets |xref_switch| to zero, because the section name might (for example) follow \&amp;{int}.

@&lt;Scan the section name and make |cur_section| point to it@&gt;= {
  char *k; /* pointer into |section_text| */
  cur_section_char=*(loc-1);
  @&lt;Put section name into |section_text|@&gt;;
  if (k-section_text&gt;3 &amp;&amp; strncmp(k-2,"...",3)==0)
        cur_section=section_lookup(section_text+1,k-3,1); /* 1 indicates a prefix */
  else cur_section=section_lookup(section_text+1,k,0);
  xref_switch=0; return(section_name);
}
@ At the present point in the program we have |*(loc-1)==verbatim|; we set |id_first| to the beginning of the string itself, and |id_loc| to its ending-plus-one location in the buffer.  We also set |loc| to the position just after the ending delimiter.

@&lt;Scan a verbatim string@&gt;= {
  id_first=loc++; *(limit+1)='@@'; *(limit+2)='&gt;';
  while (*loc!='@@' || *(loc+1)!='&gt;') loc++;
  if (loc&gt;=limit) err_print("! Verbatim string didn't end");
@.Verbatim string didn't end@&gt;
  id_loc=loc; loc+=2;
  return (verbatim);
}
@ Section names are placed into the |section_text| array with consecutive spaces, tabs, and carriage-returns replaced by single spaces. There will be no spaces at the beginning or the end. (We set |section_text[0]=' '| to facilitate this, since the |section_lookup| routine uses |section_text[1]| as the first character of the name.)

@&lt;Set initial values@&gt;=section_text[0]=' ';

@ @&lt;Put section name...@&gt;=
k=section_text;
while (1) {
  if (loc&gt;limit &amp;&amp; get_line()==0) {
    err_print("! Input ended in section name");
@.Input ended in section name@&gt;
    loc=buffer+1; break;
  }
  c=*loc;
  @&lt;If end of name or erroneous control code, |break|@&gt;;
  loc++; if (k&lt;section_text_end) k++;
  if (xisspace(c)) {
    c=' '; if (*(k-1)==' ') k--;
  }
*k=c;
}
if (k&gt;=section_text_end) {
  printf("\n! Section name too long: ");
@.Section name too long@&gt;
  term_write(section_text+1,25);
  printf("..."); mark_harmless;
}
if (*k==' ' &amp;&amp; k&gt;section_text) k--;
@ @&lt;If end of name...@&gt;=
if (c=='@@') {
  c=*(loc+1);
  if (c=='&gt;') {
    loc+=2; break;
  }
  if (ccode[(eight_bits)c]==new_section) {
    err_print("! Section name didn't end"); break;
@.Section name didn't end@&gt;
  }
  if (c!='@@') {
    err_print("! Control codes are forbidden in section name"); break;
@.Control codes are forbidden...@&gt;
  }
  *(++k)='@@'; loc++; /* now |c==*loc| again */
}
@ This function skips over a restricted context at relatively high speed.

@&lt;Predeclaration of procedures@&gt;=
void skip_restricted();

@ @c
void
skip_restricted()
{
  id_first=loc; *(limit+1)='@@';
false_alarm:
  while (*loc!='@@') loc++;
  id_loc=loc;
  if (loc++&gt;limit) {
    err_print("! Control text didn't end"); loc=limit;
@.Control text didn't end@&gt;
  }
  else {
    if (*loc=='@@'&amp;&amp;loc&lt;=limit) {loc++; goto false_alarm;}
    if (*loc++!='&gt;')
      err_print("! Control codes are forbidden in control text");
@.Control codes are forbidden...@&gt;
  }
}
@** Phase one processing. We now have accumulated enough subroutines to make it possible to carry out \.{CWEAVE}'s first pass over the source file. If everything works right, both phase one and phase two of \.{CWEAVE} will assign the same numbers to sections, and these numbers will agree with what \.{CTANGLE} does.  The global variable |next_control| often contains the most recent output of |get_next|; in interesting cases, this will be the control code that ended a section or part of a section.

@&lt;Global variables@&gt;=
eight_bits next_control; /* control code waiting to be acting upon */@ The overall processing strategy in phase one has the following straightforward outline.

@&lt;Predeclaration of procedures@&gt;=
void phase_one();

@ @c
void
phase_one() {
  phase=1; reset_input(); section_count=0;
  skip_limbo(); change_exists=0;
  while (!input_has_ended)
    @&lt;Store cross-reference data for the current section@&gt;;
  changed_section[section_count]=change_exists;
    /* the index changes if anything does */
  phase=2; /* prepare for second phase */
  @&lt;Print error messages about unused or undefined section names@&gt;;
}
@ @&lt;Store cross-reference data...@&gt;=
{
  if (++section_count==max_sections) overflow("section number");
  changed_section[section_count]=changing;
     /* it will become 1 if any line changes */
  if (*(loc-1)=='*' &amp;&amp; show_progress) {
    printf("*%d",section_count);
    update_terminal; /* print a progress report */
  }
  @&lt;Store cross-references in the \TEX/ part of a section@&gt;;
  @&lt;Store cross-references in the definition part of a section@&gt;;
  @&lt;Store cross-references in the \CEE/ part of a section@&gt;;
  if (changed_section[section_count]) change_exists=1;
}
@ In the \TEX/ part of a section, cross-reference entries are made only for the identifiers in \CEE/ texts enclosed in \pb, or for control texts enclosed in \.{@@\^}$\,\ldots\,$\.{@@&gt;} or \.{@@.}$\,\ldots\,$\.{@@&gt;} or \.{@@:}$\,\ldots\,$\.{@@&gt;}.

@&lt;Store cross-references in the \TEX/ part of a section@&gt;=
while (1) {
  switch (next_control=skip_TeX()) {
    case translit_code: err_print("! Use @@l in limbo only"); continue;
@.Use @@l in limbo...@&gt;
    case underline: xref_switch=def_flag; continue;
    case trace: tracing=*(loc-1)-'0'; continue;
    case '|': C_xref(section_name); break;
    case xref_roman: case xref_wildcard: case xref_typewriter:
    case noop: case section_name:
      loc-=2; next_control=get_next(); /* scan to \.{@@&gt;} */
      if (next_control&gt;=xref_roman &amp;&amp; next_control&lt;=xref_typewriter) {
        @&lt;Replace |"@@@@"| by |"@@"| @&gt;@;
        new_xref(id_lookup(id_first, id_loc,next_control-identifier));
      }
      break;
  }
  if (next_control&gt;=format_code) break;
}
@ @&lt;Replace |"@@@@"| by |"@@"| @&gt;=
{
  char *src=id_first,*dst=id_first;
  while(src&lt;id_loc){
    if(*src=='@@') src++;
    *dst++=*src++;
  }
  id_loc=dst;
  while (dst&lt;src) *dst++=' '; /* clean up in case of error message display */
}
@ When we get to the following code we have |next_control&gt;=format_code|.

@&lt;Store cross-references in the definition part of a section@&gt;=
while (next_control&lt;=definition) { /* |format_code| or |definition| */
  if (next_control==definition) {
    xref_switch=def_flag; /* implied \.{@@!} */
    next_control=get_next();
  } else @&lt;Process a format definition@&gt;;
  outer_xref();
}
@ Error messages for improper format definitions will be issued in phase two. Our job in phase one is to define the |ilk| of a properly formatted identifier, and to remove cross-references to identifiers that we now discover should be unindexed.

@&lt;Process a format definition@&gt;= {
  next_control=get_next();
  if (next_control==identifier) {
    lhs=id_lookup(id_first, id_loc,normal); lhs-&gt;ilk=normal;
    if (xref_switch) new_xref(lhs);
    next_control=get_next();
    if (next_control==identifier) {
      rhs=id_lookup(id_first, id_loc,normal);
      lhs-&gt;ilk=rhs-&gt;ilk;
      if (unindexed(lhs)) { /* retain only underlined entries */
        xref_pointer q,r=NULL;
        for (q=(xref_pointer)lhs-&gt;xref;q&gt;xmem;q=q-&gt;xlink)
          if (q-&gt;num&lt;def_flag)
            if (r) r-&gt;xlink=q-&gt;xlink;
            else lhs-&gt;xref=(char*)q-&gt;xlink;
          else r=q;
      }
      next_control=get_next();
    }
  }
}
@ Finally, when the \TEX/ and definition parts have been treated, we have |next_control&gt;=begin_C|.

@&lt;Store cross-references in the \CEE/ part of a section@&gt;=
if (next_control&lt;=section_name) {  /* |begin_C| or |section_name| */
  if (next_control==begin_C) section_xref_switch=0;
  else {
    section_xref_switch=def_flag;
    if(cur_section_char=='(' &amp;&amp; cur_section!=name_dir)
      set_file_flag(cur_section);
  }
  do {
    if (next_control==section_name &amp;&amp; cur_section!=name_dir)
      new_section_xref(cur_section);
    next_control=get_next(); outer_xref();
  } while ( next_control&lt;=section_name);
}
@ @&lt;Print error messages about un...@&gt;=section_check(root)
@ The |C_xref| subroutine stores references to identifiers in \CEE/ text material beginning with the current value of |next_control| and continuing until |next_control| is `\.\{' or `\.{\v}', or until the next ``milestone'' is passed (i.e., |next_control&gt;=format_code|). If |next_control&gt;=format_code| when |C_xref| is called, nothing will happen; but if |next_control=='|'| upon entry, the procedure assumes that this is the `\.{\v}' preceding \CEE/ text that is to be processed.  The parameter |spec_ctrl| is used to change this behavior. In most cases |C_xref| is called with |spec_ctrl==ignore|, which triggers the default processing described above. If |spec_ctrl==section_name|, section names will be gobbled. This is used when \CEE/ text in the \TEX/ part or inside comments is parsed: It allows for section names to appear in \pb, but these strings will not be entered into the cross reference lists since they are not definitions of section names.  The program uses the fact that our internal code numbers satisfy the relations |xref_roman==identifier+roman| and |xref_wildcard==identifier +wildcard| and |xref_typewriter==identifier+typewriter|, as well as |normal==0|.

@&lt;Predeclaration of procedures@&gt;=
void C_xref();

@ @c
void
C_xref( spec_ctrl ) /* makes cross-references for \CEE/ identifiers */
  eight_bits spec_ctrl;
{
  name_pointer p; /* a referenced name */
  while (next_control&lt;format_code || next_control==spec_ctrl) {
    if (next_control&gt;=identifier &amp;&amp; next_control&lt;=xref_typewriter) {
      if (next_control&gt;identifier) @&lt;Replace |"@@@@"| by |"@@"| @&gt;@;
      p=id_lookup(id_first, id_loc,next_control-identifier); new_xref(p);
    }
    if (next_control==section_name) {
      section_xref_switch=cite_flag;
      new_section_xref(cur_section);
    }
    next_control=get_next();
    if (next_control=='|' || next_control==begin_comment ||
        next_control==begin_short_comment) return;
  }
}
@ The |outer_xref| subroutine is like |C_xref| except that it begins with |next_control!='|'| and ends with |next_control&gt;=format_code|. Thus, it handles \CEE/ text with embedded comments.

@&lt;Predeclaration of procedures@&gt;=
void outer_xref();

@ @c
void
outer_xref() /* extension of |C_xref| */
{
  int bal; /* brace level in comment */
  while (next_control&lt;format_code)
    if (next_control!=begin_comment &amp;&amp; next_control!=begin_short_comment)
      C_xref(ignore);
    else {
      boolean is_long_comment=(next_control==begin_comment);
      bal=copy_comment(is_long_comment,1); next_control='|';
      while (bal&gt;0) {
        C_xref(section_name); /* do not reference section names in comments */
        if (next_control=='|') bal=copy_comment(is_long_comment,bal);
        else bal=0; /* an error message will occur in phase two */
      }
    }
}
@ After phase one has looked at everything, we want to check that each section name was both defined and used.  The variable |cur_xref| will point to cross-references for the current section name of interest.

@&lt;Global variables@&gt;=
xref_pointer cur_xref; /* temporary cross-reference pointer */
boolean an_output; /* did |file_flag| precede |cur_xref|? */

@ The following recursive procedure walks through the tree of section names and prints out anomalies. @^recursion@&gt;

@&lt;Predeclaration of procedures@&gt;=
void section_check();

@ @c
void
section_check(p)
name_pointer p; /* print anomalies in subtree |p| */
{
  if (p) {
    section_check(p-&gt;llink);
    cur_xref=(xref_pointer)p-&gt;xref;
    if (cur_xref-&gt;num==file_flag) {an_output=1; cur_xref=cur_xref-&gt;xlink;}
    else an_output=0;
    if (cur_xref-&gt;num &lt;def_flag) {
      printf("\n! Never defined: &lt;"); print_section_name(p); putchar('&gt;'); mark_harmless;
@.Never defined: &lt;section name&gt;@&gt;
    }
    while (cur_xref-&gt;num &gt;=cite_flag) cur_xref=cur_xref-&gt;xlink;
    if (cur_xref==xmem &amp;&amp; !an_output) {
      printf("\n! Never used: &lt;"); print_section_name(p); putchar('&gt;'); mark_harmless;
@.Never used: &lt;section name&gt;@&gt;
    }
    section_check(p-&gt;rlink);
  }
}
@* Low-level output routines. The \TEX/ output is supposed to appear in lines at most |line_length| characters long, so we place it into an output buffer. During the output process, |out_line| will hold the current line number of the line about to be output.

@&lt;Global variables@&gt;=
char out_buf[line_length+1]; /* assembled characters */
char *out_ptr; /* just after last character in |out_buf| */
char *out_buf_end = out_buf+line_length; /* end of |out_buf| */
int out_line; /* number of next line to be output */@ The |flush_buffer| routine empties the buffer up to a given breakpoint, and moves any remaining characters to the beginning of the next line. If the |per_cent| parameter is 1 a |'%'| is appended to the line that is being output; in this case the breakpoint |b| should be strictly less than |out_buf_end|. If the |per_cent| parameter is |0|, trailing blanks are suppressed. The characters emptied from the buffer form a new line of output; if the |carryover| parameter is true, a |"%"| in that line will be carried over to the next line (so that \TEX/ will ignore the completion of commented-out text).

@d c_line_write(c) fflush(active_file),fwrite(out_buf+1,sizeof(char),c,active_file)
@d tex_putc(c) putc(c,active_file)
@d tex_new_line putc('\n',active_file)
@d tex_printf(c) fprintf(active_file,c)

@c
void
flush_buffer(b,per_cent,carryover)
char *b;  /* outputs from |out_buf+1| to |b|,where |b&lt;=out_ptr| */
boolean per_cent,carryover;
{
  char *j; j=b; /* pointer into |out_buf| */
  if (! per_cent) /* remove trailing blanks */
    while (j&gt;out_buf &amp;&amp; *j==' ') j--;
  c_line_write(j-out_buf);
  if (per_cent) tex_putc('%');
  tex_new_line; out_line++;
  if (carryover)
    while (j&gt;out_buf)
      if (*j--=='%' &amp;&amp; (j==out_buf || *j!='\\')) {
        *b--='%'; break;
      }
  if (b&lt;out_ptr) strncpy(out_buf+1,b+1,out_ptr-b);
  out_ptr-=b-out_buf;
}@ When we are copying \TEX/ source material, we retain line breaks that occur in the input, except that an empty line is not output when the \TEX/ source line was nonempty. For example, a line of the \TEX/ file that contains only an index cross-reference entry will not be copied. The |finish_line| routine is called just before |get_line| inputs a new line, and just after a line break token has been emitted during the output of translated \CEE/ text.

@c
void
finish_line() /* do this at the end of a line */
{
  char *k; /* pointer into |buffer| */
  if (out_ptr&gt;out_buf) flush_buffer(out_ptr,0,0);
  else {
    for (k=buffer; k&lt;=limit; k++)
      if (!(xisspace(*k))) return;
    flush_buffer(out_buf,0,0);
  }
}@ In particular, the |finish_line| procedure is called near the very beginning of phase two. We initialize the output variables in a slightly tricky way so that the first line of the output file will be `\.{\\input cwebmac}'.

@&lt;Set initial values@&gt;=
out_ptr=out_buf+1; out_line=1; active_file=tex_file;
*out_ptr='c'; tex_printf("\\input cwebma");
@ When we wish to append one character |c| to the output buffer, we write `|out(c)|'; this will cause the buffer to be emptied if it was already full.  If we want to append more than one character at once, we say |out_str(s)|, where |s| is a string containing the characters.  A line break will occur at a space or after a single-nonletter \TEX/ control sequence.

@d out(c) {if (out_ptr&gt;=out_buf_end) break_out(); *(++out_ptr)=c;}

@c
void
out_str(s) /* output characters from |s| to end of string */
char *s;
{
  while (*s) out(*s++);
}@ The |break_out| routine is called just before the output buffer is about to overflow. To make this routine a little faster, we initialize position 0 of the output buffer to `\.\\'; this character isn't really output.

@&lt;Set initial values@&gt;=
out_buf[0]='\\';

@ A long line is broken at a blank space or just before a backslash that isn't preceded by another backslash. In the latter case, a |'%'| is output at the break.

@&lt;Predeclaration of procedures@&gt;=
void break_out();

@ @c
void
break_out() /* finds a way to break the output line */
{
  char *k=out_ptr; /* pointer into |out_buf| */
  while (1) {
    if (k==out_buf) @&lt;Print warning message, break the line, |return|@&gt;;
    if (*k==' ') {
      flush_buffer(k,0,1); return;
    }
    if (*(k--)=='\\' &amp;&amp; *k!='\\') { /* we've decreased |k| */
      flush_buffer(k,1,1); return;
    }
  }
}
@ We get to this section only in the unusual case that the entire output line consists of a string of backslashes followed by a string of nonblank non-backslashes. In such cases it is almost always safe to break the line by putting a |'%'| just before the last character.

@&lt;Print warning message, break the line, |return|@&gt;=
{
  printf("\n! Line had to be broken (output l. %d):\n",out_line);
@.Line had to be broken@&gt;
  term_write(out_buf+1, out_ptr-out_buf-1);
  new_line; mark_harmless;
  flush_buffer(out_ptr-1,1,1); return;
}
@ Here is a macro that outputs a section number in decimal notation. The number to be converted by |out_section| is known to be less than |def_flag|, so it cannot have more than five decimal digits.  If the section is changed, we output `\.{\\*}' just after the number.

@c
void
out_section(n)
sixteen_bits n;
{
  char s[6];
  sprintf(s,"%d",n); out_str(s);
  if(changed_section[n]) out_str ("\\*");
@.\\*@&gt;
}@ The |out_name| procedure is used to output an identifier or index entry, enclosing it in braces.

@c
void
out_name(p,quote_xalpha)
name_pointer p;
boolean quote_xalpha;
{
  char *k, *k_end=(p+1)-&gt;byte_start; /* pointers into |byte_mem| */
  out('{');
  for (k=p-&gt;byte_start; k&lt;k_end; k++) {
    if (isxalpha(*k) &amp;&amp; quote_xalpha) out('\\');
@.\\\$@&gt;
@.\\\_@&gt;
    out(*k);
  }
  out('}');
}@* Routines that copy \TEX/ material. During phase two, we use subroutines |copy_limbo|, |copy_TeX|, and |copy_comment| in place of the analogous |skip_limbo|, |skip_TeX|, and |skip_comment| that were used in phase one. (Well, |copy_comment| was actually written in such a way that it functions as |skip_comment| in phase one.)  The |copy_limbo| routine, for example, takes \TEX/ material that is not part of any section and transcribes it almost verbatim to the output file. The use of `\.{@@}' signs is severely restricted in such material: `\.{@@@@}' pairs are replaced by singletons; `\.{@@l}' and `\.{@@q}' and `\.{@@s}' are interpreted.

@c
void
copy_limbo()
{
  char c;
  while (1) {
    if (loc&gt;limit &amp;&amp; (finish_line(), get_line()==0)) return;
    *(limit+1)='@@';
    while (*loc!='@@') out(*(loc++));
    if (loc++&lt;=limit) {
      c=*loc++;
      if (ccode[(eight_bits)c]==new_section) break;
      switch (ccode[(eight_bits)c]) {
        case translit_code: out_str("\\ATL"); break;
@.\\ATL@&gt;
        case '@@': out('@@'); break;
        case noop: skip_restricted(); break;
        case format_code: if (get_next()==identifier) get_next();
          if (loc&gt;=limit) get_line(); /* avoid blank lines in output */
          break; /* the operands of \.{@@s} are ignored on this pass */
        default: err_print("! Double @@ should be used in limbo");
@.Double @@ should be used...@&gt;
        out('@@');
      }
    }
  }
}@ The |copy_TeX| routine processes the \TEX/ code at the beginning of a
section; for example, the words you are now reading were copied in this
way. It returns the next control code or `\.{\v}' found in the input.
We don't copy spaces or tab marks into the beginning of a line. This
makes the test for empty lines in |finish_line| work.

@ @f copy_TeX TeX
@c
eight_bits
copy_TeX()
{
  char c; /* current character being copied */
  while (1) {
    if (loc&gt;limit &amp;&amp; (finish_line(), get_line()==0)) return(new_section);
    *(limit+1)='@@';
    while ((c=*(loc++))!='|' &amp;&amp; c!='@@') {
      out(c);
      if (out_ptr==out_buf+1 &amp;&amp; (xisspace(c))) out_ptr--;
    }
    if (c=='|') return('|');
    if (loc&lt;=limit) return(ccode[(eight_bits)*(loc++)]);
  }
}@ The |copy_comment| function issues a warning if more braces are opened than closed, and in the case of a more serious error it supplies enough braces to keep \TEX/ from complaining about unbalanced braces. Instead of copying the \TEX/ material into the output buffer, this function copies it into the token memory (in phase two only). The abbreviation |app_tok(t)| is used to append token |t| to the current token list, and it also makes sure that it is possible to append at least one further token without overflow.

@d app_tok(c) {if (tok_ptr+2&gt;tok_mem_end) overflow("token"); *(tok_ptr++)=c;}

@&lt;Predeclaration of procedures@&gt;=
int copy_comment();

@ @c
int copy_comment(is_long_comment,bal) /* copies \TEX/ code in comments */
boolean is_long_comment; /* is this a traditional \CEE/ comment? */
int bal; /* brace balance */
{
  char c; /* current character being copied */
  while (1) {
    if (loc&gt;limit) {
      if (is_long_comment) {
        if (get_line()==0) {
          err_print("! Input ended in mid-comment");
@.Input ended in mid-comment@&gt;
          loc=buffer+1; goto done;
        }
      }
      else {
        if (bal&gt;1) err_print("! Missing } in comment");
@.Missing \} in comment@&gt;
        goto done;
      }
    }
    c=*(loc++);
    if (c=='|') return(bal);
    if (is_long_comment) @&lt;Check for end of comment@&gt;;
    if (phase==2) {
      if (ishigh(c)) app_tok(quoted_char);
      app_tok(c);
    }
    @&lt;Copy special things when |c=='@@', '\\'|@&gt;;
    if (c=='{') bal++;
    else if (c=='}') {
      if(bal&gt;1) bal--;
      else {err_print("! Extra } in comment");
@.Extra \} in comment@&gt;
        if (phase==2) tok_ptr--;
      }
    }
  }
done:@&lt;Clear |bal| and |return|@&gt;;
}
@ @&lt;Check for end of comment@&gt;=
if (c=='*' &amp;&amp; *loc=='/') {
  loc++;
  if (bal&gt;1) err_print("! Missing } in comment");
@.Missing \} in comment@&gt;
  goto done;
}
@ @&lt;Copy special things when |c=='@@'...@&gt;=
if (c=='@@') {
  if (*(loc++)!='@@') {
    err_print("! Illegal use of @@ in comment");
@.Illegal use of @@...@&gt;
    loc-=2; if (phase==2) *(tok_ptr-1)=' '; goto done;
  }
}
else if (c=='\\' &amp;&amp; *loc!='@@')
  if (phase==2) app_tok(*(loc++)) else loc++;
@ We output enough right braces to keep \TEX/ happy.

@&lt;Clear |bal| and |return|@&gt;=
if (phase==2) while (bal-- &gt;0) app_tok('}');
return(0);
@** Parsing.
The most intricate part of \.{CWEAVE} is its mechanism for converting
\CEE/-like code into \TEX/ code, and we might as well plunge into this
aspect of the program now. A ``bottom up'' approach is used to parse the
\CEE/-like material, since \.{CWEAVE} must deal with fragmentary
constructions whose overall ``part of speech'' is not known.

At the lowest level, the input is represented as a sequence of entities
that we shall call {\it scraps}, where each scrap of information consists
of two parts, its {\it category} and its {\it translation}. The category
is essentially a syntactic class, and the translation is a token list that
represents \TEX/ code. Rules of syntax and semantics tell us how to
combine adjacent scraps into larger ones, and if we are lucky an entire
\CEE/ text that starts out as hundreds of small scraps will join
together into one gigantic scrap whose translation is the desired \TEX/
code. If we are unlucky, we will be left with several scraps that don't
combine; their translations will simply be output, one by one.

The combination rules are given as context-sensitive productions that are
applied from left to right. Suppose that we are currently working on the
sequence of scraps $s_1\,s_2\ldots s_n$. We try first to find the longest
production that applies to an initial substring $s_1\,s_2\ldots\,$; but if
no such productions exist, we try to find the longest production
applicable to the next substring $s_2\,s_3\ldots\,$; and if that fails, we
try to match $s_3\,s_4\ldots\,$, etc.

A production applies if the category codes have a given pattern. For
example, one of the productions (see rule~3) is
$$\hbox{|exp| }\left\{\matrix{\hbox{|binop|}\cr\hbox{|ubinop|}}\right\}
\hbox{ |exp| }\RA\hbox{ |exp|}$$
and it means that three consecutive scraps whose respective categories are
|exp|, |binop| (or |ubinop|),
and |exp| are converted to one scrap whose category
is |exp|.  The translations of the original
scraps are simply concatenated.  The case of
$$\hbox{|exp| |comma| |exp| $\RA$ |exp|} \hskip4emE_1C\,\\{opt}9\,E_2$$
(rule 4) is only slightly more complicated:
Here the resulting |exp| translation
consists not only of the three original translations, but also of the
tokens |opt| and 9 between the translations of the
|comma| and the following |exp|.
In the \TEX/ file, this will specify an optional line break after the
comma, with penalty 90.

At each opportunity the longest possible production is applied.  For
example, if the current sequence of scraps is |int_like| |cast|
|lbrace|, rule 31 is applied; but if the sequence is |int_like| |cast|
followed by anything other than |lbrace|, rule 32 takes effect.

Translation rules such as `$E_1C\,\\{opt}9\,E_2$' above use subscripts
to distinguish between translations of scraps whose categories have the
same initial letter; these subscripts are assigned from left to right.@ Here is a list of the category codes that scraps can have. (A few others, like |int_like|, have already been defined; the |cat_name| array contains a complete list.)

@d exp 1 /* denotes an expression, including perhaps a single identifier */
@d unop 2 /* denotes a unary operator */
@d binop 3 /* denotes a binary operator */
@d ubinop 4
  /* denotes an operator that can be unary or binary, depending on context */
@d cast 5 /* denotes a cast */
@d question 6 /* denotes a question mark and possibly the expressions flanking it */
@d lbrace 7 /* denotes a left brace */
@d rbrace 8 /* denotes a right brace */
@d decl_head 9 /* denotes an incomplete declaration */
@d comma 10 /* denotes a comma */
@d lpar 11 /* denotes a left parenthesis or left bracket */
@d rpar 12 /* denotes a right parenthesis or right bracket */
@d prelangle 13 /* denotes `$&lt;$' before we know what it is */
@d prerangle 14 /* denotes `$&gt;$' before we know what it is */
@d langle 15 /* denotes `$&lt;$' when it's used as angle bracket in a template */
@d colcol 18 /* denotes `::' */
@d base 19 /* denotes a colon that introduces a base specifier */
@d decl 20 /* denotes a complete declaration */
@d struct_head 21 /* denotes the beginning of a structure specifier */
@d stmt 23 /* denotes a complete statement */
@d function 24 /* denotes a complete function */
@d fn_decl 25 /* denotes a function declarator */
@d semi 27 /* denotes a semicolon */
@d colon 28 /* denotes a colon */
@d tag 29 /* denotes a statement label */
@d if_head 30 /* denotes the beginning of a compound conditional */
@d else_head 31 /* denotes a prefix for a compound statement */
@d if_clause 32 /* pending \.{if} together with a condition */
@d lproc 35 /* begins a preprocessor command */
@d rproc 36 /* ends a preprocessor command */
@d insert 37 /* a scrap that gets combined with its neighbor */
@d section_scrap 38 /* section name */
@d dead 39 /* scrap that won't combine */
@d ftemplate 59 /* \\{make\_pair} */
@d new_exp 60 /* \&amp;{new} and a following type identifier */
@d begin_arg 61 /* \.{@@[} */
@d end_arg 62 /* \.{@@]} */

@&lt;Global variables@&gt;=
char cat_name[256][12];
eight_bits cat_index;

@ @&lt;Set in...@&gt;=
    for (cat_index=0;cat_index&lt;255;cat_index++)
      strcpy(cat_name[cat_index],"UNKNOWN");
@.UNKNOWN@&gt;
    strcpy(cat_name[exp],"exp");
    strcpy(cat_name[unop],"unop");
    strcpy(cat_name[binop],"binop");
    strcpy(cat_name[ubinop],"ubinop");
    strcpy(cat_name[cast],"cast");
    strcpy(cat_name[question],"?");
    strcpy(cat_name[lbrace],"{"@q}@&gt;);
    strcpy(cat_name[rbrace],@q{@&gt;"}");
    strcpy(cat_name[decl_head],"decl_head");
    strcpy(cat_name[comma],",");
    strcpy(cat_name[lpar],"(");
    strcpy(cat_name[rpar],")");
    strcpy(cat_name[prelangle],"&lt;");
    strcpy(cat_name[prerangle],"&gt;");
    strcpy(cat_name[langle],"\\&lt;");
    strcpy(cat_name[colcol],"::");
    strcpy(cat_name[base],"\\:");
    strcpy(cat_name[decl],"decl");
    strcpy(cat_name[struct_head],"struct_head");
    strcpy(cat_name[alfop],"alfop");
    strcpy(cat_name[stmt],"stmt");
    strcpy(cat_name[function],"function");
    strcpy(cat_name[fn_decl],"fn_decl");
    strcpy(cat_name[else_like],"else_like");
    strcpy(cat_name[semi],";");
    strcpy(cat_name[colon],":");
    strcpy(cat_name[tag],"tag");
    strcpy(cat_name[if_head],"if_head");
    strcpy(cat_name[else_head],"else_head");
    strcpy(cat_name[if_clause],"if()");
    strcpy(cat_name[lproc],"#{"@q}@&gt;);
    strcpy(cat_name[rproc],@q{@&gt;"#}");
    strcpy(cat_name[insert],"insert");
    strcpy(cat_name[section_scrap],"section");
    strcpy(cat_name[dead],"@@d");
    strcpy(cat_name[public_like],"public");
    strcpy(cat_name[operator_like],"operator");
    strcpy(cat_name[new_like],"new");
    strcpy(cat_name[catch_like],"catch");
    strcpy(cat_name[for_like],"for");
    strcpy(cat_name[do_like],"do");
    strcpy(cat_name[if_like],"if");
    strcpy(cat_name[delete_like],"delete");
    strcpy(cat_name[raw_ubin],"ubinop?");
    strcpy(cat_name[const_like],"const");
    strcpy(cat_name[raw_int],"raw");
    strcpy(cat_name[int_like],"int");
    strcpy(cat_name[case_like],"case");
    strcpy(cat_name[sizeof_like],"sizeof");
    strcpy(cat_name[struct_like],"struct");
    strcpy(cat_name[typedef_like],"typedef");
    strcpy(cat_name[define_like],"define");
    strcpy(cat_name[template_like],"template");
    strcpy(cat_name[ftemplate],"ftemplate");
    strcpy(cat_name[new_exp],"new_exp");
    strcpy(cat_name[begin_arg],"@@["@q]@&gt;);
    strcpy(cat_name[end_arg],@q[@&gt;"@@]");
    strcpy(cat_name[0],"zero");
@ This code allows \.{CWEAVE} to display its parsing steps.

@c
void
print_cat(c) /* symbolic printout of a category */
eight_bits c;
{
  printf(cat_name[c]);
}@ The token lists for translated \TEX/ output contain some special control symbols as well as ordinary characters. These control symbols are interpreted by \.{CWEAVE} before they are written to the output file.  \yskip\hang |break_space| denotes an optional line break or an en space;  \yskip\hang |force| denotes a line break;  \yskip\hang |big_force| denotes a line break with additional vertical space;  \yskip\hang |preproc_line| denotes that the line will be printed flush left;  \yskip\hang |opt| denotes an optional line break (with the continuation line indented two ems with respect to the normal starting position)---this code is followed by an integer |n|, and the break will occur with penalty $10n$;  \yskip\hang |backup| denotes a backspace of one em;  \yskip\hang |cancel| obliterates any |break_space|, |opt|, |force|, or |big_force| tokens that immediately precede or follow it and also cancels any |backup| tokens that follow it;  \yskip\hang |indent| causes future lines to be indented one more em;  \yskip\hang |outdent| causes future lines to be indented one less em.  \yskip\noindent All of these tokens are removed from the \TEX/ output that comes from \CEE/ text between \pb\ signs; |break_space| and |force| and |big_force| become single spaces in this mode. The translation of other \CEE/ texts results in \TEX/ control sequences \.{\\1}, \.{\\2}, \.{\\3}, \.{\\4}, \.{\\5}, \.{\\6}, \.{\\7}, \.{\\8} corresponding respectively to |indent|, |outdent|, |opt|, |backup|, |break_space|, |force|, |big_force| and |preproc_line|. However, a sequence of consecutive `\.\ ', |break_space|, |force|, and/or |big_force| tokens is first replaced by a single token (the maximum of the given ones).  The token |math_rel| will be translated into \.{\\MRL\{}, and it will get a matching \.\} later. Other control sequences in the \TEX/ output will be `\.{\\\\\{}$\,\ldots\,$\.\}' surrounding identifiers, `\.{\\\&amp;\{}$\,\ldots\,$\.\}' surrounding reserved words, `\.{\\.\{}$\,\ldots\,$\.\}' surrounding strings, `\.{\\C\{}$\,\ldots\,$\.\}$\,$|force|' surrounding comments, and `\.{\\X$n$:}$\,\ldots\,$\.{\\X}' surrounding section names, where |n| is the section number.

@d math_rel 0206
@d big_cancel 0210 /* like |cancel|, also overrides spaces */
@d cancel 0211 /* overrides |backup|, |break_space|, |force|, |big_force| */
@d indent 0212 /* one more tab (\.{\\1}) */
@d outdent 0213 /* one less tab (\.{\\2}) */
@d opt 0214 /* optional break in mid-statement (\.{\\3}) */
@d backup 0215 /* stick out one unit to the left (\.{\\4}) */
@d break_space 0216 /* optional break between statements (\.{\\5}) */
@d force 0217 /* forced break between statements (\.{\\6}) */
@d big_force 0220 /* forced break with additional space (\.{\\7}) */
@d preproc_line 0221 /* begin line without indentation (\.{\\8}) */
@^high-bit character handling@&gt;

@d quoted_char 0222
        /* introduces a character token in the range |0200|--|0377| */
@d end_translation 0223 /* special sentinel token at end of list */
@d inserted 0224 /* sentinel to mark translations of inserts */
@d qualifier 0225 /* introduces an explicit namespace qualifier */
@ The raw input is converted into scraps according to the following table, which gives category codes followed by the translations. \def\stars {\.{**}}% The symbol `\stars' stands for `\.{\\\&amp;\{{\rm identifier}\}}', i.e., the identifier itself treated as a reserved word. The right-hand column is the so-called |mathness|, which is explained further below.  An identifier |c| of length 1 is translated as \.{\\\v c} instead of as \.{\\\\\{c\}}. An identifier \.{CAPS} in all caps is translated as \.{\\.\{CAPS\}} instead of as \.{\\\\\{CAPS\}}. An identifier that has become a reserved word via |typedef| is translated with \.{\\\&amp;} replacing \.{\\\\} and |raw_int| replacing |exp|.  A string of length greater than 20 is broken into pieces of size at most~20 with discretionary breaks in between.  \yskip\halign{\quad#\hfil&amp;\quad#\hfil&amp;\quad\hfil#\hfil\cr \.{!=}&amp;|binop|: \.{\\I}&amp;yes\cr \.{&lt;=}&amp;|binop|: \.{\\Z}&amp;yes\cr \.{&gt;=}&amp;|binop|: \.{\\G}&amp;yes\cr \.{==}&amp;|binop|: \.{\\E}&amp;yes\cr \.{\&amp;\&amp;}&amp;|binop|: \.{\\W}&amp;yes\cr \.{\v\v}&amp;|binop|: \.{\\V}&amp;yes\cr \.{++}&amp;|unop|: \.{\\PP}&amp;yes\cr \.{--}&amp;|unop|: \.{\\MM}&amp;yes\cr \.{-&gt;}&amp;|binop|: \.{\\MG}&amp;yes\cr \.{&gt;&gt;}&amp;|binop|: \.{\\GG}&amp;yes\cr \.{&lt;&lt;}&amp;|binop|: \.{\\LL}&amp;yes\cr \.{::}&amp;|colcol|: \.{\\DC}&amp;maybe\cr \.{.*}&amp;|binop|: \.{\\PA}&amp;yes\cr \.{-&gt;*}&amp;|binop|: \.{\\MGA}&amp;yes\cr \.{...}&amp;|raw_int|: \.{\\,\\ldots\\,}&amp;yes\cr \."string\."&amp;|exp|: \.{\\.\{}string with special characters quoted\.\}&amp;maybe\cr \.{@@=}string\.{@@&gt;}&amp;|exp|: \.{\\vb\{}string with special characters   quoted\.\}&amp;maybe\cr \.{@@'7'}&amp;|exp|: \.{\\.\{@@'7'\}}&amp;maybe\cr \.{077} or \.{\\77}&amp;|exp|: \.{\\T\{\\\~77\}}&amp;maybe\cr \.{0x7f}&amp;|exp|: \.{\\T\{\\\^7f\}}&amp;maybe\cr \.{77}&amp;|exp|: \.{\\T\{77\}}&amp;maybe\cr \.{77L}&amp;|exp|: \.{\\T\{77\\\$L\}}&amp;maybe\cr \.{0.1E5}&amp;|exp|: \.{\\T\{0.1\\\_5\}}&amp;maybe\cr \.+&amp;|ubinop|: \.+&amp;yes\cr \.-&amp;|ubinop|: \.-&amp;yes\cr \.*&amp;|raw_ubin|: \.*&amp;yes\cr \./&amp;|binop|: \./&amp;yes\cr \.&lt;&amp;|prelangle|: \.{\\langle}&amp;yes\cr \.=&amp;|binop|: \.{\\K}&amp;yes\cr \.&gt;&amp;|prerangle|: \.{\\rangle}&amp;yes\cr \..&amp;|binop|: \..&amp;yes\cr \.{\v}&amp;|binop|: \.{\\OR}&amp;yes\cr \.\^&amp;|binop|: \.{\\XOR}&amp;yes\cr \.\%&amp;|binop|: \.{\\MOD}&amp;yes\cr \.?&amp;|question|: \.{\\?}&amp;yes\cr \.!&amp;|unop|: \.{\\R}&amp;yes\cr \.\~&amp;|unop|: \.{\\CM}&amp;yes\cr \.\&amp;&amp;|raw_ubin|: \.{\\AND}&amp;yes\cr \.(&amp;|lpar|: \.(&amp;maybe\cr \.[&amp;|lpar|: \.[&amp;maybe\cr \.)&amp;|rpar|: \.)&amp;maybe\cr \.]&amp;|rpar|: \.]&amp;maybe\cr \.\{&amp;|lbrace|: \.\{&amp;yes\cr \.\}&amp;|lbrace|: \.\}&amp;yes\cr \.,&amp;|comma|: \.,&amp;yes\cr \.;&amp;|semi|: \.;&amp;maybe\cr \.:&amp;|colon|: \.:&amp;no\cr \.\# (within line)&amp;|ubinop|: \.{\\\#}&amp;yes\cr \.\# (at beginning)&amp;|lproc|:  |force| |preproc_line| \.{\\\#}&amp;no\cr end of \.\# line&amp;|rproc|:  |force|&amp;no\cr identifier&amp;|exp|: \.{\\\\\{}identifier with underlines and              dollar signs quoted\.\}&amp;maybe\cr \.{and}&amp;|alfop|: \stars&amp;yes\cr \.{and\_eq}&amp;|alfop|: \stars&amp;yes\cr \.{asm}&amp;|sizeof_like|: \stars&amp;maybe\cr \.{auto}&amp;|int_like|: \stars&amp;maybe\cr \.{bitand}&amp;|alfop|: \stars&amp;yes\cr \.{bitor}&amp;|alfop|: \stars&amp;yes\cr \.{bool}&amp;|raw_int|: \stars&amp;maybe\cr \.{break}&amp;|case_like|: \stars&amp;maybe\cr \.{case}&amp;|case_like|: \stars&amp;maybe\cr \.{catch}&amp;|catch_like|: \stars&amp;maybe\cr \.{char}&amp;|raw_int|: \stars&amp;maybe\cr \.{class}&amp;|struct_like|: \stars&amp;maybe\cr \.{clock\_t}&amp;|raw_int|: \stars&amp;maybe\cr \.{compl}&amp;|alfop|: \stars&amp;yes\cr \.{const}&amp;|const_like|: \stars&amp;maybe\cr \.{const\_cast}&amp;|raw_int|: \stars&amp;maybe\cr \.{continue}&amp;|case_like|: \stars&amp;maybe\cr \.{default}&amp;|case_like|: \stars&amp;maybe\cr \.{define}&amp;|define_like|: \stars&amp;maybe\cr \.{defined}&amp;|sizeof_like|: \stars&amp;maybe\cr \.{delete}&amp;|delete_like|: \stars&amp;maybe\cr \.{div\_t}&amp;|raw_int|: \stars&amp;maybe\cr \.{do}&amp;|do_like|: \stars&amp;maybe\cr \.{double}&amp;|raw_int|: \stars&amp;maybe\cr \.{dynamic\_cast}&amp;|raw_int|: \stars&amp;maybe\cr \.{elif}&amp;|if_like|: \stars&amp;maybe\cr \.{else}&amp;|else_like|: \stars&amp;maybe\cr \.{endif}&amp;|if_like|: \stars&amp;maybe\cr \.{enum}&amp;|struct_like|: \stars&amp;maybe\cr \.{error}&amp;|if_like|: \stars&amp;maybe\cr \.{explicit}&amp;|int_like|: \stars&amp;maybe\cr \.{export}&amp;|int_like|: \stars&amp;maybe\cr \.{extern}&amp;|int_like|: \stars&amp;maybe\cr \.{FILE}&amp;|raw_int|: \stars&amp;maybe\cr \.{float}&amp;|raw_int|: \stars&amp;maybe\cr \.{for}&amp;|for_like|: \stars&amp;maybe\cr \.{fpos\_t}&amp;|raw_int|: \stars&amp;maybe\cr \.{friend}&amp;|int_like|: \stars&amp;maybe\cr \.{goto}&amp;|case_like|: \stars&amp;maybe\cr \.{if}&amp;|if_like|: \stars&amp;maybe\cr \.{ifdef}&amp;|if_like|: \stars&amp;maybe\cr \.{ifndef}&amp;|if_like|: \stars&amp;maybe\cr \.{include}&amp;|if_like|: \stars&amp;maybe\cr \.{inline}&amp;|int_like|: \stars&amp;maybe\cr \.{int}&amp;|raw_int|: \stars&amp;maybe\cr \.{jmp\_buf}&amp;|raw_int|: \stars&amp;maybe\cr \.{ldiv\_t}&amp;|raw_int|: \stars&amp;maybe\cr \.{line}&amp;|if_like|: \stars&amp;maybe\cr \.{long}&amp;|raw_int|: \stars&amp;maybe\cr \.{make\_pair}&amp;|ftemplate|: \.{\\\\\{make\\\_pair\}}&amp;maybe\cr \.{mutable}&amp;|int_like|: \stars&amp;maybe\cr \.{namespace}&amp;|struct_like|: \stars&amp;maybe\cr \.{new}&amp;|new_like|: \stars&amp;maybe\cr \.{not}&amp;|alfop|: \stars&amp;yes\cr \.{not\_eq}&amp;|alfop|: \stars&amp;yes\cr \.{NULL}&amp;|exp|: \.{\\NULL}&amp;yes\cr \.{offsetof}&amp;|raw_int|: \stars&amp;maybe\cr \.{operator}&amp;|operator_like|: \stars&amp;maybe\cr \.{or}&amp;|alfop|: \stars&amp;yes\cr \.{or\_eq}&amp;|alfop|: \stars&amp;yes\cr \.{pragma}&amp;|if_like|: \stars&amp;maybe\cr \.{private}&amp;|public_like|: \stars&amp;maybe\cr \.{protected}&amp;|public_like|: \stars&amp;maybe\cr \.{ptrdiff\_t}&amp;|raw_int|: \stars&amp;maybe\cr \.{public}&amp;|public_like|: \stars&amp;maybe\cr \.{register}&amp;|int_like|: \stars&amp;maybe\cr \.{reinterpret\_cast}&amp;|raw_int|: \stars&amp;maybe\cr \.{return}&amp;|case_like|: \stars&amp;maybe\cr \.{short}&amp;|raw_int|: \stars&amp;maybe\cr \.{sig\_atomic\_t}&amp;|raw_int|: \stars&amp;maybe\cr \.{signed}&amp;|raw_int|: \stars&amp;maybe\cr \.{size\_t}&amp;|raw_int|: \stars&amp;maybe\cr \.{sizeof}&amp;|sizeof_like|: \stars&amp;maybe\cr \.{static}&amp;|int_like|: \stars&amp;maybe\cr \.{static\_cast}&amp;|raw_int|: \stars&amp;maybe\cr \.{struct}&amp;|struct_like|: \stars&amp;maybe\cr \.{switch}&amp;|for_like|: \stars&amp;maybe\cr \.{template}&amp;|template_like|: \stars&amp;maybe\cr \.{TeX}&amp;|exp|: \.{\\TeX}&amp;yes\cr \.{this}&amp;|exp|: \.{\\this}&amp;yes\cr \.{throw}&amp;|case_like|: \stars&amp;maybe\cr \.{time\_t}&amp;|raw_int|: \stars&amp;maybe\cr \.{try}&amp;|else_like|: \stars&amp;maybe\cr \.{typedef}&amp;|typedef_like|: \stars&amp;maybe\cr \.{typeid}&amp;|raw_int|: \stars&amp;maybe\cr \.{typename}&amp;|struct_like|: \stars&amp;maybe\cr \.{undef}&amp;|if_like|: \stars&amp;maybe\cr \.{union}&amp;|struct_like|: \stars&amp;maybe\cr \.{unsigned}&amp;|raw_int|: \stars&amp;maybe\cr \.{using}&amp;|int_like|: \stars&amp;maybe\cr \.{va\_dcl}&amp;|decl|: \stars&amp;maybe\cr \.{va\_list}&amp;|raw_int|: \stars&amp;maybe\cr \.{virtual}&amp;|int_like|: \stars&amp;maybe\cr \.{void}&amp;|raw_int|: \stars&amp;maybe\cr \.{volatile}&amp;|const_like|: \stars&amp;maybe\cr \.{wchar\_t}&amp;|raw_int|: \stars&amp;maybe\cr \.{while}&amp;|for_like|: \stars&amp;maybe\cr \.{xor}&amp;|alfop|: \stars&amp;yes\cr \.{xor\_eq}&amp;|alfop|: \stars&amp;yes\cr \.{@@,}&amp;|insert|: \.{\\,}&amp;maybe\cr \.{@@\v}&amp;|insert|:  |opt| \.0&amp;maybe\cr \.{@@/}&amp;|insert|:  |force|&amp;no\cr \.{@@\#}&amp;|insert|:  |big_force|&amp;no\cr \.{@@+}&amp;|insert|:  |big_cancel| \.{\{\}} |break_space|   \.{\{\}} |big_cancel|&amp;no\cr \.{@@;}&amp;|semi|: &amp;maybe\cr \.{@@[@q]@&gt;}&amp;|begin_arg|: &amp;maybe\cr \.{@q[@&gt;@@]}&amp;|end_arg|: &amp;maybe\cr \.{@@\&amp;}&amp;|insert|: \.{\\J}&amp;maybe\cr \.{@@h}&amp;|insert|: |force| \.{\\ATH} |force|&amp;no\cr \.{@

@&lt;}\thinspace section name\thinspace\.{@@&gt;}&amp;|section_scrap|:
 \.{\\X}$n$\.:translated section name\.{\\X}&amp;maybe\cr
\.{@@(@q)@&gt;}\thinspace section name\thinspace\.{@@&gt;}&amp;|section_scrap|:
 \.{\\X}$n$\.{:\\.\{}section name with special characters
      quoted\.{\ \}\\X}&amp;maybe\cr
\.{/*}comment\.{*/}&amp;|insert|: |cancel|
      \.{\\C\{}translated comment\.\} |force|&amp;no\cr
\.{//}comment&amp;|insert|: |cancel|
      \.{\\SHC\{}translated comment\.\} |force|&amp;no\cr
}

\smallskip
The construction \.{@@t}\thinspace stuff\/\thinspace\.{@@&gt;} contributes
\.{\\hbox\{}\thinspace  stuff\/\thinspace\.\} to the following scrap.

@i prod.w
@* Implementing the productions. More specifically, a scrap is a structure consisting of a category |cat| and a |text_pointer| |trans|, which points to the translation in |tok_start|.  When \CEE/ text is to be processed with the grammar above, we form an array |scrap_info| containing the initial scraps. Our production rules have the nice property that the right-hand side is never longer than the left-hand side. Therefore it is convenient to use sequential allocation for the current sequence of scraps. Five pointers are used to manage the parsing:  \yskip\hang |pp| is a pointer into |scrap_info|.  We will try to match the category codes |pp-&gt;cat,@,@,(pp+1)-&gt;cat|$,\,\,\ldots\,$ to the left-hand sides of productions.  \yskip\hang |scrap_base|, |lo_ptr|, |hi_ptr|, and |scrap_ptr| are such that the current sequence of scraps appears in positions |scrap_base| through |lo_ptr| and |hi_ptr| through |scrap_ptr|, inclusive, in the |cat| and |trans| arrays. Scraps located between |scrap_base| and |lo_ptr| have been examined, while those in positions |&gt;=hi_ptr| have not yet been looked at by the parsing process.  \yskip\noindent Initially |scrap_ptr| is set to the position of the final scrap to be parsed, and it doesn't change its value. The parsing process makes sure that |lo_ptr&gt;=pp+3|, since productions have as many as four terms, by moving scraps from |hi_ptr| to |lo_ptr|. If there are fewer than |pp+3| scraps left, the positions up to |pp+3| are filled with blanks that will not match in any productions. Parsing stops when |pp==lo_ptr+1| and |hi_ptr==scrap_ptr+1|.  Since the |scrap| structure will later be used for other purposes, we declare its second element as a union.

@&lt;Typedef declarations@&gt;=
typedef struct {
  eight_bits cat;
  eight_bits mathness;
  union {
    text_pointer Trans;
    @&lt;Rest of |trans_plus| union@&gt;@;
  } trans_plus;
} scrap;
typedef scrap *scrap_pointer;@ @d trans trans_plus.Trans /* translation texts of scraps */

@&lt;Global variables@&gt;=
scrap scrap_info[max_scraps]; /* memory array for scraps */
scrap_pointer scrap_info_end=scrap_info+max_scraps -1; /* end of |scrap_info| */
scrap_pointer pp; /* current position for reducing productions */
scrap_pointer scrap_base; /* beginning of the current scrap sequence */
scrap_pointer scrap_ptr; /* ending of the current scrap sequence */
scrap_pointer lo_ptr; /* last scrap that has been examined */
scrap_pointer hi_ptr; /* first scrap that has not been examined */
scrap_pointer max_scr_ptr; /* largest value assumed by |scrap_ptr| */

@ @&lt;Set init...@&gt;=
scrap_base=scrap_info+1;
max_scr_ptr=scrap_ptr=scrap_info;
@ Token lists in |@!tok_mem| are composed of the following kinds of items for \TEX/ output.  \yskip\item{$\bullet$}Character codes and special codes like |force| and |math_rel| represent themselves;  \item{$\bullet$}|id_flag+p| represents \.{\\\\\{{\rm identifier $p$}\}};  \item{$\bullet$}|res_flag+p| represents \.{\\\&amp;\{{\rm identifier $p$}\}};  \item{$\bullet$}|section_flag+p| represents section name |p|;  \item{$\bullet$}|tok_flag+p| represents token list number |p|;  \item{$\bullet$}|inner_tok_flag+p| represents token list number |p|, to be translated without line-break controls.

@d id_flag 10240 /* signifies an identifier */
@d res_flag 2*id_flag /* signifies a reserved word */
@d section_flag 3*id_flag /* signifies a section name */
@d tok_flag 4*id_flag /* signifies a token list */
@d inner_tok_flag 5*id_flag /* signifies a token list in `\pb' */

@c
void
print_text(p) /* prints a token list for debugging; not used in |main| */
text_pointer p;
{
  token_pointer j; /* index into |tok_mem| */
  sixteen_bits r; /* remainder of token after the flag has been stripped off */
  if (p&gt;=text_ptr) printf("BAD");
  else for (j=*p; j&lt;*(p+1); j++) {
    r=*j%id_flag;
    switch (*j/id_flag) {
      case 1: printf("\\\\{"@q}@&gt;); print_id((name_dir+r)); printf(@q{@&gt;"}");
        break; /* |id_flag| */
      case 2: printf("\\&amp;{"@q}@&gt;); print_id((name_dir+r)); printf(@q{@&gt;"}");
        break; /* |res_flag| */
      case 3: printf("&lt;"); print_section_name((name_dir+r)); printf("&gt;");
        break; /* |section_flag| */
      case 4: printf("[[%d]]",r); break; /* |tok_flag| */
      case 5: printf("|[[%d]]|",r); break; /* |inner_tok_flag| */
      default: @&lt;Print token |r| in symbolic form@&gt;;
    }
  }
  fflush(stdout);
}@ @&lt;Print token |r|...@&gt;=
switch (r) {
  case math_rel: printf("\\mathrel{"@q}@&gt;); break;
  case big_cancel: printf("[ccancel]"); break;
  case cancel: printf("[cancel]"); break;
  case indent: printf("[indent]"); break;
  case outdent: printf("[outdent]"); break;
  case backup: printf("[backup]"); break;
  case opt: printf("[opt]"); break;
  case break_space: printf("[break]"); break;
  case force: printf("[force]"); break;
  case big_force: printf("[fforce]"); break;
  case preproc_line: printf("[preproc]"); break;
  case quoted_char: j++; printf("[%o]",(unsigned)*j); break;
  case end_translation: printf("[quit]"); break;
  case inserted: printf("[inserted]"); break;
  default: putxchar(r);
}
@ The production rules listed above are embedded directly into \.{CWEAVE}, since it is easier to do this than to write an interpretive system that would handle production systems in general. Several macros are defined here so that the program for each production is fairly short.  All of our productions conform to the general notion that some |k| consecutive scraps starting at some position |j| are to be replaced by a single scrap of some category |c| whose translation is composed from the translations of the disappearing scraps. After this production has been applied, the production pointer |pp| should change by an amount |d|. Such a production can be represented by the quadruple |(j,k,c,d)|. For example, the production `|exp@,comma@,exp| $\RA$ |exp|' would be represented by `|(pp,3,exp,-2)|'; in this case the pointer |pp| should decrease by 2 after the production has been applied, because some productions with |exp| in their second or third positions might now match, but no productions have |exp| in the fourth position of their left-hand sides. Note that the value of |d| is determined by the whole collection of productions, not by an individual one. The determination of |d| has been done by hand in each case, based on the full set of productions but not on the grammar of \CEE/ or on the rules for constructing the initial scraps.  We also attach a serial number to each production, so that additional information is available when debugging. For example, the program below contains the statement `|reduce(pp,3,exp,-2,4)|' when it implements the production just mentioned.  Before calling |reduce|, the program should have appended the tokens of the new translation to the |tok_mem| array. We commonly want to append copies of several existing translations, and macros are defined to simplify these common cases. For example, \\{app2}|(pp)| will append the translations of two consecutive scraps, |pp-&gt;trans| and |(pp+1)-&gt;trans|, to the current token list. If the entire new translation is formed in this way, we write `|squash(j,k,c,d,n)|' instead of `|reduce(j,k,c,d,n)|'. For example, `|squash(pp,3,exp,-2,3)|' is an abbreviation for `\\{app3}|(pp); reduce(pp,3,exp,-2,3)|'.  A couple more words of explanation: Both |big_app| and |app| append a token (while |big_app1| to |big_app4| append the specified number of scrap translations) to the current token list. The difference between |big_app| and |app| is simply that |big_app| checks whether there can be a conflict between math and non-math tokens, and intercalates a `\.{\$}' token if necessary.  When in doubt what to use, use |big_app|.  The |mathness| is an attribute of scraps that says whether they are to be printed in a math mode context or not.  It is separate from the ``part of speech'' (the |cat|) because to make each |cat| have a fixed |mathness| (as in the original \.{WEAVE}) would multiply the number of necessary production rules.  The low two bits (i.e. |mathness % 4|) control the left boundary. (We need two bits because we allow cases |yes_math|, |no_math| and |maybe_math|, which can go either way.) The next two bits (i.e. |mathness / 4|) control the right boundary. If we combine two scraps and the right boundary of the first has a different mathness from the left boundary of the second, we insert a \.{\$} in between.  Similarly, if at printing time some irreducible scrap has a |yes_math| boundary the scrap gets preceded or followed by a \.{\$}. The left boundary is |maybe_math| if and only if the right boundary is.  The code below is an exact translation of the production rules into \CEE/, using such macros, and the reader should have no difficulty understanding the format by comparing the code with the symbolic productions as they were listed earlier.

@d no_math 2 /* should be in horizontal mode */
@d yes_math 1 /* should be in math mode */
@d maybe_math 0 /* works in either horizontal or math mode */
@d big_app2(a) big_app1(a);big_app1(a+1)
@d big_app3(a) big_app2(a);big_app1(a+2)
@d big_app4(a) big_app3(a);big_app1(a+3)
@d app(a) *(tok_ptr++)=a
@d app1(a) *(tok_ptr++)=tok_flag+(int)((a)-&gt;trans-tok_start)

@&lt;Global variables@&gt;=
int cur_mathness, init_mathness;
@ @c
void
app_str(s)
char *s;
{
  while (*s) app_tok(*(s++));
}

void
big_app(a)
token a;
{
        if (a==' ' || (a&gt;=big_cancel &amp;&amp; a&lt;=big_force)) /* non-math token */ {
                if (cur_mathness==maybe_math) init_mathness=no_math;
                else if (cur_mathness==yes_math) app_str("{}$");
                cur_mathness=no_math;
        }
        else {
                if (cur_mathness==maybe_math) init_mathness=yes_math;
                else if (cur_mathness==no_math) app_str("${}");
                cur_mathness=yes_math;
        }
        app(a);
}

void
big_app1(a)
scrap_pointer a;
{
  switch (a-&gt;mathness % 4) { /* left boundary */
  case (no_math):
    if (cur_mathness==maybe_math) init_mathness=no_math;
    else if (cur_mathness==yes_math) app_str("{}$");
    cur_mathness=a-&gt;mathness / 4; /* right boundary */
    break;
  case (yes_math):
    if (cur_mathness==maybe_math) init_mathness=yes_math;
    else if (cur_mathness==no_math) app_str("${}");
    cur_mathness=a-&gt;mathness / 4; /* right boundary */
    break;
  case (maybe_math): /* no changes */ break;
  }
  app(tok_flag+(int)((a)-&gt;trans-tok_start));
}
@ In \CEE/, new specifier names can be defined via |typedef|, and we want to make the parser recognize future occurrences of the identifier thus defined as specifiers.  This is done by the procedure |make_reserved|, which changes the |ilk| of the relevant identifier.  We first need a procedure to recursively seek the first identifier in a token list, because the identifier might be enclosed in parentheses, as when one defines a function returning a pointer.  If the first identifier found is a keyword like `\&amp;{case}', we return the special value |case_found|; this prevents underlining of identifiers in case labels.  If the first identifier is the keyword `\&amp;{operator}', we give up; users who want to index definitions of overloaded \CPLUSPLUS/ operators should say, for example, `\.{@@!@@\^\\\&amp;\{operator\} \$+\{=\}\$@@&gt;}' (or, more properly alphebetized, `\.{@@!@@:operator+=\}\{\\\&amp;\{operator\} \$+\{=\}\$@@&gt;}').

@d no_ident_found (token_pointer)0 /* distinct from any identifier token */
@d case_found (token_pointer)1 /* likewise */
@d operator_found (token_pointer)2 /* likewise */

@c
token_pointer
find_first_ident(p)
text_pointer p;
{
  token_pointer q; /* token to be returned */
  token_pointer j; /* token being looked at */
  sixteen_bits r; /* remainder of token after the flag has been stripped off */
  if (p&gt;=text_ptr) confusion("find_first_ident");
  for (j=*p; j&lt;*(p+1); j++) {
    r=*j%id_flag;
    switch (*j/id_flag) {
      case 2: /* |res_flag| */
        if (name_dir[r].ilk==case_like) return case_found;
        if (name_dir[r].ilk==operator_like) return operator_found;
        if (name_dir[r].ilk!=raw_int) break;
      case 1: return j;
      case 4: case 5: /* |tok_flag| or |inner_tok_flag| */
        if ((q=find_first_ident(tok_start+r))!=no_ident_found)
          return q;
      default: ; /* char, |section_flag|, fall thru: move on to next token */
        if (*j==inserted) return no_ident_found; /* ignore inserts */
        else if (*j==qualifier) j++; /* bypass namespace qualifier */
    }
  }
  return no_ident_found;
}@ The scraps currently being parsed must be inspected for any occurrence of the identifier that we're making reserved; hence the |for| loop below.

@c
void
make_reserved(p) /* make the first identifier in |p-&gt;trans| like |int| */
scrap_pointer p;
{
  sixteen_bits tok_value; /* the name of this identifier, plus its flag*/
  token_pointer tok_loc; /* pointer to |tok_value| */
  if ((tok_loc=find_first_ident(p-&gt;trans))&lt;=operator_found)
    return; /* this should not happen */
  tok_value=*tok_loc;
  for (;p&lt;=scrap_ptr; p==lo_ptr? p=hi_ptr: p++) {
    if (p-&gt;cat==exp) {
      if (**(p-&gt;trans)==tok_value) {
        p-&gt;cat=raw_int;
        **(p-&gt;trans)=tok_value%id_flag+res_flag;
      }
    }
  }
  (name_dir+(sixteen_bits)(tok_value%id_flag))-&gt;ilk=raw_int;
  *tok_loc=tok_value%id_flag+res_flag;
}@ In the following situations we want to mark the occurrence of an identifier as a definition: when |make_reserved| is just about to be used; after a specifier, as in |char **argv|; before a colon, as in \\{found}:; and in the declaration of a function, as in \\{main}()$\{\ldots;\}$.  This is accomplished by the invocation of |make_underlined| at appropriate times.  Notice that, in the declaration of a function, we find out that the identifier is being defined only after it has been swallowed up by an |exp|.

@c
void
make_underlined(p)
/* underline the entry for the first identifier in |p-&gt;trans| */
scrap_pointer p;
{
  token_pointer tok_loc; /* where the first identifier appears */
  if ((tok_loc=find_first_ident(p-&gt;trans))&lt;=operator_found)
    return; /* this happens, for example, in |case found:| */
  xref_switch=def_flag;
  underline_xref(*tok_loc%id_flag+name_dir);
}@ We cannot use |new_xref| to underline a cross-reference at this point because this would just make a new cross-reference at the end of the list. We actually have to search through the list for the existing cross-reference.

@&lt;Predeclaration of procedures@&gt;=
void  underline_xref();

@ @c
void
underline_xref(p)
name_pointer p;
{
  xref_pointer q=(xref_pointer)p-&gt;xref; /* pointer to cross-reference being examined */
  xref_pointer r; /* temporary pointer for permuting cross-references */
  sixteen_bits m; /* cross-reference value to be installed */
  sixteen_bits n; /* cross-reference value being examined */
  if (no_xref) return;
  m=section_count+xref_switch;
  while (q != xmem) {
    n=q-&gt;num;
    if (n==m) return;
    else if (m==n+def_flag) {
        q-&gt;num=m; return;
    }
    else if (n&gt;=def_flag &amp;&amp; n&lt;m) break;
    q=q-&gt;xlink;
  }
  @&lt;Insert new cross-reference at |q|, not at beginning of list@&gt;;
}
@ We get to this section only when the identifier is one letter long, so it didn't get a non-underlined entry during phase one.  But it may have got some explicitly underlined entries in later sections, so in order to preserve the numerical order of the entries in the index, we have to insert the new cross-reference not at the beginning of the list (namely, at |p-&gt;xref|), but rather right before |q|.

@&lt;Insert new cross-reference at |q|, not at beginning of list@&gt;=
  append_xref(0); /* this number doesn't matter */
  xref_ptr-&gt;xlink=(xref_pointer)p-&gt;xref; r=xref_ptr;
  p-&gt;xref=(char*)xref_ptr;
  while (r-&gt;xlink!=q) {r-&gt;num=r-&gt;xlink-&gt;num; r=r-&gt;xlink;}
  r-&gt;num=m; /* everything from |q| on is left undisturbed */
@ Now here's the |reduce| procedure used in our code for productions.  The `|freeze_text|' macro is used to give official status to a token list. Before saying |freeze_text|, items are appended to the current token list, and we know that the eventual number of this token list will be the current value of |text_ptr|. But no list of that number really exists as yet, because no ending point for the current list has been stored in the |tok_start| array. After saying |freeze_text|, the old current token list becomes legitimate, and its number is the current value of |text_ptr-1| since |text_ptr| has been increased. The new current token list is empty and ready to be appended to. Note that |freeze_text| does not check to see that |text_ptr| hasn't gotten too large, since it is assumed that this test was done beforehand.

@d freeze_text *(++text_ptr)=tok_ptr

@c
void
reduce(j,k,c,d,n)
scrap_pointer j;
eight_bits c;
short k, d, n;
{
  scrap_pointer i, i1; /* pointers into scrap memory */
  j-&gt;cat=c; j-&gt;trans=text_ptr;
  j-&gt;mathness=4*cur_mathness+init_mathness;
  freeze_text;
  if (k&gt;1) {
    for (i=j+k, i1=j+1; i&lt;=lo_ptr; i++, i1++) {
      i1-&gt;cat=i-&gt;cat; i1-&gt;trans=i-&gt;trans;
      i1-&gt;mathness=i-&gt;mathness;
    }
    lo_ptr=lo_ptr-k+1;
  }
  pp=(pp+d&lt;scrap_base? scrap_base: pp+d);
  @&lt;Print a snapshot of the scrap list if debugging @&gt;;
  pp--; /* we next say |pp++| */
}@ Here's the |squash| procedure, which takes advantage of the simplification that occurs when |k==1|.

@c
void
squash(j,k,c,d,n)
scrap_pointer j;
eight_bits c;
short k, d, n;
{
  scrap_pointer i; /* pointers into scrap memory */
  if (k==1) {
    j-&gt;cat=c; pp=(pp+d&lt;scrap_base? scrap_base: pp+d);
    @&lt;Print a snapshot...@&gt;;
    pp--; /* we next say |pp++| */
    return;
  }
  for (i=j; i&lt;j+k; i++) big_app1(i);
  reduce(j,k,c,d,n);
}@ If \.{CWEAVE} is being run in debugging mode, the production numbers and current stack categories will be printed out when |tracing| is set to 2; a sequence of two or more irreducible scraps will be printed out when |tracing| is set to 1.

@&lt;Global variables@&gt;=
int tracing; /* can be used to show parsing details */

@ @&lt;Print a snapsh...@&gt;=
{ scrap_pointer k; /* pointer into |scrap_info| */
  if (tracing==2) {
    printf("\n%d:",n);
    for (k=scrap_base; k&lt;=lo_ptr; k++) {
      if (k==pp) putxchar('*'); else putxchar(' ');
      if (k-&gt;mathness %4 ==  yes_math) putchar('+');
      else if (k-&gt;mathness %4 ==  no_math) putchar('-');
      print_cat(k-&gt;cat);
      if (k-&gt;mathness /4 ==  yes_math) putchar('+');
      else if (k-&gt;mathness /4 ==  no_math) putchar('-');
    }
    if (hi_ptr&lt;=scrap_ptr) printf("..."); /* indicate that more is coming */
  }
}
@ The |translate| function assumes that scraps have been stored in positions |scrap_base| through |scrap_ptr| of |cat| and |trans|. It applies productions as much as possible. The result is a token list containing the translation of the given sequence of scraps.  After calling |translate|, we will have |text_ptr+3&lt;=max_texts| and |tok_ptr+6&lt;=max_toks|, so it will be possible to create up to three token lists with up to six tokens without checking for overflow. Before calling |translate|, we should have |text_ptr&lt;max_texts| and |scrap_ptr&lt;max_scraps|, since |translate| might add a new text and a new scrap before it checks for overflow.

@c
text_pointer
translate() /* converts a sequence of scraps */
{
  scrap_pointer i, /* index into |cat| */
  j; /* runs through final scraps */
  pp=scrap_base; lo_ptr=pp-1; hi_ptr=pp;
  @&lt;If tracing, print an indication of where we are@&gt;;
  @&lt;Reduce the scraps...@&gt;;
  @&lt;Combine the irreducible scraps that remain@&gt;;
}@ @&lt;If tracing,...@&gt;=
if (tracing==2) {
  printf("\nTracing after l. %d:\n",cur_line); mark_harmless;
@.Tracing after...@&gt;
  if (loc&gt;buffer+50) {
    printf("...");
    term_write(loc-51,51);
  }
  else term_write(buffer,loc-buffer);
}
@ And here now is the code that applies productions as long as possible. Before applying the production mechanism, we must make sure it has good input (at least four scraps, the length of the lhs of the longest rules), and that there is enough room in the memory arrays to hold the appended tokens and texts.  Here we use a very conservative test; it's more important to make sure the program will still work if we change the production rules (within reason) than to squeeze the last bit of space from the memory arrays.

@d safe_tok_incr 20
@d safe_text_incr 10
@d safe_scrap_incr 10

@&lt;Reduce the scraps using the productions until no more rules apply@&gt;=
while (1) {
  @&lt;Make sure the entries |pp| through |pp+3| of |cat| are defined@&gt;;
  if (tok_ptr+safe_tok_incr&gt;tok_mem_end) {
    if (tok_ptr&gt;max_tok_ptr) max_tok_ptr=tok_ptr;
    overflow("token");
  }
  if (text_ptr+safe_text_incr&gt;tok_start_end) {
    if (text_ptr&gt;max_text_ptr) max_text_ptr=text_ptr;
    overflow("text");
  }
  if (pp&gt;lo_ptr) break;
  init_mathness=cur_mathness=maybe_math;
  @&lt;Match a production...@&gt;;
}
@ If we get to the end of the scrap list, category codes equal to zero are stored, since zero does not match anything in a production.

@&lt;Make sure the entries |pp| through |pp+3| of |cat| are defined@&gt;=
if (lo_ptr&lt;pp+3) {
  while (hi_ptr&lt;=scrap_ptr &amp;&amp; lo_ptr!=pp+3) {
    (++lo_ptr)-&gt;cat=hi_ptr-&gt;cat; lo_ptr-&gt;mathness=(hi_ptr)-&gt;mathness;
    lo_ptr-&gt;trans=(hi_ptr++)-&gt;trans;
  }
  for (i=lo_ptr+1;i&lt;=pp+3;i++) i-&gt;cat=0;
}
@ Let us consider the big switch for productions now, before looking at its context. We want to design the program so that this switch works, so we might as well not keep ourselves in suspense about exactly what code needs to be provided with a proper environment.

@d cat1 (pp+1)-&gt;cat
@d cat2 (pp+2)-&gt;cat
@d cat3 (pp+3)-&gt;cat
@d lhs_not_simple (pp-&gt;cat!=public_like
        &amp;&amp; pp-&gt;cat!=semi
        &amp;&amp; pp-&gt;cat!=prelangle
        &amp;&amp; pp-&gt;cat!=prerangle
        &amp;&amp; pp-&gt;cat!=template_like
        &amp;&amp; pp-&gt;cat!=new_like
        &amp;&amp; pp-&gt;cat!=new_exp
        &amp;&amp; pp-&gt;cat!=ftemplate
        &amp;&amp; pp-&gt;cat!=raw_ubin
        &amp;&amp; pp-&gt;cat!=const_like
        &amp;&amp; pp-&gt;cat!=raw_int
        &amp;&amp; pp-&gt;cat!=operator_like)
 /* not a production with left side length 1 */

@&lt;Match a production at |pp|, or increase |pp| if there is no match@&gt;= {
  if (cat1==end_arg &amp;&amp; lhs_not_simple)
    if (pp-&gt;cat==begin_arg) squash(pp,2,exp,-2,124);
    else squash(pp,2,end_arg,-1,125);
  else if (cat1==insert) squash(pp,2,pp-&gt;cat,-2,0);
  else if (cat2==insert) squash(pp+1,2,(pp+1)-&gt;cat,-1,0);
  else if (cat3==insert) squash(pp+2,2,(pp+2)-&gt;cat,0,0);
  else
  switch (pp-&gt;cat) {
    case exp: @&lt;Cases for |exp|@&gt;; @+break;
    case lpar: @&lt;Cases for |lpar|@&gt;; @+break;
    case unop: @&lt;Cases for |unop|@&gt;; @+break;
    case ubinop: @&lt;Cases for |ubinop|@&gt;; @+break;
    case binop: @&lt;Cases for |binop|@&gt;; @+break;
    case cast: @&lt;Cases for |cast|@&gt;; @+break;
    case sizeof_like: @&lt;Cases for |sizeof_like|@&gt;; @+break;
    case int_like: @&lt;Cases for |int_like|@&gt;; @+break;
    case public_like: @&lt;Cases for |public_like|@&gt;; @+break;
    case colcol: @&lt;Cases for |colcol|@&gt;; @+break;
    case decl_head: @&lt;Cases for |decl_head|@&gt;; @+break;
    case decl: @&lt;Cases for |decl|@&gt;; @+break;
    case base: @&lt;Cases for |base|@&gt;; @+break;
    case struct_like: @&lt;Cases for |struct_like|@&gt;; @+break;
    case struct_head: @&lt;Cases for |struct_head|@&gt;; @+break;
    case fn_decl: @&lt;Cases for |fn_decl|@&gt;; @+break;
    case function: @&lt;Cases for |function|@&gt;; @+break;
    case lbrace: @&lt;Cases for |lbrace|@&gt;; @+break;
    case if_like: @&lt;Cases for |if_like|@&gt;; @+break;
    case else_like: @&lt;Cases for |else_like|@&gt;; @+break;
    case else_head: @&lt;Cases for |else_head|@&gt;; @+break;
    case if_clause: @&lt;Cases for |if_clause|@&gt;; @+break;
    case if_head: @&lt;Cases for |if_head|@&gt;; @+break;
    case do_like: @&lt;Cases for |do_like|@&gt;; @+break;
    case case_like: @&lt;Cases for |case_like|@&gt;; @+break;
    case catch_like: @&lt;Cases for |catch_like|@&gt;; @+break;
    case tag: @&lt;Cases for |tag|@&gt;; @+break;
    case stmt: @&lt;Cases for |stmt|@&gt;; @+break;
    case semi: @&lt;Cases for |semi|@&gt;; @+break;
    case lproc: @&lt;Cases for |lproc|@&gt;; @+break;
    case section_scrap: @&lt;Cases for |section_scrap|@&gt;; @+break;
    case insert: @&lt;Cases for |insert|@&gt;; @+break;
    case prelangle: @&lt;Cases for |prelangle|@&gt;; @+break;
    case prerangle: @&lt;Cases for |prerangle|@&gt;; @+break;
    case langle: @&lt;Cases for |langle|@&gt;; @+break;
    case template_like: @&lt;Cases for |template_like|@&gt;; @+break;
    case new_like: @&lt;Cases for |new_like|@&gt;; @+break;
    case new_exp: @&lt;Cases for |new_exp|@&gt;; @+break;
    case ftemplate: @&lt;Cases for |ftemplate|@&gt;; @+break;
    case for_like: @&lt;Cases for |for_like|@&gt;; @+break;
    case raw_ubin: @&lt;Cases for |raw_ubin|@&gt;; @+break;
    case const_like: @&lt;Cases for |const_like|@&gt;; @+break;
    case raw_int: @&lt;Cases for |raw_int|@&gt;; @+break;
    case operator_like: @&lt;Cases for |operator_like|@&gt;; @+break;
    case typedef_like: @&lt;Cases for |typedef_like|@&gt;; @+break;
    case delete_like: @&lt;Cases for |delete_like|@&gt;; @+break;
    case question: @&lt;Cases for |question|@&gt;; @+break;
  }
  pp++; /* if no match was found, we move to the right */
}
@ Now comes the code that tries to match each production starting with a particular type of scrap. Whenever a match is discovered, the |squash| or |reduce| macro will cause the appropriate action to be performed, followed by |goto found|.

@&lt;Cases for |exp|@&gt;=
if (cat1==lbrace || cat1==int_like || cat1==decl) {
  make_underlined(pp); big_app1(pp); big_app(indent); app(indent);
  reduce(pp,1,fn_decl,0,1);
}
else if (cat1==unop) squash(pp,2,exp,-2,2);
else if ((cat1==binop || cat1==ubinop) &amp;&amp; cat2==exp)
        squash(pp,3,exp,-2,3);
else if (cat1==comma &amp;&amp; cat2==exp) {
  big_app2(pp);
  app(opt); app('9'); big_app1(pp+2); reduce(pp,3,exp,-2,4);
}
else if (cat1==lpar &amp;&amp; cat2==rpar &amp;&amp; cat3==colon) squash(pp+3,1,base,0,5);
else if (cat1==cast &amp;&amp; cat2==colon) squash(pp+2,1,base,0,5);
else if (cat1==semi) squash(pp,2,stmt,-1,6);
else if (cat1==colon) {
  make_underlined (pp);  squash(pp,2,tag,-1,7);
}
else if (cat1==rbrace) squash(pp,1,stmt,-1,8);
else if (cat1==lpar &amp;&amp; cat2==rpar &amp;&amp; (cat3==const_like || cat3==case_like)) {
  big_app1(pp+2); big_app(' '); big_app1(pp+3); reduce(pp+2,2,rpar,0,9);
}
else if (cat1==cast &amp;&amp; (cat2==const_like || cat2==case_like)) {
  big_app1(pp+1); big_app(' '); big_app1(pp+2); reduce(pp+1,2,cast,0,9);
}
else if (cat1==exp || cat1==cast) squash(pp,2,exp,-2,10);
@ @&lt;Cases for |lpar|@&gt;=
if ((cat1==exp||cat1==ubinop) &amp;&amp; cat2==rpar) squash(pp,3,exp,-2,11);
else if (cat1==rpar) {
  big_app1(pp); app('\\'); app(','); big_app1(pp+1);
@.\\,@&gt;
  reduce(pp,2,exp,-2,12);
}
else if ((cat1==decl_head || cat1==int_like || cat1==cast) &amp;&amp; cat2==rpar)
 squash(pp,3,cast,-2,13);
else if ((cat1==decl_head || cat1==int_like || cat1==exp) &amp;&amp; cat2==comma) {
  big_app3(pp); app(opt); app('9'); reduce(pp,3,lpar,-1,14);
}
else if (cat1==stmt || cat1==decl) {
  big_app2(pp); big_app(' '); reduce(pp,2,lpar,-1,15);
}
@ @&lt;Cases for |unop|@&gt;=
if (cat1==exp || cat1==int_like) squash(pp,2,exp,-2,16);
@ @&lt;Cases for |ubinop|@&gt;=
if (cat1==cast &amp;&amp; cat2==rpar) {
  big_app('{'); big_app1(pp); big_app('}'); big_app1(pp+1);
  reduce(pp,2,cast,-2,17);
}
else if (cat1==exp || cat1==int_like) {
  big_app('{'); big_app1(pp); big_app('}'); big_app1(pp+1);
  reduce(pp,2,cat1,-2,18);
}
else if (cat1==binop) {
  big_app(math_rel); big_app1(pp); big_app('{'); big_app1(pp+1); big_app('}');
  big_app('}'); reduce(pp,2,binop,-1,19);
}
@ @&lt;Cases for |binop|@&gt;=
if (cat1==binop) {
  big_app(math_rel); big_app('{'); big_app1(pp); big_app('}');
  big_app('{'); big_app1(pp+1); big_app('}');
  big_app('}'); reduce(pp,2,binop,-1,20);
}
@ @&lt;Cases for |cast|@&gt;=
if (cat1==lpar) squash(pp,2,lpar,-1,21);
else if (cat1==exp) {
  big_app1(pp); big_app(' '); big_app1(pp+1); reduce(pp,2,exp,-2,21);
}
else if (cat1==semi) squash(pp,1,exp,-2,22);
@ @&lt;Cases for |sizeof_like|@&gt;=
if (cat1==cast) squash(pp,2,exp,-2,23);
else if (cat1==exp) {
  big_app1(pp); big_app(' '); big_app1(pp+1); reduce(pp,2,exp,-2,24);
}
@ @&lt;Cases for |int_like|@&gt;=
if (cat1==int_like|| cat1==struct_like) {
  big_app1(pp); big_app(' '); big_app1(pp+1); reduce(pp,2,cat1,-2,25);
}
else if (cat1==exp &amp;&amp; (cat2==raw_int||cat2==struct_like))
  squash(pp,2,int_like,-2,26);
else if (cat1==exp || cat1==ubinop || cat1==colon) {
  big_app1(pp); big_app(' '); reduce(pp,1,decl_head,-1,27);
}
else if (cat1==semi || cat1==binop) squash(pp,1,decl_head,0,28);
@ @&lt;Cases for |public_like|@&gt;=
if (cat1==colon) squash(pp,2,tag,-1,29);
else squash(pp,1,int_like,-2,30);
@ @&lt;Cases for |colcol|@&gt;=
if (cat1==exp||cat1==int_like) {
  app(qualifier); squash(pp,2,cat1,-2,31);
}@+else if (cat1==colcol) squash(pp,2,colcol,-1,32);
@ @&lt;Cases for |decl_head|@&gt;=
if (cat1==comma) {
  big_app2(pp); big_app(' '); reduce(pp,2,decl_head,-1,33);
}
else if (cat1==ubinop) {
  big_app1(pp); big_app('{'); big_app1(pp+1); big_app('}');
  reduce(pp,2,decl_head,-1,34);
}
else if (cat1==exp &amp;&amp; cat2!=lpar &amp;&amp; cat2!=exp &amp;&amp; cat2!=cast) {
  make_underlined(pp+1); squash(pp,2,decl_head,-1,35);
}
else if ((cat1==binop||cat1==colon) &amp;&amp; cat2==exp &amp;&amp; (cat3==comma ||
    cat3==semi || cat3==rpar))
  squash(pp,3,decl_head,-1,36);
else if (cat1==cast) squash(pp,2,decl_head,-1,37);
else if (cat1==lbrace || cat1==int_like || cat1==decl) {
  big_app1(pp); big_app(indent); app(indent); reduce(pp,1,fn_decl,0,38);
}
else if (cat1==semi) squash(pp,2,decl,-1,39);
@ @&lt;Cases for |decl|@&gt;=
if (cat1==decl) {
  big_app1(pp); big_app(force); big_app1(pp+1);
  reduce(pp,2,decl,-1,40);
}
else if (cat1==stmt || cat1==function) {
  big_app1(pp); big_app(big_force);
  big_app1(pp+1); reduce(pp,2,cat1,-1,41);
}
@ @&lt;Cases for |base|@&gt;=
if (cat1==int_like || cat1==exp) {
  if (cat2==comma) {
    big_app1(pp); big_app(' '); big_app2(pp+1);
    app(opt); app('9'); reduce(pp,3,base,0,42);
  }
  else if (cat2==lbrace) {
    big_app1(pp); big_app(' '); big_app1(pp+1); big_app(' '); big_app1(pp+2);
    reduce(pp,3,lbrace,-2,43);
  }
}
@ @&lt;Cases for |struct_like|@&gt;=
if (cat1==lbrace) {
  big_app1(pp); big_app(' '); big_app1(pp+1); reduce(pp,2,struct_head,0,44);
}
else if (cat1==exp||cat1==int_like) {
  if (cat2==lbrace || cat2==semi) {
    make_underlined(pp+1); make_reserved(pp+1);
    big_app1(pp); big_app(' '); big_app1(pp+1);
    if (cat2==semi) reduce(pp,2,decl_head,0,45);
    else {
      big_app(' '); big_app1(pp+2);reduce(pp,3,struct_head,0,46);
    }
  }
  else if (cat2==colon) squash(pp+2,1,base,2,47);
  else if (cat2!=base) {
    big_app1(pp); big_app(' '); big_app1(pp+1); reduce(pp,2,int_like,-2,48);
  }
}
@ @&lt;Cases for |struct_head|@&gt;=
if ((cat1==decl || cat1==stmt || cat1==function) &amp;&amp; cat2==rbrace) {
  big_app1(pp); big_app(indent); big_app(force); big_app1(pp+1);
  big_app(outdent); big_app(force);  big_app1(pp+2);
  reduce(pp,3,int_like,-2,49);
}
else if (cat1==rbrace) {
  big_app1(pp); app_str("\\,"); big_app1(pp+1);
@.\\,@&gt;
  reduce(pp,2,int_like,-2,50);
}
@ @&lt;Cases for |fn_decl|@&gt;=
if (cat1==decl) {
  big_app1(pp); big_app(force); big_app1(pp+1); reduce(pp,2,fn_decl,0,51);
}
else if (cat1==stmt) {
  big_app1(pp); app(outdent); app(outdent); big_app(force);
  big_app1(pp+1); reduce(pp,2,function,-1,52);
}
@ @&lt;Cases for |function|@&gt;=
if (cat1==function || cat1==decl || cat1==stmt) {
  big_app1(pp); big_app(big_force); big_app1(pp+1); reduce(pp,2,cat1,-1,53);
}
@ @&lt;Cases for |lbrace|@&gt;=
if (cat1==rbrace) {
  big_app1(pp); app('\\'); app(','); big_app1(pp+1);
@.\\,@&gt;
  reduce(pp,2,stmt,-1,54);
}
else if ((cat1==stmt||cat1==decl||cat1==function) &amp;&amp; cat2==rbrace) {
  big_app(force); big_app1(pp);  big_app(indent); big_app(force);
  big_app1(pp+1); big_app(force); big_app(backup);  big_app1(pp+2);
  big_app(outdent); big_app(force); reduce(pp,3,stmt,-1,55);
}
else if (cat1==exp) {
  if (cat2==rbrace) squash(pp,3,exp,-2,56);
  else if (cat2==comma &amp;&amp; cat3==rbrace) squash(pp,4,exp,-2,56);
}
@ @&lt;Cases for |if_like|@&gt;=
if (cat1==exp) {
  big_app1(pp); big_app(' '); big_app1(pp+1); reduce(pp,2,if_clause,0,57);
}
@ @&lt;Cases for |else_like|@&gt;=
if (cat1==colon) squash(pp+1,1,base,1,58);
else if (cat1==lbrace) squash(pp,1,else_head,0,59);
else if (cat1==stmt) {
  big_app(force); big_app1(pp); big_app(indent); big_app(break_space);
  big_app1(pp+1); big_app(outdent); big_app(force);
  reduce(pp,2,stmt,-1,60);
}
@ @&lt;Cases for |else_head|@&gt;=
if (cat1==stmt || cat1==exp) {
  big_app(force); big_app1(pp); big_app(break_space); app(noop);
  big_app(cancel); big_app1(pp+1); big_app(force);
  reduce(pp,2,stmt,-1,61);
}
@ @&lt;Cases for |if_clause|@&gt;=
if (cat1==lbrace) squash(pp,1,if_head,0,62);
else if (cat1==stmt) {
  if (cat2==else_like) {
    big_app(force); big_app1(pp); big_app(indent); big_app(break_space);
    big_app1(pp+1); big_app(outdent); big_app(force); big_app1(pp+2);
    if (cat3==if_like) {
      big_app(' '); big_app1(pp+3); reduce(pp,4,if_like,0,63);
    }@+else reduce(pp,3,else_like,0,64);
  }
  else squash(pp,1,else_like,0,65);
}
@ @&lt;Cases for |if_head|@&gt;=
if (cat1==stmt || cat1==exp) {
  if (cat2==else_like) {
    big_app(force); big_app1(pp); big_app(break_space); app(noop);
    big_app(cancel); big_app1(pp+1); big_app(force); big_app1(pp+2);
    if (cat3==if_like) {
      big_app(' '); big_app1(pp+3); reduce(pp,4,if_like,0,66);
    }@+else reduce(pp,3,else_like,0,67);
  }
  else squash(pp,1,else_head,0,68);
}
@ @&lt;Cases for |do_like|@&gt;=
if (cat1==stmt &amp;&amp; cat2==else_like &amp;&amp; cat3==semi) {
  big_app1(pp); big_app(break_space); app(noop); big_app(cancel);
  big_app1(pp+1); big_app(cancel); app(noop); big_app(break_space);
  big_app2(pp+2); reduce(pp,4,stmt,-1,69);
}
@ @&lt;Cases for |case_like|@&gt;=
if (cat1==semi) squash(pp,2,stmt,-1,70);
else if (cat1==colon) squash(pp,2,tag,-1,71);
else if (cat1==exp) {
  big_app1(pp); big_app(' ');  big_app1(pp+1);  reduce(pp,2,exp,-2,72);
}
@ @&lt;Cases for |catch_like|@&gt;=
if (cat1==cast || cat1==exp) {
  big_app2(pp); big_app(indent); big_app(indent); reduce(pp,2,fn_decl,0,73);
}
@ @&lt;Cases for |tag|@&gt;=
if (cat1==tag) {
  big_app1(pp); big_app(break_space); big_app1(pp+1); reduce(pp,2,tag,-1,74);
}
else if (cat1==stmt||cat1==decl||cat1==function) {
  big_app(force); big_app(backup); big_app1(pp); big_app(break_space);
  big_app1(pp+1); reduce(pp,2,cat1,-1,75);
}
@ The user can decide at run-time whether short statements should be grouped together on the same line.

@d force_lines flags['f'] /* should each statement be on its own line? */
@&lt;Cases for |stmt|@&gt;=
if (cat1==stmt||cat1==decl||cat1==function) {
  big_app1(pp);
  if (cat1==function) big_app(big_force);
  else if (cat1==decl) big_app(big_force);
  else if (force_lines) big_app(force);
  else big_app(break_space);
  big_app1(pp+1); reduce(pp,2,cat1,-1,76);
}
@ @&lt;Cases for |semi|@&gt;=
big_app(' '); big_app1(pp); reduce(pp,1,stmt,-1,77);
@ @&lt;Cases for |lproc|@&gt;=
if (cat1==define_like) make_underlined(pp+2);
if (cat1==else_like || cat1==if_like ||cat1==define_like)
  squash(pp,2,lproc,0,78);
else if (cat1==rproc) {
  app(inserted); big_app2(pp); reduce(pp,2,insert,-1,79);
} else if (cat1==exp || cat1==function) {
  if (cat2==rproc) {
    app(inserted); big_app1(pp); big_app(' '); big_app2(pp+1);
    reduce(pp,3,insert,-1,80);
  }
  else if (cat2==exp &amp;&amp; cat3==rproc &amp;&amp; cat1==exp) {
    app(inserted); big_app1(pp); big_app(' '); big_app1(pp+1); app_str(" \\5");
@.\\5@&gt;
    big_app2(pp+2); reduce(pp,4,insert,-1,80);
  }
}
@ @&lt;Cases for |section_scrap|@&gt;=
if (cat1==semi) {
  big_app2(pp); big_app(force); reduce(pp,2,stmt,-2,81);
}
else squash(pp,1,exp,-2,82);
@ @&lt;Cases for |insert|@&gt;=
if (cat1)
  squash(pp,2,cat1,0,83);
@ @&lt;Cases for |prelangle|@&gt;=
init_mathness=cur_mathness=yes_math;
app('&lt;'); reduce(pp,1,binop,-2,84);
@ @&lt;Cases for |prerangle|@&gt;=
init_mathness=cur_mathness=yes_math;
app('&gt;'); reduce(pp,1,binop,-2,85);
@ @&lt;Cases for |langle|@&gt;=
if (cat1==prerangle) {
  big_app1(pp); app('\\'); app(','); big_app1(pp+1);
@.\\,@&gt;
  reduce(pp,2,cast,-1,86);
}
else if (cat1==decl_head || cat1==int_like || cat1==exp) {
  if (cat2==prerangle) squash(pp,3,cast,-1,87);
  else if (cat2==comma) {
    big_app3(pp); app(opt); app('9'); reduce(pp,3,langle,0,88);
  }
}
@ @&lt;Cases for |template_like|@&gt;=
if (cat1==exp &amp;&amp; cat2==prelangle) squash(pp+2,1,langle,2,89);
else if (cat1==exp || cat1==raw_int) {
  big_app1(pp); big_app(' '); big_app1(pp+1); reduce(pp,2,cat1,-2,90);
}@+ else squash(pp,1,raw_int,0,91);
@ @&lt;Cases for |new_like|@&gt;=
if (cat1==lpar &amp;&amp; cat2==exp &amp;&amp; cat3==rpar) squash(pp,4,new_like,0,92);
else if (cat1==cast) {
  big_app1(pp); big_app(' '); big_app1(pp+1); reduce(pp,2,exp,-2,93);
}
else if (cat1!=lpar) squash(pp,1,new_exp,0,94);
@ @&lt;Cases for |new_exp|@&gt;=
if (cat1==int_like || cat1==const_like) {
  big_app1(pp); big_app(' '); big_app1(pp+1); reduce(pp,2,new_exp,0,95);
}
else if (cat1==struct_like &amp;&amp; (cat2==exp || cat2==int_like)) {
  big_app1(pp); big_app(' '); big_app1(pp+1); big_app(' ');
  big_app1(pp+2); reduce(pp,3,new_exp,0,96);
}
else if (cat1==raw_ubin) {
  big_app1(pp); big_app('{'); big_app1(pp+1); big_app('}');
  reduce(pp,2,new_exp,0,97);
}
else if (cat1==lpar) squash(pp,1,exp,-2,98);
else if (cat1==exp) {
  big_app1(pp); big_app(' '); reduce(pp,1,exp,-2,98);
}
else if (cat1!=raw_int &amp;&amp; cat1!=struct_like &amp;&amp; cat1!=colcol)
  squash(pp,1,exp,-2,99);
@ @&lt;Cases for |ftemplate|@&gt;=
if (cat1==prelangle) squash(pp+1,1,langle,1,100);
else squash(pp,1,exp,-2,101);
@ @&lt;Cases for |for_like|@&gt;=
if (cat1==exp) {
  big_app1(pp); big_app(' '); big_app1(pp+1); reduce(pp,2,else_like,-2,102);
}
@ @&lt;Cases for |raw_ubin|@&gt;=
if (cat1==const_like) {
  big_app2(pp); app_str("\\ "); reduce(pp,2,raw_ubin,0,103);
@.\\\ @&gt;
} else squash(pp,1,ubinop,-2,104);
@ @&lt;Cases for |const_like|@&gt;=
squash(pp,1,int_like,-2,105);
@ @&lt;Cases for |raw_int|@&gt;=
if (cat1==prelangle) squash(pp+1,1,langle,1,106);
else if (cat1==colcol) squash(pp,2,colcol,-1,107);
else if (cat1==cast) squash(pp,2,raw_int,0,108);
else if (cat1==lpar) squash(pp,1,exp,-2,109);
else if (cat1!=langle) squash(pp,1,int_like,-3,110);
@ @&lt;Cases for |operator_like|@&gt;=
if (cat1==binop || cat1==unop || cat1==ubinop) {
  if (cat2==binop) break;
  big_app1(pp); big_app('{'); big_app1(pp+1); big_app('}');
  reduce(pp,2,exp,-2,111);
}
else if (cat1==new_like || cat1==delete_like) {
  big_app1(pp); big_app(' '); big_app1(pp+1); reduce(pp,2,exp,-2,112);
}
else if (cat1==comma) squash(pp,2,exp,-2,113);
else if (cat1!=raw_ubin) squash(pp,1,new_exp,0,114);
@ @&lt;Cases for |typedef_like|@&gt;=
if ((cat1==int_like || cat1==cast) &amp;&amp; (cat2==comma || cat2==semi))
  squash(pp+1,1,exp,-1,115);
else if (cat1==int_like) {
  big_app1(pp); big_app(' '); big_app1(pp+1); reduce(pp,2,typedef_like,0,116);
}
else if (cat1==exp &amp;&amp; cat2!=lpar &amp;&amp; cat2!=exp &amp;&amp; cat2!=cast) {
  make_underlined(pp+1); make_reserved(pp+1);
  big_app1(pp); big_app(' '); big_app1(pp+1); reduce(pp,2,typedef_like,0,117);
}
else if (cat1==comma) {
  big_app2(pp); big_app(' '); reduce(pp,2,typedef_like,0,118);
}
else if (cat1==semi) squash(pp,2,decl,-1,119);
else if (cat1==ubinop &amp;&amp; (cat2==ubinop || cat2==cast)) {
  big_app('{'); big_app1(pp+1); big_app('}'); big_app1(pp+2);
  reduce(pp+1,2,cat2,0,120);
}
@ @&lt;Cases for |delete_like|@&gt;=
if (cat1==lpar &amp;&amp; cat2==rpar) {
  big_app2(pp); app('\\'); app(','); big_app1(pp+2);
@.\\,@&gt;
  reduce(pp,3,delete_like,0,121);
}
else if (cat1==exp) {
  big_app1(pp); big_app(' '); big_app1(pp+1); reduce(pp,2,exp,-2,122);
}
@ @&lt;Cases for |question|@&gt;=
if (cat1==exp &amp;&amp; (cat2==colon || cat2==base)) {
  (pp+2)-&gt;mathness=5*yes_math; /* this colon should be in math mode */
  squash(pp,3,binop,-2,123);
}
@ If the initial sequence of scraps does not reduce to a single scrap, we concatenate the translations of all remaining scraps, separated by blank spaces, with dollar signs surrounding the translations of scraps where appropriate.

@&lt;Combine the irreducible scraps that remain@&gt;= {
  @&lt;If semi-tracing, show the irreducible scraps@&gt;;
  for (j=scrap_base; j&lt;=lo_ptr; j++) {
    if (j!=scrap_base) app(' ');
    if (j-&gt;mathness % 4 == yes_math) app('$');
    app1(j);
    if (j-&gt;mathness / 4 == yes_math) app('$');
    if (tok_ptr+6&gt;tok_mem_end) overflow("token");
  }
  freeze_text; return(text_ptr-1);
}
@ @&lt;If semi-tracing, show the irreducible scraps@&gt;=
if (lo_ptr&gt;scrap_base &amp;&amp; tracing==1) {
  printf("\nIrreducible scrap sequence in section %d:",section_count);
@.Irreducible scrap sequence...@&gt;
  mark_harmless;
  for (j=scrap_base; j&lt;=lo_ptr; j++) {
    printf(" "); print_cat(j-&gt;cat);
  }
}
@* Initializing the scraps. If we are going to use the powerful production mechanism just developed, we must get the scraps set up in the first place, given a \CEE/ text. A table of the initial scraps corresponding to \CEE/ tokens appeared above in the section on parsing; our goal now is to implement that table. We shall do this by implementing a subroutine called |C_parse| that is analogous to the |C_xref| routine used during phase one.  Like |C_xref|, the |C_parse| procedure starts with the current value of |next_control| and it uses the operation |next_control=get_next()| repeatedly to read \CEE/ text until encountering the next `\.{\v}' or `\.{/*}', or until |next_control&gt;=format_code|. The scraps corresponding to what it reads are appended into the |cat| and |trans| arrays, and |scrap_ptr| is advanced.

@c
void
C_parse(spec_ctrl) /* creates scraps from \CEE/ tokens */
  eight_bits spec_ctrl;
{
  int count; /* characters remaining before string break */
  while (next_control&lt;format_code || next_control==spec_ctrl) {
    @&lt;Append the scrap appropriate to |next_control|@&gt;;
    next_control=get_next();
    if (next_control=='|' || next_control==begin_comment ||
        next_control==begin_short_comment) return;
  }
}@ The following macro is used to append a scrap whose tokens have just been appended:

@d app_scrap(c,b) {
  (++scrap_ptr)-&gt;cat=(c); scrap_ptr-&gt;trans=text_ptr;
  scrap_ptr-&gt;mathness=5*(b); /* no no, yes yes, or maybe maybe */
  freeze_text;
}
@ @&lt;Append the scr...@&gt;=
@&lt;Make sure that there is room for the new scraps, tokens, and texts@&gt;;
switch (next_control) {
  case section_name:
    app(section_flag+(int)(cur_section-name_dir));
    app_scrap(section_scrap,maybe_math);
    app_scrap(exp,yes_math);@+break;
  case string: case constant: case verbatim: @&lt;Append a string or constant@&gt;;
   @+break;
  case identifier: app_cur_id(1);@+break;
  case TeX_string: @&lt;Append a \TEX/ string, without forming a scrap@&gt;;@+break;
  case '/': case '.':
    app(next_control); app_scrap(binop,yes_math);@+break;
  case '&lt;': app_str("\\langle");@+app_scrap(prelangle,yes_math);@+break;
@.\\langle@&gt;
  case '&gt;': app_str("\\rangle");@+app_scrap(prerangle,yes_math);@+break;
@.\\rangle@&gt;
  case '=': app_str("\\K"); app_scrap(binop,yes_math);@+break;
@.\\K@&gt;
  case '|': app_str("\\OR"); app_scrap(binop,yes_math);@+break;
@.\\OR@&gt;
  case '^': app_str("\\XOR"); app_scrap(binop,yes_math);@+break;
@.\\XOR@&gt;
  case '%': app_str("\\MOD"); app_scrap(binop,yes_math);@+break;
@.\\MOD@&gt;
  case '!': app_str("\\R"); app_scrap(unop,yes_math);@+break;
@.\\R@&gt;
  case '~': app_str("\\CM"); app_scrap(unop,yes_math);@+break;
@.\\CM@&gt;
  case '+': case '-': app(next_control); app_scrap(ubinop,yes_math);@+break;
  case '*': app(next_control); app_scrap(raw_ubin,yes_math);@+break;
  case '&amp;': app_str("\\AND"); app_scrap(raw_ubin,yes_math);@+break;
@.\\AND@&gt;
  case '?': app_str("\\?"); app_scrap(question,yes_math);@+break;
@.\\?@&gt;
  case '#': app_str("\\#"); app_scrap(ubinop,yes_math);@+break;
@.\\\#@&gt;
  case ignore: case xref_roman: case xref_wildcard:
  case xref_typewriter: case noop:@+break;
  case '(': case '[': app(next_control); app_scrap(lpar,maybe_math);@+break;
  case ')': case ']': app(next_control); app_scrap(rpar,maybe_math);@+break;
  case '{': app_str("\\{"@q}@&gt;); app_scrap(lbrace,yes_math);@+break;
@.\\\{@&gt;@q}@&gt;
  case '}': app_str(@q{@&gt;"\\}"); app_scrap(rbrace,yes_math);@+break;
@q{@&gt;@.\\\}@&gt;
  case ',': app(','); app_scrap(comma,yes_math);@+break;
  case ';': app(';'); app_scrap(semi,maybe_math);@+break;
  case ':': app(':'); app_scrap(colon,no_math);@+break;@/
  @t\4@&gt;  @&lt;Cases involving nonstandard characters@&gt;@;
  case thin_space: app_str("\\,"); app_scrap(insert,maybe_math);@+break;
@.\\,@&gt;
  case math_break: app(opt); app_str("0");
    app_scrap(insert,maybe_math);@+break;
  case line_break: app(force); app_scrap(insert,no_math);@+break;
  case left_preproc: app(force); app(preproc_line);
    app_str("\\#"); app_scrap(lproc,no_math);@+break;
@.\\\#@&gt;
  case right_preproc: app(force); app_scrap(rproc,no_math);@+break;
  case big_line_break: app(big_force); app_scrap(insert,no_math);@+break;
  case no_line_break: app(big_cancel); app(noop); app(break_space);
    app(noop); app(big_cancel);
    app_scrap(insert,no_math);@+break;
  case pseudo_semi: app_scrap(semi,maybe_math);@+break;
  case macro_arg_open: app_scrap(begin_arg,maybe_math);@+break;
  case macro_arg_close: app_scrap(end_arg,maybe_math);@+break;
  case join: app_str("\\J"); app_scrap(insert,no_math);@+break;
@.\\J@&gt;
  case output_defs_code: app(force); app_str("\\ATH"); app(force);
    app_scrap(insert,no_math);@+break;
@.\\ATH@&gt;
  default: app(inserted); app(next_control);
    app_scrap(insert,maybe_math);@+break;
}
@ @&lt;Make sure that there is room for the new...@&gt;=
if (scrap_ptr+safe_scrap_incr&gt;scrap_info_end ||
  tok_ptr+safe_tok_incr&gt;tok_mem_end @| ||
  text_ptr+safe_text_incr&gt;tok_start_end) {
  if (scrap_ptr&gt;max_scr_ptr) max_scr_ptr=scrap_ptr;
  if (tok_ptr&gt;max_tok_ptr) max_tok_ptr=tok_ptr;
  if (text_ptr&gt;max_text_ptr) max_text_ptr=text_ptr;
  overflow("scrap/token/text");
}
@ Some nonstandard characters may have entered \.{CWEAVE} by means of standard ones. They are converted to \TEX/ control sequences so that it is possible to keep \.{CWEAVE} from outputting unusual |char| codes.

@&lt;Cases involving nonstandard characters@&gt;=
case not_eq: app_str("\\I");@+app_scrap(binop,yes_math);@+break;
@.\\I@&gt;
case lt_eq: app_str("\\Z");@+app_scrap(binop,yes_math);@+break;
@.\\Z@&gt;
case gt_eq: app_str("\\G");@+app_scrap(binop,yes_math);@+break;
@.\\G@&gt;
case eq_eq: app_str("\\E");@+app_scrap(binop,yes_math);@+break;
@.\\E@&gt;
case and_and: app_str("\\W");@+app_scrap(binop,yes_math);@+break;
@.\\W@&gt;
case or_or: app_str("\\V");@+app_scrap(binop,yes_math);@+break;
@.\\V@&gt;
case plus_plus: app_str("\\PP");@+app_scrap(unop,yes_math);@+break;
@.\\PP@&gt;
case minus_minus: app_str("\\MM");@+app_scrap(unop,yes_math);@+break;
@.\\MM@&gt;
case minus_gt: app_str("\\MG");@+app_scrap(binop,yes_math);@+break;
@.\\MG@&gt;
case gt_gt: app_str("\\GG");@+app_scrap(binop,yes_math);@+break;
@.\\GG@&gt;
case lt_lt: app_str("\\LL");@+app_scrap(binop,yes_math);@+break;
@.\\LL@&gt;
case dot_dot_dot: app_str("\\,\\ldots\\,");@+app_scrap(raw_int,yes_math);
  @+break;
@.\\,@&gt;
@.\\ldots@&gt;
case colon_colon: app_str("\\DC");@+app_scrap(colcol,maybe_math);@+break;
@.\\DC@&gt;
case period_ast: app_str("\\PA");@+app_scrap(binop,yes_math);@+break;
@.\\PA@&gt;
case minus_gt_ast: app_str("\\MGA");@+app_scrap(binop,yes_math);@+break;
@.\\MGA@&gt;
@ The following code must use |app_tok| instead of |app| in order to protect against overflow. Note that |tok_ptr+1&lt;=max_toks| after |app_tok| has been used, so another |app| is legitimate before testing again.  Many of the special characters in a string must be prefixed by `\.\\' so that \TEX/ will print them properly. @^special string characters@&gt;

@&lt;Append a string or constant@&gt;=
count= -1;
if (next_control==constant) app_str("\\T{"@q}@&gt;);
@.\\T@&gt;
else if (next_control==string) {
  count=20; app_str("\\.{"@q}@&gt;);
}
@.\\.@&gt;
else app_str("\\vb{"@q}@&gt;);
@.\\vb@&gt;
while (id_first&lt;id_loc) {
  if (count==0) { /* insert a discretionary break in a long string */
     app_str(@q(@&gt;@q{@&gt;"}\\)\\.{"@q}@&gt;); count=20;
@q(@&gt;@.\\)@&gt;
  }
@^high-bit character handling@&gt;
  if((eight_bits)(*id_first)&gt;0177) {
    app_tok(quoted_char);
    app_tok((eight_bits)(*id_first++));
  }
  else {
    switch (*id_first) {
      case  ' ':case '\\':case '#':case '%':case '$':case '^':
      case '{': case '}': case '~': case '&amp;': case '_': app('\\'); break;
@.\\\ @&gt;
@.\\\\@&gt;
@.\\\#@&gt;
@.\\\%@&gt;
@.\\\$@&gt;
@.\\\^@&gt;
@.\\\{@&gt;@q}@&gt;
@q{@&gt;@.\\\}@&gt;
@.\\\~@&gt;
@.\\\&amp;@&gt;
@.\\\_@&gt;
      case '@@': if (*(id_first+1)=='@@') id_first++;
        else err_print("! Double @@ should be used in strings");
@.Double @@ should be used...@&gt;
    }
    app_tok(*id_first++);
  }
  count--;
}
app(@q{@&gt;'}');
app_scrap(exp,maybe_math);
@ We do not make the \TEX/ string into a scrap, because there is no telling what the user will be putting into it; instead we leave it open, to be picked up by the next scrap. If it comes at the end of a section, it will be made into a scrap when |finish_C| is called.  There's a known bug here, in cases where an adjacent scrap is |prelangle| or |prerangle|. Then the \TEX/ string can disappear when the \.{\\langle} or \.{\\rangle} becomes \.{&lt;} or \.{&gt;}. For example, if the user writes \.{\v x&lt;@@ty@@&gt;\v}, the \TEX/ string \.{\\hbox\{y\}} eventually becomes part of an |insert| scrap, which is combined with a |prelangle| scrap and eventually lost. The best way to work around this bug is probably to enclose the \.{@@t...@@&gt;} in \.{@@[...@@]} so that the \TEX/ string is treated as an expression. @^bug, known@&gt;

@&lt;Append a \TEX/ string, without forming a scrap@&gt;=
app_str("\\hbox{"@q}@&gt;);
@^high-bit character handling@&gt;
while (id_first&lt;id_loc)
  if((eight_bits)(*id_first)&gt;0177) {
    app_tok(quoted_char);
    app_tok((eight_bits)(*id_first++));
  }
  else {
    if (*id_first=='@@') id_first++;
    app_tok(*id_first++);
  }
app(@q{@&gt;'}');
@ The function |app_cur_id| appends the current identifier to the token list; it also builds a new scrap if |scrapping==1|.

@&lt;Predeclaration of procedures@&gt;=
void app_cur_id();

@ @c
void
app_cur_id(scrapping)
boolean scrapping; /* are we making this into a scrap? */
{
  name_pointer p=id_lookup(id_first,id_loc,normal);
  if (p-&gt;ilk&lt;=custom) { /* not a reserved word */
    app(id_flag+(int)(p-name_dir));
    if (scrapping) app_scrap(p-&gt;ilk==func_template? ftemplate: exp,
                             p-&gt;ilk==custom? yes_math: maybe_math);
@.\\NULL@&gt;
  } else {
    app(res_flag+(int)(p-name_dir));
    if (scrapping) {
      if (p-&gt;ilk==alfop) app_scrap(ubinop,yes_math)@;
      else app_scrap(p-&gt;ilk,maybe_math);
    }
  }
}
@ When the `\.{\v}' that introduces \CEE/ text is sensed, a call on |C_translate| will return a pointer to the \TEX/ translation of that text. If scraps exist in |scrap_info|, they are unaffected by this translation process.

@c
text_pointer
C_translate()
{
  text_pointer p; /* points to the translation */
  scrap_pointer save_base; /* holds original value of |scrap_base| */
  save_base=scrap_base; scrap_base=scrap_ptr+1;
  C_parse(section_name); /* get the scraps together */
  if (next_control!='|') err_print("! Missing '|' after C text");
@.Missing '|'...@&gt;
  app_tok(cancel); app_scrap(insert,maybe_math);
        /* place a |cancel| token as a final ``comment'' */
  p=translate(); /* make the translation */
  if (scrap_ptr&gt;max_scr_ptr) max_scr_ptr=scrap_ptr;
  scrap_ptr=scrap_base-1; scrap_base=save_base; /* scrap the scraps */
  return(p);
}@ The |outer_parse| routine is to |C_parse| as |outer_xref| is to |C_xref|: It constructs a sequence of scraps for \CEE/ text until |next_control&gt;=format_code|. Thus, it takes care of embedded comments.  The token list created from within `\pb' brackets is output as an argument to \.{\\PB}, if the user has invoked \.{CWEAVE} with the \.{+e} flag. Although \.{cwebmac} ignores \.{\\PB}, other macro packages might use it to localize the special meaning of the macros that mark up program text.

@d make_pb flags['e']

@c
void
outer_parse() /* makes scraps from \CEE/ tokens and comments */
{
  int bal; /* brace level in comment */
  text_pointer p, q; /* partial comments */
  while (next_control&lt;format_code)
    if (next_control!=begin_comment &amp;&amp; next_control!=begin_short_comment)
      C_parse(ignore);
    else {
      boolean is_long_comment=(next_control==begin_comment);
      @&lt;Make sure that there is room for the new...@&gt;;
      app(cancel); app(inserted);
      if (is_long_comment) app_str("\\C{"@q}@&gt;);
@.\\C@&gt;
      else app_str("\\SHC{"@q}@&gt;);
@.\\SHC@&gt;
      bal=copy_comment(is_long_comment,1); next_control=ignore;
      while (bal&gt;0) {
        p=text_ptr; freeze_text; q=C_translate();
         /* at this point we have |tok_ptr+6&lt;=max_toks| */
        app(tok_flag+(int)(p-tok_start));
        if (make_pb) app_str("\\PB{");
@.\\PB@&gt;
        app(inner_tok_flag+(int)(q-tok_start));
        if (make_pb)  app_tok('}');
        if (next_control=='|') {
          bal=copy_comment(is_long_comment,bal);
          next_control=ignore;
        }
        else bal=0; /* an error has been reported */
      }
      app(force); app_scrap(insert,no_math);
        /* the full comment becomes a scrap */
    }
}@* Output of tokens.
So far our programs have only built up multi-layered token lists in
\.{CWEAVE}'s internal memory; we have to figure out how to get them into
the desired final form. The job of converting token lists to characters in
the \TEX/ output file is not difficult, although it is an implicitly
recursive process. Four main considerations had to be kept in mind when
this part of \.{CWEAVE} was designed.  (a) There are two modes of output:
|outer| mode, which translates tokens like |force| into line-breaking
control sequences, and |inner| mode, which ignores them except that blank
spaces take the place of line breaks. (b) The |cancel| instruction applies
to adjacent token or tokens that are output, and this cuts across levels
of recursion since `|cancel|' occurs at the beginning or end of a token
list on one level. (c) The \TEX/ output file will be semi-readable if line
breaks are inserted after the result of tokens like |break_space| and
|force|.  (d) The final line break should be suppressed, and there should
be no |force| token output immediately after `\.{\\Y\\B}'.@ The output process uses a stack to keep track of what is going on at different ``levels'' as the token lists are being written out. Entries on this stack have three parts:  \yskip\hang |end_field| is the |tok_mem| location where the token list of a particular level will end;  \yskip\hang |tok_field| is the |tok_mem| location from which the next token on a particular level will be read;  \yskip\hang |mode_field| is the current mode, either |inner| or |outer|.  \yskip\noindent The current values of these quantities are referred to quite frequently, so they are stored in a separate place instead of in the |stack| array. We call the current values |cur_end|, |cur_tok|, and |cur_mode|.  The global variable |stack_ptr| tells how many levels of output are currently in progress. The end of output occurs when an |end_translation| token is found, so the stack is never empty except when we first begin the output process.

@d inner 0 /* value of |mode| for \CEE/ texts within \TEX/ texts */
@d outer 1 /* value of |mode| for \CEE/ texts in sections */

@&lt;Typedef declarations@&gt;= typedef int mode;
typedef struct {
  token_pointer end_field; /* ending location of token list */
  token_pointer tok_field; /* present location within token list */
  boolean mode_field; /* interpretation of control tokens */
} output_state;
typedef output_state *stack_pointer;

@ @d cur_end cur_state.end_field /* current ending location in |tok_mem| */
@d cur_tok cur_state.tok_field /* location of next output token in |tok_mem| */
@d cur_mode cur_state.mode_field /* current mode of interpretation */
@d init_stack stack_ptr=stack;cur_mode=outer /* initialize the stack */

@&lt;Global variables@&gt;=
output_state cur_state; /* |cur_end|, |cur_tok|, |cur_mode| */
output_state stack[stack_size]; /* info for non-current levels */
stack_pointer stack_ptr; /* first unused location in the output state stack */
stack_pointer stack_end=stack+stack_size-1; /* end of |stack| */
stack_pointer max_stack_ptr; /* largest value assumed by |stack_ptr| */

@ @&lt;Set init...@&gt;=
max_stack_ptr=stack;
@ To insert token-list |p| into the output, the |push_level| subroutine is called; it saves the old level of output and gets a new one going. The value of |cur_mode| is not changed.

@c
void
push_level(p) /* suspends the current level */
text_pointer p;
{
  if (stack_ptr==stack_end) overflow("stack");
  if (stack_ptr&gt;stack) { /* save current state */
    stack_ptr-&gt;end_field=cur_end;
    stack_ptr-&gt;tok_field=cur_tok;
    stack_ptr-&gt;mode_field=cur_mode;
  }
  stack_ptr++;
  if (stack_ptr&gt;max_stack_ptr) max_stack_ptr=stack_ptr;
  cur_tok=*p; cur_end=*(p+1);
}@ Conversely, the |pop_level| routine restores the conditions that were in force when the current level was begun. This subroutine will never be called when |stack_ptr==1|.

@c
void
pop_level()
{
  cur_end=(--stack_ptr)-&gt;end_field;
  cur_tok=stack_ptr-&gt;tok_field; cur_mode=stack_ptr-&gt;mode_field;
}@ The |get_output| function returns the next byte of output that is not a reference to a token list. It returns the values |identifier| or |res_word| or |section_code| if the next token is to be an identifier (typeset in italics), a reserved word (typeset in boldface), or a section name (typeset by a complex routine that might generate additional levels of output). In these cases |cur_name| points to the identifier or section name in question.

@&lt;Global variables@&gt;=
name_pointer cur_name;

@ @d res_word 0201 /* returned by |get_output| for reserved words */
@d section_code 0200 /* returned by |get_output| for section names */

@c
eight_bits
get_output() /* returns the next token of output */
{
  sixteen_bits a; /* current item read from |tok_mem| */
  restart: while (cur_tok==cur_end) pop_level();
  a=*(cur_tok++);
  if (a&gt;=0400) {
    cur_name=a % id_flag + name_dir;
    switch (a / id_flag) {
      case 2: return(res_word); /* |a==res_flag+cur_name| */
      case 3: return(section_code); /* |a==section_flag+cur_name| */
      case 4: push_level(a % id_flag + tok_start); goto restart;
        /* |a==tok_flag+cur_name| */
      case 5: push_level(a % id_flag + tok_start); cur_mode=inner; goto restart;
        /* |a==inner_tok_flag+cur_name| */
      default: return(identifier); /* |a==id_flag+cur_name| */
    }
  }
  return(a);
}@ The real work associated with token output is done by |make_output|. This procedure appends an |end_translation| token to the current token list, and then it repeatedly calls |get_output| and feeds characters to the output buffer until reaching the |end_translation| sentinel. It is possible for |make_output| to be called recursively, since a section name may include embedded \CEE/ text; however, the depth of recursion never exceeds one level, since section names cannot be inside of section names.  A procedure called |output_C| does the scanning, translation, and output of \CEE/ text within `\pb' brackets, and this procedure uses |make_output| to output the current token list. Thus, the recursive call of |make_output| actually occurs when |make_output| calls |output_C| while outputting the name of a section. @^recursion@&gt;

@c
void
output_C() /* outputs the current token list */
{
  token_pointer save_tok_ptr;
  text_pointer save_text_ptr;
  sixteen_bits save_next_control; /* values to be restored */
  text_pointer p; /* translation of the \CEE/ text */
  save_tok_ptr=tok_ptr; save_text_ptr=text_ptr;
  save_next_control=next_control; next_control=ignore; p=C_translate();
  app(inner_tok_flag+(int)(p-tok_start));
  if (make_pb) {
    out_str("\\PB{"); make_output(); out('}');
@.\\PB@&gt;
  }@+else make_output(); /* output the list */
  if (text_ptr&gt;max_text_ptr) max_text_ptr=text_ptr;
  if (tok_ptr&gt;max_tok_ptr) max_tok_ptr=tok_ptr;
  text_ptr=save_text_ptr; tok_ptr=save_tok_ptr; /* forget the tokens */
  next_control=save_next_control; /* restore |next_control| to original state */
}@ Here is \.{CWEAVE}'s major output handler.

@&lt;Predeclaration of procedures@&gt;=
void make_output();

@ @c
void
make_output() /* outputs the equivalents of tokens */
{
  eight_bits a, /* current output byte */
  b; /* next output byte */
  int c; /* count of |indent| and |outdent| tokens */
  char scratch[longest_name]; /* scratch area for section names */
  char *k, *k_limit; /* indices into |scratch| */
  char *j; /* index into |buffer| */
  char *p; /* index into |byte_mem| */
  char delim; /* first and last character of string being copied */
  char *save_loc, *save_limit; /* |loc| and |limit| to be restored */
  name_pointer cur_section_name; /* name of section being output */
  boolean save_mode; /* value of |cur_mode| before a sequence of breaks */
  app(end_translation); /* append a sentinel */
  freeze_text; push_level(text_ptr-1);
  while (1) {
    a=get_output();
    reswitch: switch(a) {
      case end_translation: return;
      case identifier: case res_word: @&lt;Output an identifier@&gt;; break;
      case section_code: @&lt;Output a section name@&gt;; break;
      case math_rel: out_str("\\MRL{"@q}@&gt;);
@.\\MRL@&gt;
      case noop: case inserted: break;
      case cancel: case big_cancel: c=0; b=a;
        while (1) {
          a=get_output();
          if (a==inserted) continue;
          if ((a&lt;indent &amp;&amp; !(b==big_cancel&amp;&amp;a==' ')) || a&gt;big_force) break;
          if (a==indent) c++; else if (a==outdent) c--;
          else if (a==opt) a=get_output();
        }
        @&lt;Output saved |indent| or |outdent| tokens@&gt;;
        goto reswitch;
      case indent: case outdent: case opt: case backup: case break_space:
      case force: case big_force: case preproc_line:
	  	@&lt;Output a control,look ahead in case of line breaks, possibly |goto reswitch|@&gt;; break;
      case quoted_char: out(*(cur_tok++));
      case qualifier: break;
      default: out(a); /* otherwise |a| is an ordinary character */
    }
  }
}
@ @&lt;Output saved...@&gt;=
  for (;c&gt;0;c--) out_str("\\1");
@.\\1@&gt;
  for (;c&lt;0;c++) out_str("\\2");
@.\\2@&gt;
@ The current mode does not affect the behavior of \.{CWEAVE}'s output routine except when we are outputting control tokens.

@&lt;Output a control...@&gt;=
if (a&lt;break_space || a==preproc_line) {
  if (cur_mode==outer) {
    out('\\'); out(a-cancel+'0');
@.\\1@&gt;
@.\\2@&gt;
@.\\3@&gt;
@.\\4@&gt;
@.\\8@&gt;
    if (a==opt) {
      b=get_output(); /* |opt| is followed by a digit */
      if (b!='0' || force_lines==0) out(b)@;
      else out_str("{-1}"); /* |force_lines| encourages more \.{@@\v} breaks */
    }
  } else if (a==opt) b=get_output(); /* ignore digit following |opt| */
  }
else @&lt;Look ahead for strongest line break, |goto reswitch|@&gt;
@ If several of the tokens |break_space|, |force|, |big_force| occur in a row, possibly mixed with blank spaces (which are ignored), the largest one is used. A line break also occurs in the output file, except at the very end of the translation. The very first line break is suppressed (i.e., a line break that follows `\.{\\Y\\B}').

@&lt;Look ahead for strongest line break, |goto reswitch|@&gt;= {
  b=a; save_mode=cur_mode; c=0;
  while (1) {
    a=get_output();
    if (a==inserted) continue;
    if (a==cancel || a==big_cancel) {
      @&lt;Output saved |indent| or |outdent| tokens@&gt;;
      goto reswitch; /* |cancel| overrides everything */
    }
    if ((a!=' ' &amp;&amp; a&lt;indent) || a==backup || a&gt;big_force) {
      if (save_mode==outer) {
        if (out_ptr&gt;out_buf+3 &amp;&amp; strncmp(out_ptr-3,"\\Y\\B",4)==0)
          goto reswitch;
        @&lt;Output saved |indent| or |outdent| tokens@&gt;;
        out('\\'); out(b-cancel+'0');
@.\\5@&gt;
@.\\6@&gt;
@.\\7@&gt;
        if (a!=end_translation) finish_line();
      }
      else if (a!=end_translation &amp;&amp; cur_mode==inner) out(' ');
      goto reswitch;
    }
    if (a==indent) c++;
    else if (a==outdent) c--;
    else if (a==opt) a=get_output();
    else if (a&gt;b) b=a; /* if |a==' '| we have |a&lt;b| */
  }
}
@ An identifier of length one does not have to be enclosed in braces, and it looks slightly better if set in a math-italic font instead of a (slightly narrower) text-italic font. Thus we output `\.{\\\v}\.{a}' but `\.{\\\\\{aa\}}'.

@&lt;Output an identifier@&gt;=
out('\\');
if (a==identifier) {
  if (cur_name-&gt;ilk==custom &amp;&amp; !doing_format) {
 custom_out:
    for (p=cur_name-&gt;byte_start;p&lt;(cur_name+1)-&gt;byte_start;p++)
      out(*p=='_'? 'x': *p=='$'? 'X': *p);
    break;
  } else if (is_tiny(cur_name)) out('|')@;
@.\\|@&gt;
  else { delim='.';
    for (p=cur_name-&gt;byte_start;p&lt;(cur_name+1)-&gt;byte_start;p++)
      if (xislower(*p)) { /* not entirely uppercase */
         delim='\\'; break;
      }
  out(delim);
  }
@.\\\\@&gt;
@.\\.@&gt;
}@+else if (cur_name-&gt;ilk==alfop) {
  out('X');
  goto custom_out;
}@+else out('&amp;'); /* |a==res_word| */
@.\\\&amp;@&gt;
if (is_tiny(cur_name)) {
  if (isxalpha((cur_name-&gt;byte_start)[0]))
    out('\\');
  out((cur_name-&gt;byte_start)[0]);
}
else out_name(cur_name,1);
@ The remaining part of |make_output| is somewhat more complicated. When we output a section name, we may need to enter the parsing and translation routines, since the name may contain \CEE/ code embedded in \pb\ constructions. This \CEE/ code is placed at the end of the active input buffer and the translation process uses the end of the active |tok_mem| area.

@&lt;Output a section name@&gt;= {
  out_str("\\X");
@.\\X@&gt;
  cur_xref=(xref_pointer)cur_name-&gt;xref;
  if (cur_xref-&gt;num==file_flag) {an_output=1; cur_xref=cur_xref-&gt;xlink;}
  else an_output=0;
  if (cur_xref-&gt;num&gt;=def_flag) {
    out_section(cur_xref-&gt;num-def_flag);
    if (phase==3) {
      cur_xref=cur_xref-&gt;xlink;
      while (cur_xref-&gt;num&gt;=def_flag) {
        out_str(", ");
        out_section(cur_xref-&gt;num-def_flag);
      cur_xref=cur_xref-&gt;xlink;
      }
    }
  }
  else out('0'); /* output the section number, or zero if it was undefined */
  out(':');
  if (an_output) out_str("\\.{"@q}@&gt;);
@.\\.@&gt;
  @&lt;Output the text of the section name@&gt;;
  if (an_output) out_str(@q{@&gt;" }");
  out_str("\\X");
}
@ @&lt;Output the text...@&gt;=
sprint_section_name(scratch,cur_name);
k=scratch;
k_limit=scratch+strlen(scratch);
cur_section_name=cur_name;
while (k&lt;k_limit) {
  b=*(k++);
  if (b=='@@') @&lt;Skip next character, give error if not `\.{@@}'@&gt;;
  if (an_output)
    switch (b) {
 case  ' ':case '\\':case '#':case '%':case '$':case '^':
 case '{': case '}': case '~': case '&amp;': case '_':
    out('\\'); /* falls through */
@.\\\ @&gt;
@.\\\\@&gt;
@.\\\#@&gt;
@.\\\%@&gt;
@.\\\$@&gt;
@.\\\^@&gt;
@.\\\{@&gt;@q}@&gt;
@q{@&gt;@.\\\}@&gt;
@.\\\~@&gt;
@.\\\&amp;@&gt;
@.\\\_@&gt;
 default: out(b);
    }
  else if (b!='|') out(b)
  else {
    @&lt;Copy the \CEE/ text into the |buffer| array@&gt;;
    save_loc=loc; save_limit=limit; loc=limit+2; limit=j+1;
    *limit='|'; output_C();
    loc=save_loc; limit=save_limit;
  }
}
@ @&lt;Skip next char...@&gt;=
if (*k++!='@@') {
  printf("\n! Illegal control code in section name: &lt;");
@.Illegal control code...@&gt;
  print_section_name(cur_section_name); printf("&gt; "); mark_error;
}
@ The \CEE/ text enclosed in \pb\ should not contain `\.{\v}' characters, except within strings. We put a `\.{\v}' at the front of the buffer, so that an error message that displays the whole buffer will look a little bit sensible. The variable |delim| is zero outside of strings, otherwise it equals the delimiter that began the string being copied.

@&lt;Copy the \CEE/ text into the |buffer| array@&gt;=
j=limit+1; *j='|'; delim=0;
while (1) {
  if (k&gt;=k_limit) {
    printf("\n! C text in section name didn't end: &lt;");
@.C text...didn't end@&gt;
    print_section_name(cur_section_name); printf("&gt; "); mark_error; break;
  }
  b=*(k++);
  if (b=='@@' || (b=='\\' &amp;&amp; delim!=0))
     @&lt;Copy a quoted character into the buffer@&gt;
  else {
    if (b=='\'' || b=='"')
      if (delim==0) delim=b;
      else if (delim==b) delim=0;
    if (b!='|' || delim!=0) {
      if (j&gt;buffer+long_buf_size-3) overflow("buffer");
      *(++j)=b;
    }
    else break;
  }
}
@ @&lt;Copy a quoted char...@&gt;= {
  if (j&gt;buffer+long_buf_size-4) overflow("buffer");
  *(++j)=b; *(++j)=*(k++);
}
@** Phase two processing. We have assembled enough pieces of the puzzle in order to be ready to specify the processing in \.{CWEAVE}'s main pass over the source file. Phase two is analogous to phase one, except that more work is involved because we must actually output the \TEX/ material instead of merely looking at the \.{CWEB} specifications.
@&lt;Predeclaration of procedures@&gt;=
void phase_two();

@ @c
void
phase_two() {
reset_input(); if (show_progress) printf("\nWriting the output file...");
@.Writing the output file...@&gt;
section_count=0; format_visible=1; copy_limbo();
finish_line(); flush_buffer(out_buf,0,0); /* insert a blank line, it looks nice */
while (!input_has_ended) @&lt;Translate the current section@&gt;;
}
@ The output file will contain the control sequence \.{\\Y} between non-null sections of a section, e.g., between the \TEX/ and definition parts if both are nonempty. This puts a little white space between the parts when they are printed. However, we don't want \.{\\Y} to occur between two definitions within a single section. The variables |out_line| or |out_ptr| will change if a section is non-null, so the following macros `|save_position|' and `|emit_space_if_needed|' are able to handle the situation:

@d save_position save_line=out_line; save_place=out_ptr
@d emit_space_if_needed if (save_line!=out_line || save_place!=out_ptr)
  out_str("\\Y");
  space_checked=1
@.\\Y@&gt;

@&lt;Global variables@&gt;=
int save_line; /* former value of |out_line| */
char *save_place; /* former value of |out_ptr| */
int sec_depth; /* the integer, if any, following \.{@@*} */
boolean space_checked; /* have we done |emit_space_if_needed|? */
boolean format_visible; /* should the next format declaration be output? */
boolean doing_format=0; /* are we outputting a format declaration? */
boolean group_found=0; /* has a starred section occurred? */

@ @&lt;Translate the current section@&gt;= {
  section_count++;
  @&lt;Output the code for the beginning of a new section@&gt;;
  save_position;
  @&lt;Translate the \TEX/ part of the current section@&gt;;
  @&lt;Translate the definition part of the current section@&gt;;
  @&lt;Translate the \CEE/ part of the current section@&gt;;
  @&lt;Show cross-references to this section@&gt;;
  @&lt;Output the code for the end of a section@&gt;;
}
@ Sections beginning with the \.{CWEB} control sequence `\.{@@\ }' start in the output with the \TEX/ control sequence `\.{\\M}', followed by the section number. Similarly, `\.{@

@*}' sections lead to the control sequence `\.{\\N}'. In this case there's an additional parameter, representing one plus the specified depth, immediately after the \.{\\N}. If the section has changed, we put \.{\\*} just after the section number.

@&lt;Output the code for the beginning of a new section@&gt;=
if (*(loc-1)!='*') out_str("\\M");
@.\\M@&gt;
else {
  while (*loc == ' ') loc++;
  if (*loc=='*') { /* ``top'' level */
    sec_depth = -1;
    loc++;
  }
  else {
    for (sec_depth=0; xisdigit(*loc);loc++)
      sec_depth = sec_depth*10 + (*loc) -'0';
  }
  while (*loc == ' ') loc++; /* remove spaces before group title */
  group_found=1;
  out_str("\\N");
@.\\N@&gt;
  {@+ char s[32];@+sprintf(s,"{%d}",sec_depth+1);@+out_str(s);@+}
  if (show_progress)
  printf("*%d",section_count); update_terminal; /* print a progress report */
}
out_str("{");out_section(section_count); out_str("}");
@ In the \TEX/ part of a section, we simply copy the source text, except that index entries are not copied and \CEE/ text within \pb\ is translated.

@&lt;Translate the \TEX/ part of the current section@&gt;= do {
  next_control=copy_TeX();
  switch (next_control) {
    case '|': init_stack; output_C(); break;
    case '@@': out('@@'); break;
    case TeX_string: case noop:
    case xref_roman: case xref_wildcard: case xref_typewriter:
    case section_name: loc-=2; next_control=get_next(); /* skip to \.{@@&gt;} */
      if (next_control==TeX_string)
        err_print("! TeX string should be in C text only"); break;
@.TeX string should be...@&gt;
    case thin_space: case math_break: case ord:
    case line_break: case big_line_break: case no_line_break: case join:
    case pseudo_semi: case macro_arg_open: case macro_arg_close:
    case output_defs_code:
        err_print("! You can't do that in TeX text"); break;
@.You can't do that...@&gt;
  }
} while (next_control&lt;format_code);
@ When we get to the following code we have |next_control&gt;=format_code|, and the token memory is in its initial empty state.

@&lt;Translate the definition part of the current section@&gt;=
space_checked=0;
while (next_control&lt;=definition) { /* |format_code| or |definition| */
  init_stack;
  if (next_control==definition) @&lt;Start a macro definition@&gt;@;
  else @&lt;Start a format definition@&gt;;
  outer_parse(); finish_C(format_visible); format_visible=1;
  doing_format=0;
}
@ Keeping in line with the conventions of the \CEE/ preprocessor (and otherwise contrary to the rules of \.{CWEB}) we distinguish here between the case that `\.(' immediately follows an identifier and the case that the two are separated by a space.  In the latter case, and if the identifier is not followed by `\.(' at all, the replacement text starts immediately after the identifier.  In the former case, it starts after we scan the matching `\.)'.

@&lt;Start a macro definition@&gt;= {
  if (save_line!=out_line || save_place!=out_ptr || space_checked) app(backup);
  if(!space_checked){emit_space_if_needed;save_position;}
  app_str("\\D"); /* this will produce `\&amp;{define }' */
@.\\D@&gt;
  if ((next_control=get_next())!=identifier)
    err_print("! Improper macro definition");
@.Improper macro definition@&gt;
  else {
    app('$'); app_cur_id(0);
    if (*loc=='(')
  reswitch: switch (next_control=get_next()) {
      case '(': case ',': app(next_control); goto reswitch;
      case identifier: app_cur_id(0); goto reswitch;
      case ')': app(next_control); next_control=get_next(); break;
      default: err_print("! Improper macro definition"); break;
    }
    else next_control=get_next();
    app_str("$ "); app(break_space);
    app_scrap(dead,no_math); /* scrap won't take part in the parsing */
  }
}
@ @&lt;Start a format...@&gt;= {
  doing_format=1;
  if(*(loc-1)=='s' || *(loc-1)=='S') format_visible=0;
  if(!space_checked){emit_space_if_needed;save_position;}
  app_str("\\F"); /* this will produce `\&amp;{format }' */
@.\\F@&gt;
  next_control=get_next();
  if (next_control==identifier) {
    app(id_flag+(int)(id_lookup(id_first, id_loc,normal)-name_dir));
    app(' ');
    app(break_space); /* this is syntactically separate from what follows */
    next_control=get_next();
    if (next_control==identifier) {
      app(id_flag+(int)(id_lookup(id_first, id_loc,normal)-name_dir));
      app_scrap(exp,maybe_math); app_scrap(semi,maybe_math);
      next_control=get_next();
    }
  }
  if (scrap_ptr!=scrap_info+2) err_print("! Improper format definition");
@.Improper format definition@&gt;
}
@ Finally, when the \TEX/ and definition parts have been treated, we have |next_control&gt;=begin_C|. We will make the global variable |this_section| point to the current section name, if it has a name.

@&lt;Global variables@&gt;=
name_pointer this_section; /* the current section name, or zero */

@ @&lt;Translate the \CEE/...@&gt;=
this_section=name_dir;
if (next_control&lt;=section_name) {
  emit_space_if_needed; init_stack;
  if (next_control==begin_C) next_control=get_next();
  else {
    this_section=cur_section;
    @&lt;Check that '=' or '==' follows this section name, and emit the scraps to start the section definition@&gt;;
  }
  while  (next_control&lt;=section_name) {
    outer_parse();
    @&lt;Emit the scrap for a section name if present@&gt;;
  }
  finish_C(1);
}
@ The title of the section and an $\E$ or $\mathrel+\E$ are made into a scrap that should not take part in the parsing.

@&lt;Check that '='...@&gt;=
do next_control=get_next();
  while (next_control=='+'); /* allow optional `\.{+=}' */
if (next_control!='=' &amp;&amp; next_control!=eq_eq)
  err_print("! You need an = sign after the section name");
@.You need an = sign...@&gt;
  else next_control=get_next();
if (out_ptr&gt;out_buf+1 &amp;&amp; *out_ptr=='Y' &amp;&amp; *(out_ptr-1)=='\\') app(backup);
    /* the section name will be flush left */
@.\\Y@&gt;
app(section_flag+(int)(this_section-name_dir));
cur_xref=(xref_pointer)this_section-&gt;xref;
if(cur_xref-&gt;num==file_flag) cur_xref=cur_xref-&gt;xlink;
app_str("${}");
if (cur_xref-&gt;num!=section_count+def_flag) {
  app_str("\\mathrel+"); /*section name is multiply defined*/
  this_section=name_dir; /*so we won't give cross-reference info here*/
}
app_str("\\E"); /* output an equivalence sign */
@.\\E@&gt;
app_str("{}$");
app(force); app_scrap(dead,no_math);
        /* this forces a line break unless `\.{@@+}' follows */
@ @&lt;Emit the scrap...@&gt;=
if (next_control&lt;section_name) {
  err_print("! You can't do that in C text");
@.You can't do that...@&gt;
  next_control=get_next();
}
else if (next_control==section_name) {
  app(section_flag+(int)(cur_section-name_dir));
  app_scrap(section_scrap,maybe_math);
  next_control=get_next();
}
@ Cross references relating to a named section are given after the section ends.

@&lt;Show cross-references to this section@&gt;=
if (this_section&gt;name_dir) {
  cur_xref=(xref_pointer)this_section-&gt;xref;
  if (cur_xref-&gt;num==file_flag){an_output=1;cur_xref=cur_xref-&gt;xlink;}
  else an_output=0;
  if (cur_xref-&gt;num&gt;def_flag)
    cur_xref=cur_xref-&gt;xlink; /* bypass current section number */
  footnote(def_flag); footnote(cite_flag); footnote(0);
}
@ @&lt;Output the code for the end of a section@&gt;=
out_str("\\fi"); finish_line();
@.\\fi@&gt;
flush_buffer(out_buf,0,0); /* insert a blank line, it looks nice */
@ The |footnote| procedure gives cross-reference information about multiply defined section names (if the |flag| parameter is |def_flag|), or about references to a section name (if |flag==cite_flag|), or to its uses (if |flag==0|). It assumes that |cur_xref| points to the first cross-reference entry of interest, and it leaves |cur_xref| pointing to the first element not printed.  Typical outputs: `\.{\\A101.}'; `\.{\\Us 370\\ET1009.}'; `\.{\\As 8, 27\\*\\ETs64.}'.  Note that the output of \.{CWEAVE} is not English-specific; users may supply new definitions for the macros \.{\\A}, \.{\\As}, etc.

@&lt;Predeclaration of procedures@&gt;=
void footnote();

@ @c
void
footnote(flag) /* outputs section cross-references */
sixteen_bits flag;
{
  xref_pointer q; /* cross-reference pointer variable */
  if (cur_xref-&gt;num&lt;=flag) return;
  finish_line(); out('\\');
@.\\A@&gt;
@.\\Q@&gt;
@.\\U@&gt;
  out(flag==0? 'U': flag==cite_flag? 'Q': 'A');
  @&lt;Output all the section numbers on the reference list |cur_xref|@&gt;;
  out('.');
}
@ The following code distinguishes three cases, according as the number of cross-references is one, two, or more than two. Variable |q| points to the first cross-reference, and the last link is a zero.

@&lt;Output all the section numbers on the reference list |cur_xref|@&gt;=
q=cur_xref; if (q-&gt;xlink-&gt;num&gt;flag) out('s'); /* plural */
while (1) {
  out_section(cur_xref-&gt;num-flag);
  cur_xref=cur_xref-&gt;xlink; /* point to the next cross-reference to output */
  if (cur_xref-&gt;num&lt;=flag) break;
  if (cur_xref-&gt;xlink-&gt;num&gt;flag) out_str(", "); /* not the last */
  else {out_str("\\ET"); /* the last */
@.\\ET@&gt;
  if (cur_xref != q-&gt;xlink) out('s'); /* the last of more than two */
  }
}
@ The |finish_C| procedure outputs the translation of the current scraps, preceded by the control sequence `\.{\\B}' and followed by the control sequence `\.{\\par}'. It also restores the token and scrap memories to their initial empty state.  A |force| token is appended to the current scraps before translation takes place, so that the translation will normally end with \.{\\6} or \.{\\7} (the \TEX/ macros for |force| and |big_force|). This \.{\\6} or \.{\\7} is replaced by the concluding \.{\\par} or by \.{\\Y\\par}.

@&lt;Predeclaration of procedures@&gt;=
void finish_C();

@ @c
void
finish_C(visible) /* finishes a definition or a \CEE/ part */
  boolean visible; /* nonzero if we should produce \TEX/ output */
{
  text_pointer p; /* translation of the scraps */
  if (visible) {
    out_str("\\B"); app_tok(force); app_scrap(insert,no_math);
    p=translate();
@.\\B@&gt;
    app(tok_flag+(int)(p-tok_start)); make_output(); /* output the list */
    if (out_ptr&gt;out_buf+1)
      if (*(out_ptr-1)=='\\')
@.\\6@&gt;
@.\\7@&gt;
@.\\Y@&gt;
        if (*out_ptr=='6') out_ptr-=2;
        else if (*out_ptr=='7') *out_ptr='Y';
    out_str("\\par"); finish_line();
  }
  if (text_ptr&gt;max_text_ptr) max_text_ptr=text_ptr;
  if (tok_ptr&gt;max_tok_ptr) max_tok_ptr=tok_ptr;
  if (scrap_ptr&gt;max_scr_ptr) max_scr_ptr=scrap_ptr;
  tok_ptr=tok_mem+1; text_ptr=tok_start+1; scrap_ptr=scrap_info;
    /* forget the tokens and the scraps */
}
@** Phase three processing. We are nearly finished! \.{CWEAVE}'s only remaining task is to write out the index, after sorting the identifiers and index entries.  If the user has set the |no_xref| flag (the \.{-x} option on the command line), just finish off the page, omitting the index, section name list, and table of contents.

@&lt;Predeclaration of procedures@&gt;=
void phase_three();@ @c
void
phase_three() {
if (no_xref) {
  finish_line();
  out_str("\\end");
@.\\end@&gt;
  finish_line();
}
else {
  phase=3; if (show_progress) printf("\nWriting the index...");
@.Writing the index...@&gt;
  finish_line();
  if ((idx_file=fopen(idx_file_name,"w"))==NULL)
    fatal("! Cannot open index file ",idx_file_name);
@.Cannot open index file@&gt;
  if (change_exists) {
    @&lt;Tell about changed sections@&gt;; finish_line(); finish_line();
  }
  out_str("\\inx"); finish_line();
@.\\inx@&gt;
  active_file=idx_file; /* change active file to the index file */
  @&lt;Do the first pass of sorting@&gt;;
  @&lt;Sort and output the index@&gt;;
  finish_line(); fclose(active_file); /* finished with |idx_file| */
  active_file=tex_file; /* switch back to |tex_file| for a tic */
  out_str("\\fin"); finish_line();
@.\\fin@&gt;
  if ((scn_file=fopen(scn_file_name,"w"))==NULL)
    fatal("! Cannot open section file ",scn_file_name);
@.Cannot open section file@&gt;
  active_file=scn_file; /* change active file to section listing file */
  @&lt;Output all the section names@&gt;;
  finish_line(); fclose(active_file); /* finished with |scn_file| */
  active_file=tex_file;
  if (group_found) out_str("\\con");@+else out_str("\\end");
@.\\con@&gt;
@.\\end@&gt;
  finish_line();
  fclose(active_file);
}
if (show_happiness) printf("\nDone.");
check_complete(); /* was all of the change file used? */
}
@ Just before the index comes a list of all the changed sections, including the index section itself.

@&lt;Global variables@&gt;=
sixteen_bits k_section; /* runs through the sections */

@ @&lt;Tell about changed sections@&gt;= {
  /* remember that the index is already marked as changed */
  k_section=0;
  while (!changed_section[++k_section]);
  out_str("\\ch ");
@.\\ch@&gt;
  out_section(k_section);
  while (k_section&lt;section_count) {
    while (!changed_section[++k_section]);
    out_str(", "); out_section(k_section);
  }
  out('.');
}
@ A left-to-right radix sorting method is used, since this makes it easy to adjust the collating sequence and since the running time will be at worst proportional to the total length of all entries in the index. We put the identifiers into 102 different lists based on their first characters. (Uppercase letters are put into the same list as the corresponding lowercase letters, since we want to have `$t&lt;\\{TeX}&lt;\&amp;{to}$'.) The list for character |c| begins at location |bucket[c]| and continues through the |blink| array.

@&lt;Global variables@&gt;=
name_pointer bucket[256];
name_pointer next_name; /* successor of |cur_name| when sorting */
name_pointer blink[max_names]; /* links in the buckets */

@ To begin the sorting, we go through all the hash lists and put each entry having a nonempty cross-reference list into the proper bucket.

@&lt;Do the first pass of sorting@&gt;= {
int c;
for (c=0; c&lt;=255; c++) bucket[c]=NULL;
for (h=hash; h&lt;=hash_end; h++) {
  next_name=*h;
  while (next_name) {
    cur_name=next_name; next_name=cur_name-&gt;link;
    if (cur_name-&gt;xref!=(char*)xmem) {
      c=(eight_bits)((cur_name-&gt;byte_start)[0]);
      if (xisupper(c)) c=tolower(c);
      blink[cur_name-name_dir]=bucket[c]; bucket[c]=cur_name;
    }
  }
}
}
@ During the sorting phase we shall use the |cat| and |trans| arrays from
\.{CWEAVE}'s parsing algorithm and rename them |depth| and |head|. They now
represent a stack of identifier lists for all the index entries that have
not yet been output. The variable |sort_ptr| tells how many such lists are
present; the lists are output in reverse order (first |sort_ptr|, then
|sort_ptr-1|, etc.). The |j|th list starts at |head[j]|, and if the first
|k| characters of all entries on this list are known to be equal we have
|depth[j]==k|.

@ @&lt;Rest of |trans_plus| union@&gt;=
name_pointer Head;

@ @d depth cat /* reclaims memory that is no longer needed for parsing */
@d head trans_plus.Head /* ditto */
@f sort_pointer int
@d sort_pointer scrap_pointer /* ditto */
@d sort_ptr scrap_ptr /* ditto */
@d max_sorts max_scraps /* ditto */

@&lt;Global variables@&gt;=
eight_bits cur_depth; /* depth of current buckets */
char *cur_byte; /* index into |byte_mem| */
sixteen_bits cur_val; /* current cross-reference number */
sort_pointer max_sort_ptr; /* largest value of |sort_ptr| */

@ @&lt;Set init...@&gt;=
max_sort_ptr=scrap_info;

@ The desired alphabetic order is specified by the |collate| array; namely, $|collate|[0]&lt;|collate|[1]&lt;\cdots&lt;|collate|[100]$.

@&lt;Global variables@&gt;=
eight_bits collate[102+128]; /* collation order */
@^high-bit character handling@&gt;

@ We use the order $\hbox{null}&lt;\.\ &lt;\hbox{other characters}&lt;{}$\.\_${}&lt; \.A=\.a&lt;\cdots&lt;\.Z=\.z&lt;\.0&lt;\cdots&lt;\.9.$ Warning: The collation mapping needs to be changed if ASCII code is not being used. @^ASCII code dependencies@&gt; @^high-bit character handling@&gt;  We initialize |collate| by copying a few characters at a time, because some \CEE/ compilers choke on long strings.

@&lt;Set initial values@&gt;=
collate[0]=0;
strcpy(collate+1," \1\2\3\4\5\6\7\10\11\12\13\14\15\16\17");
/* 16 characters + 1 = 17 */
strcpy(collate+17,"\20\21\22\23\24\25\26\27\30\31\32\33\34\35\36\37");
/* 16 characters + 17 = 33 */
strcpy(collate+33,"!\42#$%&amp;'()*+,-./:;&lt;=&gt;?@@[\\]^`{|}~_");
/* 32 characters + 33 = 65 */
strcpy(collate+65,"abcdefghijklmnopqrstuvwxyz0123456789");
/* (26 + 10) characters + 65 = 101 */
strcpy(collate+101,"\200\201\202\203\204\205\206\207\210\211\212\213\214\215\216\217");
/* 16 characters + 101 = 117 */
strcpy(collate+117,"\220\221\222\223\224\225\226\227\230\231\232\233\234\235\236\237");
/* 16 characters + 117 = 133 */
strcpy(collate+133,"\240\241\242\243\244\245\246\247\250\251\252\253\254\255\256\257");
/* 16 characters + 133 = 149 */
strcpy(collate+149,"\260\261\262\263\264\265\266\267\270\271\272\273\274\275\276\277");
/* 16 characters + 149 = 165 */
strcpy(collate+165,"\300\301\302\303\304\305\306\307\310\311\312\313\314\315\316\317");
/* 16 characters + 165 = 181 */
strcpy(collate+181,"\320\321\322\323\324\325\326\327\330\331\332\333\334\335\336\337");
/* 16 characters + 181 = 197 */
strcpy(collate+197,"\340\341\342\343\344\345\346\347\350\351\352\353\354\355\356\357");
/* 16 characters + 197 = 213 */
strcpy(collate+213,"\360\361\362\363\364\365\366\367\370\371\372\373\374\375\376\377");
/* 16 characters + 213 = 229 */

@ @&lt;Sort and output...@&gt;=
sort_ptr=scrap_info; unbucket(1);
while (sort_ptr&gt;scrap_info) {
  cur_depth=sort_ptr-&gt;depth;
  if (blink[sort_ptr-&gt;head-name_dir]==0 || cur_depth==infinity)
    @&lt;Output index entries for the list at |sort_ptr|@&gt;@;
  else @&lt;Split the list at |sort_ptr| into further lists@&gt;;
}
@ @&lt;Split the list...@&gt;= {
  eight_bits c;
  next_name=sort_ptr-&gt;head;
  do {
    cur_name=next_name; next_name=blink[cur_name-name_dir];
    cur_byte=cur_name-&gt;byte_start+cur_depth;
    if (cur_byte==(cur_name+1)-&gt;byte_start) c=0; /* hit end of the name */
    else {
      c=(eight_bits) *cur_byte;
      if (xisupper(c)) c=tolower(c);
    }
  blink[cur_name-name_dir]=bucket[c]; bucket[c]=cur_name;
  } while (next_name);
  --sort_ptr; unbucket(cur_depth+1);
}
@ @&lt;Output index...@&gt;= {
  cur_name=sort_ptr-&gt;head;
  do {
    out_str("\\I");
@.\\I@&gt;
    @&lt;Output the name at |cur_name|@&gt;;
    @&lt;Output the cross-references at |cur_name|@&gt;;
    cur_name=blink[cur_name-name_dir];
  } while (cur_name);
  --sort_ptr;
}
@ @&lt;Output the name...@&gt;=
switch (cur_name-&gt;ilk) {
  case normal: case func_template: if (is_tiny(cur_name)) out_str("\\|");
    else {char *j;
      for (j=cur_name-&gt;byte_start;j&lt;(cur_name+1)-&gt;byte_start;j++)
        if (xislower(*j)) goto lowcase;
      out_str("\\."); break;
lowcase: out_str("\\\\");
    }
  break;
@.\\|@&gt;
@.\\.@&gt;
@.\\\\@&gt;
  case wildcard: out_str("\\9");@+ goto not_an_identifier;
@.\\9@&gt;
  case typewriter: out_str("\\.");
@.\\.@&gt;
  case roman: not_an_identifier: out_name(cur_name,0); goto name_done;
  case custom: {char *j; out_str("$\\");
    for (j=cur_name-&gt;byte_start;j&lt;(cur_name+1)-&gt;byte_start;j++)
      out(*j=='_'? 'x': *j=='$'? 'X': *j);
    out('$');
    goto name_done;
    }
  default: out_str("\\&amp;");
@.\\\&amp;@&gt;
}
out_name(cur_name,1);
name_done:@;
@ Section numbers that are to be underlined are enclosed in `\.{\\[}$\,\ldots\,$\.]'.

@&lt;Output the cross-references at |cur_name|@&gt;=
@&lt;Invert the cross-reference list at |cur_name|, making |cur_xref| the head@&gt;;
do {
  out_str(", "); cur_val=cur_xref-&gt;num;
  if (cur_val&lt;def_flag) out_section(cur_val);
  else {out_str("\\["); out_section(cur_val-def_flag); out(']');}
@.\\[@&gt;
  cur_xref=cur_xref-&gt;xlink;
} while (cur_xref!=xmem);
out('.'); finish_line();
@ List inversion is best thought of as popping elements off one stack and pushing them onto another. In this case |cur_xref| will be the head of the stack that we push things onto.

@&lt;Global variables@&gt;=
xref_pointer next_xref, this_xref;
  /* pointer variables for rearranging a list */

@ @&lt;Invert the cross-reference list at |cur_name|, making |cur_xref| the head@&gt;=
this_xref=(xref_pointer)cur_name-&gt;xref; cur_xref=xmem;
do {
  next_xref=this_xref-&gt;xlink; this_xref-&gt;xlink=cur_xref;
  cur_xref=this_xref; this_xref=next_xref;
} while (this_xref!=xmem);
@ @&lt;Output all the section names@&gt;=section_print(root)
@ Procedure |unbucket| goes through the buckets and adds nonempty lists to the stack, using the collating sequence specified in the |collate| array. The parameter to |unbucket| tells the current depth in the buckets. Any two sequences that agree in their first 255 character positions are regarded as identical.

@d infinity 255 /* $\infty$ (approximately) */

@&lt;Predeclaration of procedures@&gt;=
void  unbucket();

@ @c
void
unbucket(d) /* empties buckets having depth |d| */
eight_bits d;
{
  int c;  /* index into |bucket|; cannot be a simple |char| because of sign
    comparison below*/
  for (c=100+128; c&gt;= 0; c--) if (bucket[collate[c]]) {
@^high-bit character handling@&gt;
    if (sort_ptr&gt;=scrap_info_end) overflow("sorting");
    sort_ptr++;
    if (sort_ptr&gt;max_sort_ptr) max_sort_ptr=sort_ptr;
    if (c==0) sort_ptr-&gt;depth=infinity;
    else sort_ptr-&gt;depth=d;
    sort_ptr-&gt;head=bucket[collate[c]]; bucket[collate[c]]=NULL;
  }
}
@ The following recursive procedure walks through the tree of section names and prints them. @^recursion@&gt;

@&lt;Predeclaration of procedures@&gt;=
void section_print();

@ @c
void
section_print(p) /* print all section names in subtree |p| */
name_pointer p;
{
  if (p) {
    section_print(p-&gt;llink); out_str("\\I");
@.\\I@&gt;
    tok_ptr=tok_mem+1; text_ptr=tok_start+1; scrap_ptr=scrap_info; init_stack;
    app(p-name_dir+section_flag); make_output();
    footnote(cite_flag);
    footnote(0); /* |cur_xref| was set by |make_output| */
    finish_line();@/
    section_print(p-&gt;rlink);
  }
}
@ Because on some systems the difference between two pointers is a |long| rather than an |int|, we use \.{\%ld} to print these quantities.

@c
void
print_stats() {
  printf("\nMemory usage statistics:\n");
@.Memory usage statistics:@&gt;
  printf("%ld names (out of %ld)\n",
            (long)(name_ptr-name_dir),(long)max_names);
  printf("%ld cross-references (out of %ld)\n",
            (long)(xref_ptr-xmem),(long)max_refs);
  printf("%ld bytes (out of %ld)\n",
            (long)(byte_ptr-byte_mem),(long)max_bytes);
  printf("Parsing:\n");
  printf("%ld scraps (out of %ld)\n",
            (long)(max_scr_ptr-scrap_info),(long)max_scraps);
  printf("%ld texts (out of %ld)\n",
            (long)(max_text_ptr-tok_start),(long)max_texts);
  printf("%ld tokens (out of %ld)\n",
            (long)(max_tok_ptr-tok_mem),(long)max_toks);
  printf("%ld levels (out of %ld)\n",
            (long)(max_stack_ptr-stack),(long)stack_size);
  printf("Sorting:\n");
  printf("%ld levels (out of %ld)\n",
            (long)(max_sort_ptr-scrap_info),(long)max_scraps);
}@** Index.
If you have read and understood the code for Phase III above, you know what
is in this index and how it got here. All sections in which an identifier is
used are listed with that identifier, except that reserved words are
indexed only when they appear in format definitions, and the appearances
of identifiers in section names are not indexed. Underlined entries
correspond to where the identifier was declared. Error messages, control
sequences put into the output, and a few
other things like ``recursion'' are indexed here too.
</t>
<t tx="ekr.20170401122030.1">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20170401122030.2">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20170407065952.1">import imp
import leo.plugins.importers.javascript as js
imp.reload(js)
importer = js.JS_Importer(c.importCommands)
pattern = importer.op_pattern
table = (
    '++', '--', '&amp;&amp;', '||', '~', '&gt;&gt;', '&lt;&lt;', 
    # '&gt;&gt;=',  '&lt;&lt;=',
    # '&gt;&gt;&gt;', '&gt;&gt;&gt;=',
    # '&lt;&lt;&lt;', '&lt;&lt;&lt;=',
    '&lt;', '&lt;=', '&gt;', '&gt;=',
    '+', '+=', '-', '-=',
    '/', '/=', '*', '*=', 
    '%', '%=', '&amp;', '&amp;=',
    '|', '|=',
)
for s in table:
    m = pattern.match(s)
    assert m, s
    assert m.group(0) == s, (s, m.group(0))
</t>
<t tx="ekr.20170409174529.27">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20170409174529.28">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20170409174632.19">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20170409174632.20">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20170410190519.53">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20170410190519.54">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20170415061122.50">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20170415061122.51">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20170415084531.1"># lowercase xml tags, one per line.

html
body
head
div
table
nodeA
nodeB
</t>
<t tx="ekr.20170416060817.1">s = '''\
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE note SYSTEM "Note.dtd"&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Bodystring&lt;/title&gt;
&lt;/head&gt;
&lt;body class='bodystring'&gt;
&lt;div id='bodydisplay'&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
'''
ic = c.importCommands
table = (
    (1, "&lt;html&gt;"),
    (2, "&lt;head&gt;"),
    (2, "&lt;body class='bodystring'&gt;"),
)
try:
    test_node = p.copy()
    test_node.deleteAllChildren()
    ic.xmlUnitTest(p,s=s,showTree=True)
    after = p.nodeAfterTree()
    root = p.lastChild()
    assert root.h.startswith('@@'), root.h
    p = root.firstChild()
    if 1:
        for n, h in table:
            n2 = p.level() - root.level()
            assert h == p.h, (h, p.h)
            assert n == n2, (n, n2, p.h)
            p.moveToThreadNext()
        assert p == after, ('tree comp failed', p.h)
    if 1:
        test_node.deleteAllChildren()
finally:
    c.redraw()

</t>
<t tx="ekr.20170416085619.1">@language html
s = '''
&lt;html&gt;
&lt;head&gt;headline&lt;/head&gt;
&lt;body&gt;body&lt;/body&gt;
&lt;/html&gt;
'''
@language python
table = (
    '&lt;html&gt;',
)
try:
    c.importCommands.htmlUnitTest(p,s=s,showTree=True)
    p2 = c.p.firstChild().firstChild()
    for h in table:
        assert p2 and p2.h == h, (p2 and p2.h, h)
        p2.moveToThreadNext()
    if 1:
        p.deleteAllChildren()
finally:
    c.redraw()

</t>
<t tx="ekr.20170426033159.40">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20170426033159.41">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20170502211859.15">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20170502211859.16">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20170503133125.21">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20170503133125.22">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20170503133258.21">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20170503133258.22">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20170503133608.21">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20170503133608.22">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20170504122245.1"></t>
<t tx="ekr.20170504122721.1">def at_auto_child():
    pass
</t>
<t tx="ekr.20170504122721.10">def class2_method1():
    pass
</t>
<t tx="ekr.20170504122721.11">def class2_method2():
    pass
</t>
<t tx="ekr.20170504122721.12">This would be the text in this level one node.

And this.
</t>
<t tx="ekr.20170504122721.13">Another one
</t>
<t tx="ekr.20170504122721.14">See what we did there - one more '#' - this is a subnode.
</t>
<t tx="ekr.20170504122721.15">Sec 1.
</t>
<t tx="ekr.20170504122721.16">Sec 2.
</t>
<t tx="ekr.20170504122721.17">Sec 1.
</t>
<t tx="ekr.20170504122721.18">Sec 2.
</t>
<t tx="ekr.20170504122721.2">Sec 1.

</t>
<t tx="ekr.20170504122721.3">Sec 2.

</t>
<t tx="ekr.20170504122721.4">def spam():
    pass
</t>
<t tx="ekr.20170504122721.5">def eggs():
    pass


</t>
<t tx="ekr.20170504122721.6">class class1:
    @others
</t>
<t tx="ekr.20170504122721.7">def class1_method1():
    pass
</t>
<t tx="ekr.20170504122721.8">def class1_method2():
    pass
# After @others in child1.
</t>
<t tx="ekr.20170504122721.9">class class2:
    @others
# last line
</t>
<t tx="ekr.20170617111001.1"># https://github.com/leo-editor/leo-editor/issues/479
@nocolor
s = '''
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;script type="text/python3"&gt;
"""Code for the header menu"""
from browser import document as doc
from browser import html
import header

qs_lang,language = header.show()

doc["content"].html = doc["content_%s" %language].html

if qs_lang:
    doc["c_%s" %qs_lang].href += "?lang=%s" %qs_lang

def ch_lang(ev):
    sel = ev.target
    new_lang = sel.options[sel.selectedIndex].value
    doc.location.href = 'index.html?lang=%s' %new_lang

for elt in doc[html.SELECT]:
    if elt.id.startswith('change_lang_'):
        doc[elt.id].bind('change',ch_lang)
&lt;/script&gt;

&lt;script type="text/python3"&gt;
"""Code for the clock"""

import time
import math
import datetime

from browser import document as doc
import browser.timer

sin,cos = math.sin,math.cos
width,height = 250,250 # canvas dimensions
ray = 100 # clock ray

def needle(angle,r1,r2,color="#000000"):
    # draw a needle at specified angle in specified color
    # r1 and r2 are percentages of clock ray
    x1 = width/2-ray*cos(angle)*r1
    y1 = height/2-ray*sin(angle)*r1
    x2 = width/2+ray*cos(angle)*r2
    y2 = height/2+ray*sin(angle)*r2
    ctx.beginPath()
    ctx.strokeStyle = color
    ctx.moveTo(x1,y1)
    ctx.lineTo(x2,y2)
    ctx.stroke()

def set_clock():
    # erase clock
    ctx.beginPath()
    ctx.fillStyle = "#FFF"
    ctx.arc(width/2,height/2,ray*0.89,0,2*math.pi)
    ctx.fill()
    
    # redraw hours
    show_hours()

    # print day
    now = datetime.datetime.now()
    day = now.day
    ctx.font = "bold 14px Arial"
    ctx.textAlign = "center"
    ctx.textBaseline = "middle"
    ctx.fillStyle="#FFF"
    ctx.fillText(day,width*0.7,height*0.5)

    # draw needles for hour, minute, seconds    
    ctx.lineWidth = 3
    hour = now.hour%12 + now.minute/60
    angle = hour*2*math.pi/12 - math.pi/2
    needle(angle,0.05,0.5)
    minute = now.minute
    angle = minute*2*math.pi/60 - math.pi/2
    needle(angle,0.05,0.85)
    ctx.lineWidth = 1
    second = now.second+now.microsecond/1000000
    angle = second*2*math.pi/60 - math.pi/2
    needle(angle,0.05,0.85,"#FF0000") # in red
    
def show_hours():
    ctx.beginPath()
    ctx.arc(width/2,height/2,ray*0.05,0,2*math.pi)
    ctx.fillStyle = "#000"
    ctx.fill()
    for i in range(1,13):
        angle = i*math.pi/6-math.pi/2
        x3 = width/2+ray*cos(angle)*0.75
        y3 = height/2+ray*sin(angle)*0.75
        ctx.font = "20px Arial"
        ctx.textAlign = "center"
        ctx.textBaseline = "middle"
        ctx.fillText(i,x3,y3)
    # cell for day
    ctx.fillStyle = "#000"
    ctx.fillRect(width*0.65,height*0.47,width*0.1,height*0.06)

canvas = doc["clock"]
# draw clock border
if hasattr(canvas,'getContext'):
    ctx = canvas.getContext("2d")
    ctx.beginPath()
    ctx.lineWidth = 10
    ctx.arc(width/2,height/2,ray,0,2*math.pi)
    ctx.stroke()
    
    for i in range(60):
        ctx.lineWidth = 1
        if i%5 == 0:
            ctx.lineWidth = 3
        angle = i*2*math.pi/60 - math.pi/3
        x1 = width/2+ray*cos(angle)
        y1 = height/2+ray*sin(angle)
        x2 = width/2+ray*cos(angle)*0.9
        y2 = height/2+ray*sin(angle)*0.9
        ctx.beginPath()
        ctx.moveTo(x1,y1)
        ctx.lineTo(x2,y2)
        ctx.stroke()
    browser.timer.set_interval(set_clock,100)
    show_hours()
else:
    doc['navig_zone'].html = "On Internet Explorer 9 or more, use a Standard rendering engine"
&lt;/script&gt;

&lt;title&gt;Brython&lt;/title&gt;
&lt;link rel="stylesheet" href="Brython_files/doc_brython.css"&gt;
&lt;style type="text/css" nonce="%CSP_NONCE%"&gt;#A9AdsMiddleBoxTop,#A9AdsOutOfStockWidgetTop,#A9AdsServicesWidgetTop,#AD-300x250,#AD-300x250-1,#AD-300x250-2,#AD-300x250-3,#AD-HOME-LEFT,#AD001,#AD1line,#AD2line,#AD300Right,#AD300_VAN,#AD300x250,#AD300x600,#AD728Top,#ADEXPERT_PUSHDOWN,#ADEXPERT_RECTANGLE,#ADInterest,#ADNETwallBanner1,#ADNETwallBanner2,#ADSLOT_1,#ADSLOT_2,#ADSLOT_3,#ADSLOT_4,#ADSLOT_SKYSCRAPER,#ADS_2,#ADSlideshow,#ADSpro,#ADV120x90,#ADVERTISE_HERE_ROW,#ADVERTISE_RECTANGLE1,#ADVERTISE_RECTANGLE2,#ADVTG_CONTAINER_pushdown,#ADVTLEFT1,#ADVTLEFT2,#ADVTRIGHT1,#ADV_VIDEOBOX_2_CNT,#ADVleaderboard,#AD_160,#AD_300,#AD_468x60,#AD_C,#AD_CONTROL_13,#AD_CONTROL_22,#AD_CONTROL_28,#AD_CONTROL_29,#AD_CONTROL_8,#AD_G,#AD_ROW,#AD_Zone,#AD_banner_bottom,#AD_gallery,#AD_google,#AD_half,#AD_newsblock,#AD_rectangle,#AD_rr_a,#AD_text,#ADbox,#ADgoogle_newsblock,#ADoverThePlayer,#ADsmallWrapper,#AFF_popup,#APC_ads_details,#AUI_A9AdsMiddleBoxTop,#AUI_A9AdsWidgetAdsWrapper,#Ad-0-0-Slider,#Ad-0-1-Slider,#Ad-1-0-Slider,#Ad-1-1-Slider,#Ad-1-2-Slider,#Ad-3-Slider,#Ad-4-Slider,#Ad-5-2-Slider,#Ad-8-0-Slider,#Ad-9-0-Slider,#Ad-Container,#Ad-Top,#Ad160x600,#Ad160x600_0_adchoice,#Ad300x145,#Ad300x250,#Ad300x250_0,#Ad300x600_0_adchoice,#Ad3Left,#Ad3Right,#Ad3TextAd,#Ad728x90,#Ad990,#AdAboveGame,#AdArea,#AdAreaH,#AdAuth1,#AdAuth2,#AdAuth3,#AdAuth4,#AdBanner,#AdBannerSmallContainer,#AdBanner_F1,#AdBanner_S,#AdBar,#AdBar1,#AdBigBox,#AdBlock,#AdBlockBottomSponsor,#AdBottomLeader,#AdBottomRight,#AdBox160,#AdBox2,#AdBox300,#AdBox728,#AdBoxMoreGames,#AdButtons,#AdContainerTop,#AdContentModule_F,#AdContent_0_0_pnlDiv,#AdControl_TowerAd,#AdDetails_GoogleLinksBottom,#AdDetails_InsureWith,#AdDetails_SeeMoreLink,#AdDisclaimer,#AdDisplay_LongLink,#AdDisplay_TallLink,#AdDiv,#AdExtraBlock,#AdFeedbackLinkID_lnkItem,#AdFoxDiv,#AdFrame1,#AdFrame2,#AdFrame4,#AdHouseRectangle,#AdIndexTower,#AdLayer1,#AdLayer2,#AdLeaderboard2RunofSite,#AdLeaderboardBottom,#AdLeaderboardTop,#AdLocationMarketPage,#AdMPUHome,#AdMediumRectangle1300x250,#AdMediumRectangle2300x250,#AdMiddle,#AdMobileLink,#AdPanel,#AdPanelBigBox,#AdPanelLogo,#AdPopUp,#AdRectangle,#AdRectangleBanner,#AdSense-Skyscraper,#AdSense1,#AdSense2,#AdSense3,#AdSenseBottomAds,#AdSenseDiv,#AdSenseMiddleAds,#AdSenseResults1_adSenseSponsorDiv,#AdSenseTopAds,#AdServer,#AdShopSearch,#AdShowcase,#AdShowcase_F,#AdShowcase_F1,#AdSky23,#AdSkyscraper,#AdSlot_AF-Right-Multi,#AdSpaceLeaderboard,#AdSpacing,#AdSponsor_SF,#AdSpotMovie,#AdSquare02,#AdSubsectionShowcase_F1,#AdTaily_Widget_Container,#AdTargetControl1_iframe,#AdTop,#AdTopBlock,#AdTopLeader,#AdWidgetContainer,#AdZone1,#AdZone2,#Ad_976x105,#Ad_BelowContent,#Ad_Block,#Ad_Center1,#Ad_Premier,#Ad_Right1,#Ad_RightBottom,#Ad_RightTop,#Ad_TopLeaderboard,#Adbanner,#Adc1_AdContainer,#Adc2_AdContainer,#Adc3_AdContainer,#AdcBB_AdContainer,#Adlabel,#Adrectangle,#Ads-C,#Ads-D-728x90-hori,#Ads270x510-left,#Ads470by50,#AdsBannerTop,#AdsBottomContainer,#AdsBottomIframe,#AdsCarouselBoxArea,#AdsContainerTop,#AdsContent,#AdsContent_SearchShortRecB_UPSSR,#AdsDiv,#AdsFrame,#AdsHome2,#AdsLeader,#AdsLeft_1,#AdsPlayRight_1,#AdsRight,#AdsShowCase,#AdsTopContainer,#AdsVideo250,#AdsWrap,#Ads_BA_BUT,#Ads_BA_BUT_box,#Ads_BA_CAD,#Ads_BA_CAD2,#Ads_BA_CAD2_Text,#Ads_BA_CAD_box,#Ads_BA_FLB,#Ads_BA_SKY,#Ads_CAD,#Ads_OV_BS,#Ads_Special,#Ads_TFM_BS,#Ads_google_01,#Ads_google_02,#Ads_google_03,#Ads_google_04,#Ads_google_05,#Adsense300x250,#Adtag300x250Bottom,#Adtag300x250Top,#Adv-div,#Adv10,#Adv11,#Adv8,#Adv9,#AdvArea,#AdvBody,#AdvContainer,#AdvContainerBottom,#AdvContainerMidCenter,#AdvContainerMiddleRight,#AdvContainerTopCenter,#AdvContainerTopRight,#AdvFooter,#AdvFrame1,#AdvHead,#AdvHeader,#Adv_Footer,#Adv_Main_content,#Advert1,#AdvertMPU23b,#AdvertPanel,#AdvertText,#Advertisement1,#AdvertisementRightColumnRectangle,#AdvertisingDiv_0,#AdvertisingLeaderboard,#AdvertismentHomeTopRight,#Advertorial,#Advertorials,#AdvertsBottom,#AdvertsBottomR,#Adverts_AdDetailsBottom_300x600,#Adverts_AdDetailsMiddle_300x250,#ArticleBottomAd,#BANNER_160x600,#BANNER_300x250,#BANNER_728x90,#BBCPH_MCPH_MCPH_P_ArticleAd1,#BBCPH_MCPH_MCPH_P_OasAdControl1Panel,#BBCPH_MCPH_MCPH_P_OasAdControl2Panel,#BBCPH_MCPH_MCPH_SponsoredLinks1,#BBoxAd,#BDV_fullAd,#BackgroundAdContainer,#Banner300x250Module,#Banner728x90,#BannerAd,#BannerAds,#BannerAdvert,#BannerAdvertisement,#BannerXGroup,#BelowFoldAds,#BigBoxAd,#BigboxAdUnit,#BillBoardAdd,#BodyAd,#BodyTopAds,#BotAd,#Bottom468x60AD,#BottomAd0,#BottomAdSpacer,#BottomPageAds,#BrokerBox-AdContainer,#ButtonAd,#CONTENTAD,#CSpromo120x90,#ClickPop_LayerPop_Container,#ClickStory_ViewAD1,#ClickStory_ViewRightAD2,#CommonHeaderAd,#CompanyDetailsNarrowGoogleAdsPresentationControl,#CompanyDetailsWideGoogleAdsPresentationControl,#ContentAd1,#ContentAd2,#ContentAdPlaceHolder1,#ContentAdPlaceHolder2,#ContentAdView,#ContentAdXXL,#ContentAdtagRectangle,#ContentPlaceHolder1_adds,#ContentPlaceHolder1_advertControl1_advertLink,#ContentPlaceHolder1_advertControl3_advertLink,#ContentPlaceHolder1_pnlGoogleAds,#ContentPolepositionAds_Result,#Content_CA_AD_0_BC,#Content_CA_AD_1_BC,#ConversationDivAd,#CornerAd,#CountdownAdvert,#DARTad300x250,#DEFAULT_ADV4_SWF,#DFM-adPos-bottomline,#DFPAD_MR,#DFP_in_article_mpu,#DFP_top_leaderboard,#DartAd300x250,#DartAd990x90,#DealsPageSideAd,#DivAd,#DivAd1,#DivAd2,#DivAd3,#DivAdA,#DivAdB,#DivAdC,#DivAdEggHeadCafeTopBanner,#DivAdForumSplitBottom,#DivMsnCamara,#DivTopAd,#DividerAd,#DynamicAD,#FFN_imBox_Container,#FIN_300_250_position2_ad,#FIN_300_x_250_600_position2_ad,#FIN_300x250_pos1_ad,#FIN_300x80_facebook_ad,#FIN_468x60_sponsor_ad,#FIN_640x60_promo_ad,#FIN_728_90_leaderboard_ad,#FIN_ad_300x100_pos_1,#FIN_videoplayer_300x250ad,#FRONTADVT2,#FRONTADVT3,#FRONTADVT4,#FRONTADVT5,#FRONTADVT8,#FooterAd,#FooterAdBlock,#FooterAdContainer,#ForumSponsorBanner,#Freeforums-AdS-footer-728x90,#Freeforums-AdS-header-728x90,#FrontPageRectangleAd,#GOOGLEADS_BOT,#GOOGLEADS_CENTER,#GOOGLE_ADS_13,#GOOGLE_ADS_151,#GOOGLE_ADS_16,#GOOGLE_ADS_2,#GOOGLE_ADS_49,#GOOGLE_ADS_56,#GOOGLE_ADS_94,#GameMediumRectangleAD,#GamePageAdDiv,#GoogleADsense,#GoogleADthree,#GoogleAd,#GoogleAd1,#GoogleAd2,#GoogleAd3,#GoogleAdExploreMF,#GoogleAdRight,#GoogleAdTop,#GoogleAds250X200,#GoogleAdsPlaceHolder,#GoogleAdsPresentationControl,#GoogleAdsense,#GoogleAdsenseMerlinWrapper,#GoogleLeaderBoardAdUnit,#GoogleLeaderBoardAdUnitSeperator,#GoogleRelatedAds,#GoogleSponsored,#Google_Adsense_Main,#HALExchangeAds,#HALHouseAd,#HB_News-ad,#HEADERAD,#HOME_TOP_RIGHT_BOXAD,#HP_adUnits,#H_Ad_728x90,#H_Ad_Wrap,#HeaderAD,#HeaderAd,#HeaderAdBlock,#HeaderAdSidebar,#HeaderAdsBlock,#HeaderAdsBlockFront,#HeaderBannerAdSpacer,#HeaderTextAd,#HeroAd,#HomeAd1,#HomeBannerAd,#Home_AdSpan,#HomepageAdSpace,#HorizontalAd,#HouseAd,#HouseAdInsert,#ID_Ad_Sky,#IM_AD,#IN_HOUSE_AD_SWITCHER_0,#IframeAdBannerSmallContainer,#ImageAdSideColumn,#ImageRotaAreaAD,#IslandAd_DeferredAdSpacediv,#JobsearchResultsAds,#Journal_Ad_125,#Journal_Ad_300,#JuxtapozAds,#KH-contentAd,#LB_Row_Ad,#LS-google-ad,#LargeRectangleAd,#LeaderTop-ad,#LeaderboardAdvertising,#LeaderboardNav_ad_placeholder,#LeftAd,#LeftAd1,#LeftAdF1,#LeftAdF2,#LeftSideBarAD,#LftAd,#LittleAdvert,#LoungeAdsDiv,#LovelabAdoftheDay,#LowerContentAd,#MAIN.ShowTopic &gt; .ad,#MAINAD-box,#MPUAdSpace,#MPUadvertising,#MPUadvertisingDetail,#M_AD,#MainAd,#MainAd1,#MainContent_ucTopRightAdvert,#MainHeader1_FRONTADVT10,#MainHeader1_FRONTADVT11,#MainRightStrip1_RIGHTADVT2,#MainRightStrip1_RIGHTADVT3,#MainRightStrip1_RIGHTADVT4,#MainRightStrip1_RIGHTADVT5,#MainSponsoredLinks,#MastheadAd,#MediumRectangleAD,#Meebo\:AdElement\.Root,#MidPageAds,#MiddleRightRadvertisement,#Module-From_Advertisers,#MyAdHeader,#MyAdSky,#NavAD,#Nightly_adContainer,#NormalAdModule,#OAS2,#OASMiddleAd,#OASRightAd,#OAS_AD_TOPRIGHT,#OAS_Top,#OAS_posBottom,#OAS_posRight,#OAS_posTopRight,#OpenXAds,#OverrideAdArea,#PPX_imBox_Container,#PREFOOTER_LEFT_BOXAD,#PREFOOTER_RIGHT_BOXAD,#PageLeaderAd,#PaneAdvertisingContainer,#PhotoAd1,#PostSponsorshipContainer,#PushDownAd,#RHS2Adslot,#RadAdSkyscraper,#RadAd_Skyscraper,#RelevantAds,#RgtAd1,#RhsIsland_DeferredAdSpacediv,#RightAd,#RightAdSpace,#RightAdvertisement,#RightBottom300x250AD,#RightColumn125x125AD,#RightColumnAdContainer,#RightColumnSkyScraperAD,#RightNavTopAdSpot,#RightRailSponsor,#RightSponsoredAd,#RollOutAd970x66,#RollOutAd970x66iframe,#SBAArticle,#SBABottom,#SBAInHouse,#SBATier1,#SBATier2,#SBATier3,#SE20-ad-container,#SE_ADLINK_LAY_gd,#SIDEMENUAD,#SIM_ad_300x100_homepage_pos1,#SIM_ad_300x250-600_pos1,#SIM_ad_300x250_pos2,#SIM_ad_468x60_homepage_pos1,#SIM_ad_468x60_homepage_pos2,#SIM_ad_468x60_homepage_pos3,#SIM_ad_728x90_bottom,#SRPadsContainer,#ScoreboardAd,#SearchAd_PlaceHolder,#SearchAdsBottom,#SearchAdsTop,#Section-Ads,#SectionAd300-250,#SectionSponsorAd,#ServerAd,#SideAdMpu,#SideBarAdWidget,#SideMpuAdBar,#SidebarAdContainer,#SkyAd,#SkyscraperAD,#SpecialAds,#Spons-Link,#SponsorBarWrap,#SponsoredAd,#SponsoredAds,#SponsoredLinks,#SponsoredResultsTop,#SponsorsAds,#TDads,#TL_footer_advertisement,#TOPADS,#TOP_ADROW,#TOP_RIGHT_BOXAD,#TPVideoPlayerAd300x250,#Tadspacecbar,#Tadspacefoot,#Tadspacehead,#Tadspacemrec,#TextLinkAds,#ThemeSection_adbanner2,#ThemeSection_adbanner3,#ThreadAd,#TipTopAdSpace,#TitleAD,#Top-Ad-Container,#Top468x60AD,#TopADs,#TopAd0,#TopAdBox,#TopAdContainer,#TopAdDiv,#TopAdPlacement,#TopAdPos,#TopAdTable,#TopAdvert,#TopBannerAd,#TopCenterAdUnit,#TopGoogleCustomAd,#TopRightRadvertisement,#TopSideAd,#TopTextAd,#VM-MPU-adspace,#VM-footer-adspace,#VM-footer-adwrap,#VM-header-adspace,#VM-header-adwrap,#VertAdBox,#VertAdBox0,#WNAd1,#WNAd103,#WNAd17,#WNAd20,#WNAd43,#WNAd46,#WNAd47,#WNAd49,#WNAd52,#WNAd63,#WarningCodecBanner,#WelcomeAd,#WindowAdHolder,#WordFromSponsorAdvertisement,#XEadLeaderboard,#XEadSkyscraper,#YahooAdParentContainer,#YahooAdsContainer,#YahooAdsContainerPowerSearch,#YahooContentAdsContainerForBrowse,#YahooSponsoredResults,#Zergnet,#\5f _mom_ad_12,#\5f _mom_ad_2,#\5f _nq__hh[style="display:block!important"],#_ads,#a4g-floating-ad,#a_ad10Sp,#a_ad11Sp,#abHeaderAdStreamer,#ab_adblock,#abc-AD_topbanner,#about_adsbottom,#above-comments-ad,#above-fold-ad,#above-footer-ads,#aboveAd,#aboveGbAd,#aboveNodeAds,#aboveplayerad,#abovepostads,#acAdContainer,#acm-ad-tag-300x250-atf,#acm-ad-tag-300x250-btf,#acm-ad-tag-728x90-atf,#acm-ad-tag-728x90-btf,#ad-0,#ad-1,#ad-1000x90-1,#ad-1050,#ad-109,#ad-118,#ad-120-left,#ad-120x600-1,#ad-120x600-other,#ad-120x600-sidebar,#ad-120x60Div,#ad-125x125,#ad-13,#ad-133,#ad-143,#ad-160,#ad-160-long,#ad-160x600,#ad-160x600-sidebar,#ad-160x600-wrapper,#ad-162,#ad-17,#ad-170,#ad-180x150-1,#ad-19,#ad-197,#ad-2,#ad-2-160x600,#ad-200x200_newsfeed,#ad-21,#ad-213,#ad-220x90-1,#ad-230x100-1,#ad-240x400-1,#ad-240x400-2,#ad-250,#ad-250x300,#ad-28,#ad-29,#ad-3,#ad-3-300x250,#ad-300,#ad-300-250,#ad-300-additional,#ad-300-detail,#ad-300-sidebar,#ad-300X250-2,#ad-300a,#ad-300b,#ad-300x-container,#ad-300x250,#ad-300x250-0,#ad-300x250-01,#ad-300x250-02,#ad-300x250-1,#ad-300x250-2,#ad-300x250-b,#ad-300x250-right,#ad-300x250-right0,#ad-300x250-sidebar,#ad-300x250-wrapper,#ad-300x250Div,#ad-300x250_top,#ad-300x40-1,#ad-300x40-2,#ad-300x40-5,#ad-300x60-1,#ad-32,#ad-320,#ad-336,#ad-350,#ad-37,#ad-376x280,#ad-4,#ad-4-300x90,#ad-5-images,#ad-55,#ad-63,#ad-635x40-1,#ad-655,#ad-7,#ad-728,#ad-728-90,#ad-728x90,#ad-728x90-1,#ad-728x90-leaderboard-top,#ad-728x90-top,#ad-728x90-top0,#ad-732,#ad-734,#ad-74,#ad-88,#ad-88-wrap,#ad-970,#ad-98,#ad-a,#ad-a1,#ad-abs-b-0,#ad-abs-b-1,#ad-abs-b-10,#ad-abs-b-2,#ad-abs-b-3,#ad-abs-b-4,#ad-abs-b-5,#ad-abs-b-6,#ad-abs-b-7,#ad-absolute-160,#ad-ads,#ad-adsensemedium,#ad-advertorial,#ad-affiliate,#ad-around-the-web,#ad-article,#ad-article-in,#ad-aside-1,#ad-atf-mid,#ad-atf-top,#ad-ban,#ad-banner,#ad-banner-1,#ad-banner-970,#ad-banner-980,#ad-banner-atf,#ad-banner-body-top,#ad-banner-bottom,#ad-banner-image,#ad-banner-placement,#ad-banner-top,#ad-banner-wrap,#ad-bar,#ad-base,#ad-beauty,#ad-below-content,#ad-big,#ad-bigbox,#ad-bigsize,#ad-billboard,#ad-billboard-atf,#ad-billboard-bottom,#ad-blade,#ad-block,#ad-block-125,#ad-block-bottom,#ad-block-container,#ad-border,#ad-bottom-300x250,#ad-bottom-banner,#ad-bottom-right-container,#ad-bottom-wrapper,#ad-bottomright,#ad-box,#ad-box-1,#ad-box-2,#ad-box-bottom,#ad-box-first,#ad-box-halfpage,#ad-box-leaderboard,#ad-box-rectangle,#ad-box-rectangle-2,#ad-box-second,#ad-box1,#ad-box2,#ad-boxATF,#ad-boxes,#ad-br-container,#ad-bs,#ad-btf-bot,#ad-btm,#ad-buttons,#ad-campaign,#ad-carousel,#ad-case,#ad-center,#ad-circfooter,#ad-code,#ad-col,#ad-colB-1,#ad-column,#ad-container-1,#ad-container-2,#ad-container-adaptive-1,#ad-container-adaptive-3,#ad-container-fullpage,#ad-container-inner,#ad-container-leaderboard,#ad-container-mpu,#ad-container-outer,#ad-container-overlay,#ad-container1,#ad-contentad,#ad-cube-Bottom,#ad-cube-Middle,#ad-cube-sec,#ad-cube-top,#ad-desktop-wrap,#ad-discover,#ad-display-ad,#ad-div-leaderboard,#ad-double-spotlight-container,#ad-drawer,#ad-e-container,#ad-ear,#ad-extra-comments,#ad-extra-flat,#ad-f-container,#ad-featured-right,#ad-first-post,#ad-five,#ad-five-75x50s,#ad-flex-first,#ad-flex-top,#ad-footer,#ad-footer-728x90,#ad-footprint-160x600,#ad-for-map,#ad-frame,#ad-framework-top,#ad-front-btf,#ad-front-footer,#ad-front-page-160x600-placeholder,#ad-front-sponsoredlinks,#ad-full-width,#ad-fullbanner-btf,#ad-fullbanner-outer,#ad-fullbanner2,#ad-fullbanner2-billboard-outer,#ad-fullwidth,#ad-giftext,#ad-globalleaderboard,#ad-google-chrome-sidebar,#ad-googleAdSense,#ad-gpt-bottomrightrec,#ad-gpt-leftrec,#ad-gpt-rightrec,#ad-gutter-left,#ad-gutter-right,#ad-halfpage,#ad-header-left,#ad-header-mad,#ad-header-mobile,#ad-header-right,#ad-holder,#ad-homepage-content-well,#ad-homepage-top-wrapper,#ad-horizontal,#ad-horizontal-header,#ad-horizontal-top,#ad-idreammedia,#ad-img,#ad-in-post,#ad-index,#ad-inner,#ad-inside1,#ad-inside2,#ad-interstitial-wrapper,#ad-introtext,#ad-label,#ad-label2,#ad-large-header,#ad-lb,#ad-lb-secondary,#ad-ldr-spot,#ad-lead,#ad-leader,#ad-leader-atf,#ad-leader-container,#ad-leaderboard-1,#ad-leaderboard-1-container,#ad-leaderboard-2,#ad-leaderboard-2-container,#ad-leaderboard-bottom,#ad-leaderboard-container,#ad-leaderboard-footer,#ad-leaderboard-spot,#ad-leaderboard-top,#ad-leaderboard-top-container,#ad-leaderboard_bottom,#ad-leadertop,#ad-left,#ad-left-sidebar-ad-1,#ad-left-sidebar-ad-2,#ad-left-sidebar-ad-3,#ad-left-timeswidget,#ad-links-content,#ad-list-row,#ad-lrec,#ad-main-bottom,#ad-main-top,#ad-makeup,#ad-manager,#ad-manager-ad-bottom-0,#ad-manager-ad-top-0,#ad-medium,#ad-medium-lower,#ad-medium-rectangle,#ad-medrec,#ad-medrec_premium,#ad-megaban2,#ad-megasky,#ad-mid,#ad-mid-rect,#ad-middle,#ad-middlethree,#ad-middletwo,#ad-midpage,#ad-minibar,#ad-module,#ad-mpu,#ad-mpu-topRight-container,#ad-mpu-warning,#ad-mpu1-spot,#ad-mpu2,#ad-mpu2-spot,#ad-mpu600-right-container,#ad-mrec,#ad-mrec2,#ad-new,#ad-news-sidebar-300x250-placeholder,#ad-north,#ad-north-base,#ad-northeast,#ad-one,#ad-other,#ad-output,#ad-overlay,#ad-page-1,#ad-page-sky-300-a1,#ad-page-sky-300-a2,#ad-page-sky-left,#ad-pan3l,#ad-pencil,#ad-placard,#ad-placeholder,#ad-placement,#ad-plate,#ad-popup,#ad-popup1,#ad-position-a,#ad-post,#ad-push,#ad-pushdown,#ad-r,#ad-rbkua,#ad-rec-atf,#ad-rec-btf-top,#ad-recommend,#ad-rect,#ad-rectangle,#ad-rectangle-flag,#ad-rectangle1,#ad-rectangle1-outer,#ad-rectangle2,#ad-rectangle3,#ad-region-1,#ad-results,#ad-rian,#ad-right-3 {display: none !important; color: #72da9a !important; background-color: #a0abfd !important;}#ad-right-sidebar,#ad-right-sidebar-ad-1,#ad-right-sidebar-ad-2,#ad-right-skyscraper-container,#ad-right-top,#ad-right2,#ad-right3,#ad-righttop,#ad-ros-atf-300x90,#ad-ros-btf-300x90,#ad-row,#ad-row-1,#ad-s1,#ad-safe,#ad-secondary-sidebar-1,#ad-section,#ad-separator,#ad-shop,#ad-side,#ad-side-text,#ad-sidebar,#ad-sidebar-1,#ad-sidebar-2,#ad-sidebar-3,#ad-sidebar-300x80,#ad-sidebar-btf,#ad-sidebar-container,#ad-sidebar-mad,#ad-sidebar-mad-wrapper,#ad-sidebar-right_300-1,#ad-sidebar-right_300-2,#ad-sidebar-right_300-3,#ad-sidebar-right_bitgold,#ad-sidebar1,#ad-sidebar2,#ad-sidebarleft-bottom,#ad-sidebarleft-top,#ad-single-spotlight-container,#ad-skin,#ad-sky,#ad-sky-atf,#ad-sky-btf,#ad-skyscraper,#ad-skyscraper-feedback,#ad-skyscraper1-outer,#ad-sla-sidebar300x250,#ad-slot-1,#ad-slot-2,#ad-slot-4,#ad-slot-right,#ad-slot1,#ad-slot4,#ad-slug-wrapper,#ad-small-banner,#ad-smartboard_1,#ad-smartboard_2,#ad-smartboard_3,#ad-software-description-300x250-placeholder,#ad-software-sidebar-300x250-placeholder,#ad-space,#ad-space-1,#ad-space-2,#ad-space-big,#ad-special,#ad-splash,#ad-sponsored-traffic,#ad-sponsors,#ad-spot,#ad-spot-bottom,#ad-spot-one,#ad-springboard-300x250,#ad-squares,#ad-standard-wrap,#ad-stickers,#ad-story-bottom-in,#ad-story-bottom-out,#ad-story-right,#ad-story-top,#ad-stripe,#ad-tab,#ad-tail-placeholder,#ad-tape,#ad-target,#ad-target-Leaderbord,#ad-teaser,#ad-techwords,#ad-textad-single,#ad-three,#ad-tlr-spot,#ad-top-250,#ad-top-300x250,#ad-top-728,#ad-top-banner,#ad-top-leaderboard,#ad-top-left,#ad-top-lock,#ad-top-right,#ad-top-right-container,#ad-top-text-low,#ad-top-wrap,#ad-tower,#ad-tower1,#ad-trailerboard-spot,#ad-tray,#ad-two,#ad-typ1,#ad-uprrail1,#ad-video,#ad-video-page,#ad-west,#ad-wide-leaderboard,#ad-wrap,#ad-wrap-right,#ad-wrapper-728x90,#ad-wrapper-left,#ad-wrapper-right,#ad-wrapper1,#ad-yahoo-simple,#ad-zone-1,#ad-zone-2,#ad-zone-inline,#ad001,#ad002,#ad01,#ad02,#ad1-468x400,#ad1-home,#ad1-placeholder,#ad1-wrapper,#ad1006,#ad101,#ad10Sp,#ad11,#ad11Sp,#ad120x600,#ad120x600container,#ad120x60_override,#ad125B,#ad125BL,#ad125BR,#ad125TL,#ad125TR,#ad125x125,#ad160,#ad160-2,#ad160600,#ad160Container,#ad160Wrapper,#ad160a,#ad160x600,#ad160x600right,#ad180,#ad1Sp,#ad1_holder,#ad1_top-left,#ad2-home,#ad2-label,#ad2-original-placeholder,#ad250,#ad260x60,#ad2CONT,#ad2Sp,#ad2_footer,#ad2_iframe,#ad2_inline,#ad2gameslayer,#ad300,#ad300-250,#ad300-title,#ad300250top,#ad300IndexBox,#ad300X250,#ad300_250,#ad300_a,#ad300_x_250,#ad300b,#ad300c,#ad300text,#ad300top,#ad300x100Middle,#ad300x150,#ad300x250,#ad300x250Module,#ad300x250_336x280_300x600_336x850,#ad300x250_336x280_bottom,#ad300x250_callout,#ad300x250box,#ad300x250box2,#ad300x250c,#ad300x50,#ad300x60,#ad300x600,#ad300x600_callout,#ad31,#ad32,#ad330x240,#ad336,#ad336atf,#ad336iiatf,#ad336x280,#ad375x85,#ad3Article,#ad3small,#ad468_hidden,#ad468x60,#ad468x60-story,#ad468x60_top,#ad470,#ad508x125,#ad520x85,#ad526x250,#ad5_inline,#ad6,#ad600,#ad600x90,#ad650,#ad720x90bot,#ad72890,#ad72890foot,#ad728Bottom,#ad728Box,#ad728BoxBtm,#ad728Header,#ad728Mid,#ad728Top,#ad728Wrapper,#ad728X90,#ad728foot,#ad728h,#ad728mid,#ad728top,#ad728x90_1,#ad728x90asme,#ad728x90box,#ad76890topContainer,#ad768top1,#ad90,#ad97090,#adAd,#adBadges,#adBanner1,#adBanner10,#adBanner120x600,#adBanner160x600,#adBanner160x610,#adBanner2,#adBanner3,#adBanner336x280,#adBanner4,#adBanner728,#adBanner728_bot,#adBanner9,#adBannerBottom,#adBannerBreaking,#adBannerHeader,#adBannerSpacer,#adBannerTable,#adBannerTop,#adBannerWrap,#adBannerWrapperFtr,#adBar,#adBlock01,#adBlock125,#adBlockBanner,#adBlockContainer,#adBlockContent,#adBlockOverlay,#adBlockTop,#adBlocks,#adBody01,#adBody02,#adBody03,#adBody04,#adBody06,#adBottbanner,#adBottom,#adBox,#adBox11,#adBox16,#adBox350,#adBox390,#adBoxUpperRight,#adBrandDev,#adBrandingStation,#adBreak,#adCENTRAL,#adCTXSp,#adCarousel,#adChannel,#adChoiceFooter,#adChoices,#adChoicesIcon,#adChoicesLogo,#adCirc300X200,#adCirc300X250,#adCirc300x300,#adCirc620X100,#adCirc_620_100,#adClickLeft,#adClickMe,#adClickRight,#adCol,#adColumn,#adColumn3,#adCompanionBanner,#adCompanionSubstitute,#adContainerCC,#adContainerForum,#adContainer_1,#adContainer_2,#adContainer_3,#adContent,#adContentHolder,#adContext,#adControl1,#adDailyDeal,#adDiv0,#adDiv1,#adDiv300,#adDiv4,#adDiv728,#adDivContainer,#adDivleaderboard,#adDivminimodulebutton1,#adDivminimodulebutton2,#adDivminimodulebutton3,#adDivmrec,#adDivmrecadhomepage,#adFiller,#adFixFooter,#adFlashDiv,#adFooter,#adFooterTitel,#adFot,#adFoxBanner,#adFps,#adFtofrs,#adGmWidget,#adGoogleText,#adGroup1,#adGroup4,#adHeaderTop,#adHeaderWrapper,#adHolder1,#adHolder2,#adHolder3,#adHolder300x250,#adHolder4,#adHolder5,#adHolder6,#adIframe,#adInBetweenPosts,#adInCopy,#adInPlayer,#adInstoryOneWrap,#adInstoryTwoWrap,#adInteractive1,#adInteractive4,#adInteractiveInline,#adIsland,#adLB,#adLContain,#adLabel,#adLeaderTop,#adLeaderboard,#adLeaderboard-middle,#adLeaderboardUp,#adLeft,#adLink,#adLink1,#adLink300,#adLocation-1,#adLocation-2,#adLocation-3,#adLocation-4,#adLounge,#adLrec,#adMOBILETOP,#adMPU,#adMPUHolder,#adMagAd,#adMain,#adMarketplace,#adMed,#adMedRect,#adMediaWidget,#adMediumRectangle,#adMeld,#adMessage,#adMid1,#adMid2,#adMiddle0Frontpage,#adMiddle_imgAd,#adMiniPremiere,#adMonster1,#adMpu,#adMpuBottom,#adNshareWrap,#adOne,#adOuter,#adPLaceHolderTop728,#adPUSHDOWNBANNER,#adPageContainer,#adPanelAjaxUpdate,#adPlaceHolder1,#adPlaceHolder2,#adPlaceHolderRight,#adPlaceScriptrightSidebarFirstBanner,#adPlaceScriptrightSidebarSecondBanner,#adPlaceScripttopBanner,#adPlacer,#adPopover,#adPosOne,#adPosition14,#adPosition5,#adPosition6,#adPosition7,#adPosition9,#adPush,#adRContain,#adRectangleFooter,#adRectangleHeader,#adRight,#adRight1,#adRight2,#adRight3,#adRight4,#adRight5,#adRightColumnHolder,#adSPLITCOLUMNTOPRIGHT,#adScraper,#adSection,#adSense,#adSenseBottomDiv,#adSenseBox,#adSenseContentTop,#adSenseLoadingPlaceHolder,#adSenseModule,#adSenseResultAdblock,#adSenseResults,#adSenseSidebarBottom,#adSenseTall,#adSenseWrapper,#adServer_marginal,#adSet,#adShortTower,#adSide,#adSideButton,#adSidebar,#adSidebarSq,#adSite,#adSkin,#adSkinBackdrop,#adSkinLeft,#adSkinRight,#adSky,#adSkyPosition,#adSkyscraper,#adSlider,#adSlot-inPage-300x250-right,#adSlot01,#adSlot02,#adSlot1,#adSlot2,#adSlot2_grid,#adSlot3,#adSlot3_grid,#adSlot4,#adSlot4_grid,#adSlug,#adSpace,#adSpace0,#adSpace1,#adSpace10,#adSpace11,#adSpace12,#adSpace13,#adSpace14,#adSpace15,#adSpace16,#adSpace17,#adSpace18,#adSpace19,#adSpace2,#adSpace20,#adSpace21,#adSpace22,#adSpace23,#adSpace24,#adSpace25,#adSpace3,#adSpace300_ifrMain,#adSpace4,#adSpace5,#adSpace6,#adSpace7,#adSpace8,#adSpace9,#adSpaceBottom,#adSpace_footer,#adSpace_right,#adSpace_top,#adSpacer,#adSpecial,#adSplotlightEm,#adSponsor,#adSpot-Leader,#adSpot-banner,#adSpot-island,#adSpot-mrec1,#adSpot-promobox1,#adSpot-promobox2,#adSpot-sponsoredlinks,#adSpot-textbox1,#adSpot-twin,#adSpot-widestrip,#adSpotAdvertorial,#adSpotIsland,#adSpotIslandLarge,#adSpotSponsoredLinks,#adSpotholder-EGN,#adSpotlightSquare1,#adSqb,#adSquare,#adStaticA,#adStrip,#adSuperAd,#adSuperPremiere,#adSuperSkyscraper,#adSuperbanner,#adTableCell,#adTag,#adTag-genre,#adTag1,#adTag2,#adTeaser,#adText2,#adTextCustom,#adTextLink,#adTextRt,#adText_container,#adThree,#adTicker,#adTiff,#adTile,#adTop,#adTop1,#adTop2,#adTopBanner-inner,#adTopBanner1,#adTopBig,#adTopBox300x300,#adTopContent,#adTopModule,#adTopbanner,#adTopboxright,#adTower,#adTower1,#adTower2,#adTwo,#adUn_1,#adUn_2,#adUn_3,#adUnit,#adValue,#adVcss,#adWideSkyscraper,#adWrap,#adWrapper,#adWrapper1,#adWrapperLeft,#adWrapperRight,#adWrapperSky,#adZoneTop,#ad_0,#ad_02,#ad_03,#ad_04,#ad_120_sidebar,#ad_120x600,#ad_120x90,#ad_130x250_inhouse,#ad_160,#ad_160_600,#ad_160_600_2,#ad_160_container_left,#ad_160_container_right,#ad_160_sidebar,#ad_160x160,#ad_160x600,#ad_175x300,#ad_190x90,#ad_250,#ad_250x250,#ad_300,#ad_300_250,#ad_300_250_1,#ad_300_250_inline,#ad_300_container,#ad_300_interruptor,#ad_300_wrapper,#ad_300a,#ad_300b,#ad_300c,#ad_300misc,#ad_300x100,#ad_300x100_m_c,#ad_300x250,#ad_300x250Ando,#ad_300x250_1,#ad_300x250_2,#ad_300x250_container,#ad_300x250_content_column,#ad_300x250_frame,#ad_300x250_m_c,#ad_300x250_secondary,#ad_300x250_startgame,#ad_300x250m,#ad_300x60,#ad_300x600,#ad_300x90,#ad_336,#ad_336_singlebt,#ad_350_200,#ad_380x35,#ad_450x280,#ad_468_60,#ad_468x120,#ad_468x60,#ad_470x60a,#ad_500,#ad_500_label,#ad_500x150,#ad_6,#ad_700_90,#ad_700x430,#ad_728,#ad_728_foot,#ad_728_holder,#ad_728a,#ad_728b,#ad_728h,#ad_728x90,#ad_728x90_container,#ad_728x90_content,#ad_728x90home,#ad_728x91,#ad_8,#ad_88x31,#ad_940,#ad_984,#ad_990x90,#ad_A,#ad_B,#ad_B1,#ad_Banner,#ad_Bottom,#ad_C,#ad_C2,#ad_D,#ad_DisplayAd1,#ad_DisplayAd2,#ad_E,#ad_Entry_160x600,#ad_Entry_728x90,#ad_F,#ad_Feature_Middlebar_468x60,#ad_G,#ad_H,#ad_Header_768x90,#ad_Home_300x250,#ad_I,#ad_J,#ad_K,#ad_L,#ad_LargeRec01,#ad_M,#ad_Middle,#ad_Middle1,#ad_N,#ad_NorthBanner,#ad_O,#ad_P,#ad_Position1,#ad_Pushdown,#ad_R1,#ad_Right,#ad_Top,#ad_Top2,#ad_TopLongBanner,#ad_Wrap,#ad_YieldManager-160x600,#ad_YieldManager-300x250,#ad_YieldManager-728x90,#ad_above_game,#ad_ad,#ad_adsense,#ad_after_navbar,#ad_anchor,#ad_and_content_ad_box,#ad_article_btm,#ad_bannerManage_1,#ad_banner_1,#ad_banner_120x600,#ad_banner_125x300,#ad_banner_300x250,#ad_banner_468x60,#ad_banner_728x90,#ad_banner_728x90_bot,#ad_banner_bot,#ad_banner_example,#ad_banner_top,#ad_banners,#ad_banners_content,#ad_bar,#ad_bar_rect,#ad_bellow_post,#ad_bg,#ad_bg_image,#ad_big,#ad_bigbox,#ad_bigbox_companion,#ad_bigrectangle,#ad_bigsize,#ad_bigsize_wrapper,#ad_billboard,#ad_billboard2,#ad_billboard_ifm,#ad_block,#ad_block_0,#ad_block_1,#ad_block_2,#ad_block_300x250,#ad_block_mpu,#ad_board_after_forums,#ad_board_before_forums,#ad_body,#ad_bottom,#ad_bottom_1x1,#ad_bottom_728x90,#ad_bottom_another,#ad_bottom_article_text,#ad_bottombrandtext,#ad_box,#ad_box02,#ad_box160a,#ad_box300x250,#ad_box_2,#ad_box_ad_0,#ad_box_ad_1,#ad_box_colspan,#ad_box_top,#ad_branding,#ad_bs_area,#ad_btmslot,#ad_bucket_med_rectangle_1,#ad_bucket_med_rectangle_2,#ad_buttons,#ad_category_middle,#ad_cell,#ad_center_monster,#ad_channel,#ad_chitikabanner_120x600LH,#ad_choices,#ad_circ300x250,#ad_circ_300_200,#ad_circ_300x250,#ad_circ_300x300,#ad_close,#ad_closebtn,#ad_cna2,#ad_comments,#ad_companion_banner,#ad_complex,#ad_comps_top,#ad_cont,#ad_cont1,#ad_cont2,#ad_container,#ad_container_0,#ad_container_300x250,#ad_container_marginal,#ad_container_side,#ad_container_sidebar,#ad_container_top,#ad_content_before_first_para,#ad_content_fullsize,#ad_content_primary,#ad_content_right,#ad_content_top,#ad_content_wrap,#ad_creative_2,#ad_creative_3,#ad_creative_5,#ad_cyborg,#ad_display_300_250,#ad_display_728_90,#ad_div,#ad_div_bottom,#ad_div_top,#ad_embed_300x250,#ad_fb_circ,#ad_feature,#ad_feedback,#ad_fg,#ad_firstpost,#ad_flyrelax,#ad_foot,#ad_footer,#ad_footer1,#ad_footerAd,#ad_footer_s,#ad_footer_small,#ad_frame,#ad_frame1,#ad_front_three,#ad_fullbanner,#ad_gallery,#ad_gallery_bot,#ad_global_300x250,#ad_global_above_footer,#ad_global_header,#ad_global_header1,#ad_global_header2,#ad_google_content336,#ad_googlebanner_160x600LH,#ad_grp1,#ad_grp2,#ad_gutter_top,#ad_h3,#ad_haha_1,#ad_haha_4,#ad_halfpage,#ad_hdr_2,#ad_head,#ad_header_1,#ad_header_container,#ad_header_logo_placeholder,#ad_headerlarge,#ad_help_link_new,#ad_hf,#ad_hide_for_menu,#ad_holder,#ad_home,#ad_home_middle,#ad_horizontal,#ad_horseshoe_left,#ad_horseshoe_right,#ad_horseshoe_spacer,#ad_horseshoe_top,#ad_hotpots,#ad_houseslot1_desktop,#ad_houseslot_a,#ad_houseslot_b,#ad_hy_01,#ad_hy_02,#ad_hy_03,#ad_hy_04,#ad_hy_05,#ad_hy_06,#ad_hy_07,#ad_hy_08,#ad_iframe_160_by_600_middle,#ad_iframe_300,#ad_img,#ad_img_banner,#ad_in_arti,#ad_infoboard_box,#ad_inplace_1,#ad_interestmatch,#ad_interestmatch400,#ad_island,#ad_island2,#ad_island_incontent,#ad_island_incontent2,#ad_keywrods,#ad_kvadrat_under_player,#ad_label,#ad_large,#ad_large_rectangular,#ad_lastpost,#ad_layer,#ad_layer1,#ad_layer2,#ad_ldb,#ad_lead1,#ad_leader,#ad_leaderBoard,#ad_leaderboard2,#ad_leaderboard3,#ad_leaderboard728x90,#ad_leaderboard_1,#ad_leaderboard_flex,#ad_leaderboard_master,#ad_leaderboard_middle,#ad_leaderboard_top,#ad_leaderboardtwo,#ad_leaderborder_container1,#ad_left,#ad_left_1,#ad_left_2,#ad_left_3,#ad_left_skyscraper,#ad_left_skyscraper_2,#ad_left_top,#ad_leftslot,#ad_lft,#ad_link,#ad_links,#ad_links_footer,#ad_lnk,#ad_lrec,#ad_lwr_square,#ad_main_top,#ad_marker,#ad_mast,#ad_med_rect,#ad_medium,#ad_medium_rectangle,#ad_medium_rectangular,#ad_mediumrectangle,#ad_megabanner,#ad_menu_header,#ad_message,#ad_messageboard_x10,#ad_middle,#ad_middle_122,#ad_middle_2,#ad_middle_bottom,#ad_midstrip,#ad_ml,#ad_mobile,#ad_module,#ad_most_pop_234x60_req_wrapper,#ad_mpu,#ad_mpu2,#ad_mpu300x250,#ad_mpu_1,#ad_mpuav,#ad_mpuslot,#ad_mrcontent,#ad_mrec,#ad_mrec1,#ad_mrec2,#ad_msgplus-gallery-5,#ad_myFrame,#ad_netpromo,#ad_new,#ad_newsletter,#ad_num_1,#ad_num_2,#ad_num_3,#ad_one,#ad_overlay_content,#ad_overlay_countdown,#ad_overture,#ad_panel,#ad_panel_1,#ad_panel_2,#ad_panorama_top,#ad_pencil,#ad_ph_1,#ad_place,#ad_placeholder,#ad_play_300,#ad_plugs,#ad_post,#ad_post_300,#ad_poster,#ad_pr_info,#ad_primary,#ad_primaryAd,#ad_promoAd,#ad_publicidad,#ad_pushupbar-closed,#ad_rail,#ad_rect,#ad_rect1,#ad_rect2,#ad_rect3,#ad_rect_body,#ad_rect_bottom,#ad_rect_c,#ad_rectangle,#ad_rectangle_medium,#ad_rectangular,#ad_region1,#ad_region2,#ad_region3,#ad_region5,#ad_related_links_div,#ad_related_links_div_program,#ad_replace_div_0,#ad_replace_div_1,#ad_report_leaderboard,#ad_report_rectangle,#ad_results,#ad_right,#ad_right3,#ad_rightSidebarFirstBanner {display: none !important; color: #72da9a !important; background-color: #a0abfd !important;}#ad_rightSidebarSecondBanner,#ad_right_1,#ad_right_box,#ad_right_column1_1,#ad_right_column2_1,#ad_right_content_article_page,#ad_right_content_home,#ad_right_main,#ad_right_out,#ad_right_rail_bottom,#ad_right_rail_flex,#ad_right_rail_top,#ad_right_second,#ad_right_skyscraper,#ad_right_skyscraper_2,#ad_right_top,#ad_rightslot,#ad_righttop-300x250,#ad_ros_tower,#ad_rotator-2,#ad_rotator-3,#ad_row,#ad_row_home,#ad_rr_1,#ad_rside,#ad_rside_link,#ad_script_head,#ad_sec,#ad_sec_div,#ad_secondary,#ad_sense,#ad_sense_help,#ad_sgd,#ad_short,#ad_sidebar,#ad_sidebar1,#ad_sidebar2,#ad_sidebar3,#ad_sidebar_1,#ad_sidebar_top,#ad_silo,#ad_sitebar,#ad_skin,#ad_sky,#ad_sky1,#ad_sky2,#ad_sky3,#ad_skyscraper,#ad_skyscraper120,#ad_skyscraper160x600,#ad_skyscraper_1,#ad_skyscraper_right,#ad_skyscraper_text,#ad_slot,#ad_slot_bottom,#ad_slot_leaderboard,#ad_slot_livesky,#ad_slot_right_bottom,#ad_slot_right_top,#ad_slot_sky_top,#ad_small,#ad_space_300_250,#ad_space_728,#ad_space_top,#ad_sponsored,#ad_sponsorship_2,#ad_spot300x250,#ad_spot_a,#ad_spot_b,#ad_spotlight,#ad_squares,#ad_ss,#ad_stck,#ad_strapad,#ad_stream10,#ad_stream11,#ad_stream12,#ad_stream16,#ad_stream17,#ad_stream19,#ad_stream8,#ad_strip,#ad_takeover,#ad_tall,#ad_tbl,#ad_term_bottom_place,#ad_text:not(textarea),#ad_thread_first_post_content,#ad_thread_last_post_content,#ad_tile_home,#ad_top,#ad_topBanner,#ad_top_728x90,#ad_top_banner,#ad_top_bar,#ad_top_header_center,#ad_top_holder,#ad_topbanner,#ad_topmob,#ad_topnav,#ad_topslot_b,#ad_tp_banner_1,#ad_tp_banner_2,#ad_two,#ad_txt,#ad_under_game,#ad_unit2,#ad_unit_slot1,#ad_unit_slot2,#ad_unit_slot3,#ad_unit_slot4,#ad_vertical,#ad_video_abovePlayer,#ad_video_belowPlayer,#ad_video_large,#ad_website_top,#ad_wide,#ad_wide_box,#ad_widget,#ad_widget_1,#ad_window,#ad_wp_base,#ad_wrapper1,#ad_wrapper2,#ad_x10,#ad_x20,#ad_xrail_top,#ad_zone,#ad_zone1,#ad_zone2,#ad_zone3,#adamazonbox,#adaptvcompanion,#adbForum,#adbanner-home-left,#adbanner-home-right,#adbanner-middle,#adbanner-top-left,#adbanner-top-right,#adbanner00001,#adbanner00002,#adbanner00003,#adbanner00004,#adbanner00005,#adbanner1,#adbanner_abovethefold_300,#adbanner_mobile_top,#adbannerbox,#adbannerdiv,#adbannerleft,#adbannerright,#adbannerwidget,#adbar_ad_1_div,#adbar_ad_2_div,#adbar_ad_3_div,#adbar_ad_4_div,#adbar_ads_container_div,#adbar_main_div,#adbarbox,#adbard,#adbdiv,#adbg_ad_0,#adbg_ad_1,#adbig,#adblade,#adblade-disc,#adbladeSp,#adblade_ad,#adblkad,#adblock-300x250,#adblock-big,#adblock-jango,#adblock-leaderboard,#adblock-small,#adblock1,#adblock2,#adblock4,#adblockOverlay,#adblock_header_ad_1,#adblock_header_ad_1_inner,#adblock_sidebar_ad_2,#adblock_sidebar_ad_2_inner,#adblock_v,#adblockbottom,#adblockerMess,#adblockermessage,#adblockerwarnung,#adblockrighta,#adblocks-detected,#adblocktop,#adblocktwo,#adbn,#adbn_UMU,#adbnr,#adbottom,#adbottomgao,#adbox-indivisual-body-topright,#adbox-placeholder-topbanner,#adbox-topbanner,#adbox1,#adbox2,#adbox300600,#adbox300x250_1,#adbox300x250_2,#adbox_right,#adbrite,#adbrite_inline_div,#adbritebottom,#adbutton,#adbuttons,#adcarousel,#adcatfish,#adcell,#adcenter,#adcenter2,#adcenter4,#adchoices-icon,#adchoices_container,#adclear,#adclose,#adcode1,#adcode10,#adcode2,#adcode3,#adcode4,#adcolContent,#adcolumn,#adcolumnwrapper,#adcontainer125px,#adcontainer2,#adcontainer250x250,#adcontainer3,#adcontainer5,#adcontainerRight,#adcontainer___gelement_adbanner_2_0,#adcontainer_top_ads,#adcontainsm,#adcontent1,#adcontextlinks,#adcontrolPushSite,#adcontrolhalfbanner,#adcontrolisland,#add-top,#add720,#add_160x600,#add_720bottom,#add_block_ad1,#add_block_ad2,#add_ciao2,#add_space_google,#add_space_sidebar,#addbottomleft,#addiv-bottom,#addiv-top,#addspaceleft,#addspaceright,#adfactor-label,#adfloat,#adfooter,#adfooter_728x90,#adfooter_hidden,#adframe:not(frameset),#adframetop,#adfreead,#adhalfbanner_wrapper,#adhalfpage,#adhead_g,#adheadhubs,#adhesionAdSlot,#adhide,#adholder,#adhome,#adhomepage,#adhzh,#adid10601,#adid2161,#adiframe1_iframe,#adiframe2_iframe,#adiframe3_iframe,#adigniter,#adimg,#adimg0,#adimg3,#adimg6,#adition_content_ad,#adjacency,#adjacent-list-ad,#adjs_id,#adk2_slider_top_right,#adkit_content-block,#adkit_content-foot,#adkit_footer,#adkit_mrec1,#adkit_mrec2,#adkit_rectangle,#adkit_rnav-bt,#adkit_rnav-fb,#adl_120x600,#adl_250x250,#adl_300x100,#adl_300x120,#adl_300x250,#adl_300x250_td,#adl_728x90,#adl_individual_1,#adl_leaderboard,#adl_medium_rectangle,#adlabel,#adlabelFooter,#adlabelfooter,#adlabelheader,#adlanding,#adlandscape,#adlargeverti,#adlargevertimarginauto,#adlayerContainer,#adlayer_back,#adlayerad,#adleaderboard,#adleaderboard_flex,#adleaderboardb,#adleaderboardb_flex,#adleft,#adlink-13,#adlink-133,#adlink-19,#adlink-197,#adlink-213,#adlink-28,#adlink-55,#adlink-74,#adlink-98,#adlinks,#adlinkws,#adlove,#adlrec,#admain,#admanagerResultListBox,#admanager_leaderboard,#admanager_top_banner,#admid,#admiddle3,#admiddle3center,#admiddle3left,#admiddleCenter,#admod2,#admon-300x250,#admon-728x90,#admputop,#admsg,#admulti520,#adnet,#adnorth,#adops_cube,#adops_leaderboard,#adops_skyscraper,#adoptionsimg,#adoverlaysrc,#adpanel-block,#adplace,#adplaceholder_mpu01,#adplacement,#adplacer_preroll1,#adplate-content,#adpos-top,#adpos1-leaderboard,#adposition,#adposition-C,#adposition-FPMM,#adposition-REM2,#adposition-SHADE,#adposition-TOCSS,#adposition-TVSP,#adposition-inner-REM1,#adposition-inner-REM3,#adposition1,#adposition10,#adposition1_container,#adposition2,#adposition4,#adpositionbottom,#adpostloader,#adpromo,#adprovider-default,#adrect,#adrectangle,#adrectanglea,#adrectanglea_flex,#adrectanglea_hidden,#adrectangleb,#adrectangleb_flex,#adrectmarginauto,#adrig,#adright2,#adrightbottom,#adrightgame,#adrighthome,#adrightrail,#adriver_middle,#adriver_top,#adrotate_widgets-11,#adrotate_widgets-12,#adrotate_widgets-2,#adrotate_widgets-20,#adrotate_widgets-24,#adrotate_widgets-3,#adrotate_widgets-4,#adrotate_widgets-5,#adrotate_widgets-6,#adrotate_widgets-7,#adrow,#adrow-house,#adrow1,#adrow3,#ads &gt; .dose &gt; .dosesingle,#ads-1,#ads-125,#ads-125-2,#ads-160x600,#ads-200,#ads-200x200-a,#ads-250,#ads-300,#ads-300-250,#ads-300x250-L3-2,#ads-336x280,#ads-468,#ads-5,#ads-728x90,#ads-728x90-I3,#ads-728x90-I4,#ads-A,#ads-B,#ads-B1,#ads-C,#ads-C1,#ads-E,#ads-E1,#ads-F,#ads-G,#ads-H,#ads-K,#ads-area,#ads-banner,#ads-banner-top,#ads-block,#ads-block-frame,#ads-bot,#ads-bottom,#ads-box-header-pb,#ads-by-google,#ads-category,#ads-center-text,#ads-contain-125,#ads-container-2,#ads-container-anchor,#ads-container-top,#ads-dell,#ads-div2,#ads-dw,#ads-footer,#ads-footer-inner,#ads-footer-wrap,#ads-google,#ads-h-left,#ads-h-right,#ads-header,#ads-header-728,#ads-horizontal,#ads-hoster-2,#ads-indextext,#ads-king,#ads-leader,#ads-leaderboard,#ads-leaderboard1,#ads-left-top,#ads-lrec,#ads-main,#ads-main-bottom,#ads-menu,#ads-middle,#ads-mn,#ads-mpu,#ads-outer,#ads-panel,#ads-prices,#ads-rhs,#ads-right,#ads-right-bottom,#ads-right-cube,#ads-right-skyscraper,#ads-right-text,#ads-right-top,#ads-right-twobottom,#ads-rt,#ads-sidebar-bottom,#ads-sidebar-skyscraper-unit,#ads-sidebar-top,#ads-slot,#ads-sponsored-boxes,#ads-sticky,#ads-text,#ads-top,#ads-tp,#ads-under-rotator,#ads-vers7,#ads-vertical,#ads-vertical-wrapper,#ads-wrap,#ads100Box,#ads100Middlei4,#ads120,#ads120_600-widget-2,#ads125,#ads160_600-widget-3,#ads160_600-widget-5,#ads160_600-widget-7,#ads160left,#ads1_sidebar,#ads2,#ads3,#ads300,#ads300-250,#ads300Bottom,#ads300Top,#ads300_250-widget-1,#ads300_250-widget-10,#ads300_250-widget-11,#ads300_250-widget-2,#ads300_250-widget-3,#ads300_250-widget-4,#ads300_250-widget-6,#ads300_600-widget-2,#ads300hp,#ads300k,#ads300x200,#ads300x250,#ads300x250_2,#ads300x250_single,#ads315,#ads336Box,#ads336x280,#ads340web,#ads4,#ads50,#ads7,#ads728,#ads72890top,#ads728bottom,#ads728top,#ads728x90,#ads728x90_2,#ads790,#adsBannerFrame,#adsBar,#adsBottom,#adsBox-460_left,#adsBox-dynamic-right,#adsBoxResultsPage,#adsCTN,#adsCombo02_1,#adsCombo02_2,#adsCombo02_3,#adsCombo02_4,#adsCombo02_5,#adsCombo02_6,#adsCombo02_7,#adsContainer,#adsContent,#adsDisplay,#adsDiv0,#adsDiv1,#adsDiv2,#adsDiv3,#adsDiv4,#adsDiv5,#adsDiv6,#adsDiv7,#adsGooglePos,#adsHeadLine,#adsHeading,#adsID,#adsIframe,#adsIfrme1,#adsIfrme2,#adsIfrme3,#adsIfrme4,#adsLREC,#adsLeftZone1,#adsLeftZone2,#adsLinkFooter,#adsMpu,#adsNarrow,#adsPanel,#adsProdHighlight_wrap,#adsRight,#adsRightDiv,#adsSPRBlock,#adsSuperCTN,#adsTop,#adsTopLeft,#adsZone,#adsZone1,#adsZone2,#adsZone_1,#ads_01,#ads_120x60_block,#ads_160,#ads_2015,#ads_2015_1,#ads_3,#ads_300,#ads_300x250,#ads_320_260,#ads_320_260_2,#ads_728,#ads_728x90,#ads_absolute_left,#ads_absolute_right,#ads_back,#ads_banner,#ads_banner1,#ads_banner_header,#ads_banner_right1,#ads_bar,#ads_belowforumlist,#ads_belownav,#ads_big,#ads_bigrec1,#ads_bigrec2,#ads_bigrec3,#ads_block,#ads_bottom_inner,#ads_bottom_outer,#ads_box,#ads_box1,#ads_box2,#ads_box_bottom,#ads_box_right,#ads_box_top,#ads_button,#ads_by_google,#ads_campaign,#ads_catDiv,#ads_center,#ads_center_banner,#ads_central,#ads_container,#ads_dynamicShowcase,#ads_eo,#ads_expand,#ads_footer,#ads_fullsize,#ads_h,#ads_halfsize,#ads_header,#ads_header_games,#ads_horiz,#ads_horizontal,#ads_html1,#ads_html2,#ads_im,#ads_inner,#ads_insert_container,#ads_layout_bottom,#ads_lb,#ads_lb_frame,#ads_leaderbottom,#ads_left,#ads_left_top,#ads_line,#ads_mads_r1,#ads_mads_r2,#ads_medrect,#ads_notice,#ads_pave,#ads_place,#ads_placeholder,#ads_player,#ads_player_audio,#ads_player_line,#ads_postdownload,#ads_pro_468_60_on_vid,#ads_r_c,#ads_right_sidebar,#ads_right_top,#ads_section_textlinks,#ads_side,#ads_sidebar_bgnd,#ads_sidebar_roadblock,#ads_sky,#ads_slide_div,#ads_space,#ads_space_header,#ads_special_center,#ads_sponsFeed-headline,#ads_sponsFeed-left,#ads_sponsored_link_pixel,#ads_superbanner1,#ads_superbanner2,#ads_superior,#ads_td,#ads_text,#ads_textlinks,#ads_title,#ads_top2,#ads_top_banner,#ads_top_container,#ads_top_right,#ads_top_sec,#ads_topbanner,#ads_tower1,#ads_tower_top,#ads_video,#ads_watch_top_square,#ads_wide,#ads_zone27,#adsbottom,#adsbottombluesleft,#adsbox,#adsbox-left,#adsbox-right,#adsbox1,#adsbox2,#adsbox3,#adsbox336x280,#adsbox4,#adsbox728x90,#adsbysourcewidget-2,#adscenter,#adscolumn,#adscontainer,#adscontent,#adsctl00_AdsHome2,#adsd_contentad_r1,#adsd_contentad_r2,#adsd_contentad_r3,#adsd_topbanner,#adsd_txt_sky,#adsdaq160600,#adsdaq300250,#adsdaq72890,#adsdiv300,#adsdiv468,#adsdiv_close,#adsection,#adsense-2,#adsense-468x60,#adsense-area,#adsense-bottom,#adsense-end-300,#adsense-head-spacer,#adsense-header,#adsense-letterbox,#adsense-link,#adsense-middle,#adsense-module-bottom,#adsense-new,#adsense-post,#adsense-right,#adsense-sidebar,#adsense-tag,#adsense-text,#adsense-top,#adsense-wrap,#adsense03,#adsense04,#adsense05,#adsense1,#adsense160600,#adsense2,#adsense2pos,#adsense300x250,#adsense468,#adsense6,#adsense728,#adsenseArea,#adsenseHeader,#adsenseLeft,#adsenseOne,#adsenseWrap,#adsense_300x250,#adsense_article_bottom,#adsense_article_left,#adsense_banner_top,#adsense_block_238x200,#adsense_block_350x320,#adsense_bottom_ad,#adsense_box,#adsense_box2,#adsense_box_video,#adsense_honeytrap,#adsense_image,#adsense_item_detail,#adsense_leaderboard,#adsense_overlay,#adsense_placeholder_2,#adsense_sidebar,#adsense_testa,#adsense_top,#adsense_unit5,#adsense_ziel,#adsensebreadcrumbs,#adsenseheader,#adsensehorizontal,#adsensempu,#adsensepo,#adsensepos,#adsensequadr,#adsenseskyscraper,#adsensetext,#adsensetopmobile,#adsensetopplay,#adsensewidget-3,#adserv,#adserve-Banner,#adserve-Leaderboard,#adserve-MPU,#adserve-Sky,#adserver_HeaderAd,#adsfundo,#adshometop,#adshowbtm,#adshowtop,#adside,#adsideblock1,#adsider,#adsiframe,#adsimage,#adskinleft,#adskinlink,#adskinright,#adskintop,#adsky,#adskyleftdiv,#adskyrightdiv,#adskyscraper,#adskyscraper_flex,#adsleft1,#adslider,#adslist,#adslistbox,#adslot,#adslot-2-container,#adslot-3-container,#adslot-4-container,#adslot1,#adslot1173,#adslot1189,#adslot1202,#adslot2,#adslot3,#adslot4,#adslot5,#adslot6,#adslot7,#adslot_c2,#adslot_m1,#adslot_m2,#adslot_m3,#adsmegabanner,#adsmiddle,#adsnews,#adsonar,#adsonarBlock,#adspace-1,#adspace-2,#adspace-300x250,#adspace-728,#adspace-728x90,#adspace-bottom,#adspace-leaderboard-top,#adspace-one,#adspace-panorama,#adspace-top,#adspace300x250,#adspaceBox,#adspaceBox300,#adspaceBox300_150,#adspaceBox300white,#adspaceRow,#adspace_header,#adspace_leaderboard,#adspacer,#adspan,#adspdl-container,#adspecial_offer_box,#adsplace1,#adsplace2,#adsplace4,#adsplash,#adsponsorImg,#adsponsored_links_box,#adspot,#adspot-1,#adspot-149x170,#adspot-1x4,#adspot-2,#adspot-295x60,#adspot-2a,#adspot-2b,#adspot-300x110-pos-1,#adspot-300x125,#adspot-300x250-pos1,#adspot-300x250-pos3,#adspot-300x600-pos1,#adspot-468x60-pos-2,#adspot-620x270-pos-1,#adspot-620x45-pos-1,#adspot-620x45-pos-2,#adspot-728x90,#adspot-728x90-pos-2,#adspot-728x90-pos1,#adspot-a,#adspot-bottom,#adspot-c,#adspot-d,#adspot-top,#adspot300x250,#adspot_220x90,#adspot_300x250,#adspot_468x60,#adspot_728x90,#adspotlight1,#adsquare,#adsquare2,#adsright,#adss,#adssidebar2,#adssidebar3,#adsspace,#adstd,#adstext2,#adstory,#adstrip,#adstripbottom,#adstripnew,#adstuff,#adswidget1-quick-adsense,#adswidget2-quick-adsense,#adswidget2-quick-adsense-reloaded-2,#adswizzBanner,#adsxpls2,#adszed-728x90,#adtab,#adtab-feedback2,#adtable_top,#adtag5,#adtag8,#adtag_right_side,#adtagfooter,#adtagheader,#adtagrightcol,#adtags_left,#adtaily,#adtaily-widget-light,#adtech_0,#adtech_1,#adtech_2,#adtech_3,#adtech_728or920_2,#adtech_googleslot_03c,#adtech_leaderboard01,#adtech_takeover,#adtechbanner728,#adtext-top-content,#adtopDet,#adtopHeader,#adtopPrograma,#adtop_dfp,#adtopbanner,#adtopbox,#adtophp,#adtrafficright,#adtxt,#adundergame,#adunderpicture,#adunit,#adunit-mpu-atf,#adunit-mpu-atf-feed,#adunit-mpu-atf-sidebar,#adunit-mpu-btf-1,#adunit-mpu-btf-6,#adunit-mpu-btf-article,#adunit-mpu-btf-article-2,#adunit-mpu-btf-sidebar,#adunit-mpu-second,#adunit-pages1x1,#adunit-roadblock,#adunit300x500,#adunit_article_center_bottom_computer,#adunit_article_center_middle1_computer,#adunit_article_center_middle4_computer,#adunit_article_center_middle6_computer,#adunit_article_center_top_computer,#adunit_article_right_middle2_computer,#adunit_article_right_top_computer,#adunit_main_center_bottom_computer,#adunit_main_right_middle2_computer,#adunit_main_right_top_computer {display: none !important; color: #72da9a !important; background-color: #a0abfd !important;}#adunit_video,#adunitl,#adv-01,#adv-300,#adv-box,#adv-comments-placeholder,#adv-companion-iframe,#adv-container,#adv-ext-ext-1,#adv-ext-ext-2,#adv-fb-container,#adv-google,#adv-leaderboard,#adv-left,#adv-middle,#adv-middle1,#adv-midroll,#adv-mpux,#adv-preroll,#adv-right,#adv-right1,#adv-scrollable,#adv-sticky-1,#adv-sticky-2,#adv-strip,#adv-text,#adv-title,#adv-x34,#adv-x35,#adv-x36,#adv-x37,#adv-x38,#adv-x39,#adv-x40,#adv130x195,#adv160x600,#adv170,#adv2_ban,#adv300bottom,#adv300top,#adv300x250,#adv300x250container,#adv3_ban,#adv468x90,#adv728,#adv728x90,#adv768x90,#advCard1,#advCard2,#advCard3,#advCarrousel,#advHome,#advHomevideo,#advMegaBanner,#advRectangle,#advRectangle1,#advSidebarDocBox,#advSkin,#advTop,#advTopRight_anchor,#advWrapper,#adv_300,#adv_300x250_1,#adv_300x250_2,#adv_300x250_3,#adv_468x60_content,#adv_5,#adv_52,#adv_6,#adv_62,#adv_65,#adv_7,#adv_70,#adv_71,#adv_728,#adv_728x90,#adv_73,#adv_94,#adv_96,#adv_97,#adv_98,#adv_BoxBottom,#adv_Inread,#adv_IntropageOvl,#adv_LdbMastheadPush,#adv_Reload,#adv_Skin,#adv_banner_featured,#adv_banner_sidebar,#adv_bootom,#adv_border,#adv_box_a,#adv_center,#adv_config,#adv_contents,#adv_contents_tem,#adv_google_300,#adv_google_728,#adv_halfpage,#adv_halfpage_title,#adv_holder,#adv_leaderboard,#adv_mpu1,#adv_mpu2,#adv_network,#adv_overlay,#adv_overlay_content,#adv_r,#adv_right,#adv_skin,#adv_skin_1,#adv_skin_1_a,#adv_sky,#adv_sponsorRowFooter,#adv_sponsorRowHeader,#adv_sponsor_cat,#adv_textlink,#adv_textual_google_div,#adv_top,#adv_top_banner_wrapper,#adv_videobox,#adv_wallpaper,#adv_wallpaper2,#adv_wideleaderboard,#adver,#adver-top,#adver1,#adver2,#adver3,#adver4,#adver5,#adver6,#adver7,#adverFrame,#advert-1,#advert-120,#advert-2,#advert-ahead,#advert-banner,#advert-banner-wrap,#advert-block,#advert-boomer,#advert-box,#advert-column,#advert-container-top,#advert-display,#advert-footer,#advert-footer-hidden,#advert-header,#advert-hpu,#advert-island,#advert-leaderboard,#advert-left,#advert-links-bottom,#advert-mpu,#advert-placeholder-post-content-image-1,#advert-right,#advert-right-not-home,#advert-sky,#advert-skyscaper,#advert-skyscraper,#advert-stickysky,#advert-text,#advert-top,#advert-top-banner,#advert-wrapper,#advert1hp,#advert234_container,#advert2area,#advert2areasmall,#advert300x260,#advert3area,#advert3areasmall,#advertBanner,#advertBox,#advertBoxRight,#advertBoxSquare,#advertColumn,#advertControl4_advertLink,#advertCover,#advertDB,#advertMPUContainer,#advertMarkerHorizontalConatiner,#advertMarkerVerticalConatiner,#advertOverlay,#advertRight,#advertSection,#advertSeparator,#advertTop,#advertTopLarge,#advertTopSmall,#advertTower,#advertWrapper,#advert_01,#advert_04,#advert_05,#advert_07,#advert_1,#advert_125x125,#advert_250x250,#advert_300x2502,#advert_300x2503,#advert_561_01,#advert_561_02,#advert_561_03,#advert_561_04_container,#advert_561_04_left_end,#advert_561_04_right_end,#advert_561_05,#advert_561_07,#advert_back_160x600,#advert_back_300x250_1,#advert_back_300x250_2,#advert_banner,#advert_belowmenu,#advert_bottom_100x70,#advert_container,#advert_container_300,#advert_header,#advert_home01,#advert_home02,#advert_home03,#advert_home04,#advert_leaderboard,#advert_lrec_format,#advert_media,#advert_mid,#advert_mpu,#advert_mpu_1,#advert_mpu_2,#advert_right1,#advert_right_skyscraper,#advert_sky,#advert_top,#advert_yell,#advertblock,#advertborder,#advertbox2,#advertbox3,#advertbox4,#adverthome,#adverti,#advertise-here,#advertise-here-sidebar,#advertise-now,#advertise-sidebar,#advertise1,#advertise2,#advertiseBanner,#advertiseGoogle,#advertiseHere,#advertiseLink,#advertise_top,#advertisediv,#advertiseheretop,#advertisement-10,#advertisement-13,#advertisement-16,#advertisement-300x250,#advertisement-4,#advertisement-7,#advertisement-728x90,#advertisement-content,#advertisement-detail1,#advertisement-detail2,#advertisement-large,#advertisement-rightcolumn,#advertisement-text,#advertisement160x600,#advertisement2,#advertisement3,#advertisement728x90,#advertisementArea,#advertisementBottomThreadUser,#advertisementBox,#advertisementDIV2,#advertisementFooterTop,#advertisementHeaderBottom,#advertisementHorizontal,#advertisementLigatus,#advertisementPrio2,#advertisementRight,#advertisementRightcolumn0,#advertisementRightcolumn1,#advertisementThread,#advertisementTop,#advertisement_RightPanel,#advertisement_banner,#advertisement_block,#advertisement_box,#advertisement_container,#advertisement_label,#advertisement_notice,#advertisementblock1,#advertisementblock2,#advertisementblock3,#advertisements_bottom,#advertisements_sidebar,#advertisements_top,#advertisementsarticle,#advertisementsxml,#advertiser-container,#advertiserLinks,#advertiserReports,#advertisers-caption,#advertising-160x600,#advertising-300x250,#advertising-728x90,#advertising-banner,#advertising-caption,#advertising-container,#advertising-control,#advertising-mockup,#advertising-right,#advertising-skyscraper,#advertising-top,#advertising2,#advertising3,#advertising300x250,#advertisingBlocksLeaderboard,#advertisingBottomFull,#advertisingHrefTop,#advertisingLeftLeft,#advertisingLink,#advertisingModule160x600,#advertisingModule728x90,#advertisingRightColumn,#advertisingRightRight,#advertisingTop,#advertisingTopWrapper,#advertising_1,#advertising_2,#advertising_300,#advertising_300_under,#advertising_300x105,#advertising_320,#advertising_728,#advertising_728_under,#advertising_btm,#advertising_column,#advertising_container,#advertising_contentad,#advertising_header,#advertising_holder,#advertising_horiz_cont,#advertising_iab,#advertising_top_container,#advertisment-block-1,#advertisment-horizontal,#advertisment1,#advertismentBottom728x90_,#advertismentElementInUniversalbox,#advertisment_content,#advertisment_panel,#advertismentgoogle,#advertistop_td,#advertleft,#advertorial,#advertorial-box,#advertorial-wrap,#advertorial1,#advertorial_block_3,#advertorial_links,#advertorial_red_listblock,#adverts-top-container,#adverts-top-left,#adverts-top-middle,#adverts-top-right,#adverts_right,#advertscroll,#advertsingle,#advertspace,#advertssection,#adverttop,#advetisement_300x250,#advframe,#advgeoul,#advgoogle,#advman-2,#advr_mobile,#advsingle,#advt,#advt-right-skyscraper,#advt_bottom,#advtbar,#advtext,#advtopright,#advx3_banner,#adwhitepaperwidget,#adwidget,#adwidget-5,#adwidget-6,#adwidget1,#adwidget2,#adwidget2_hidden,#adwidget3_hidden,#adwidget_hidden,#adwin,#adwin_rec,#adwith,#adwords-4-container,#adwords-box,#adwrap-295x295,#adwrap-722x90,#adwrap-729x90,#adwrap-966x90,#adxBigAd,#adxBigAd2,#adxLeaderboard,#adxMiddle,#adxMiddle5,#adxMiddleRight,#adxSponLink,#adxSponLink2,#adxSponLinkA,#adxToolSponsor,#adx_ad,#adx_ad_bottom,#adx_ad_bottom_close,#adxtop,#adxtop2,#adzbanner,#adzerk,#adzerk1,#adzerk2,#adzerk_by,#adzone,#adzone-halfpage_1,#adzone-leaderboard_1,#adzone-leaderboard_2,#adzone-middle1,#adzone-middle2,#adzone-mpu_1,#adzone-mpu_2,#adzone-parallax_1,#adzone-right,#adzone-sidebarSmallPromo1,#adzone-sidebarSmallPromo2,#adzone-teads,#adzone-top,#adzone-wallpaper,#adzone-weatherbar-logo,#adzoneBANNER,#adzone_content,#adzonebanner,#adzoneheader,#aetn_3tier_ad_bar,#af_ad_large,#af_ad_small,#af_adblock,#afc-container,#affiliate_ad,#affinityBannerAd,#after-content-ad,#after-content-ads,#after-header-ad-left,#after-header-ad-right,#after-header-ads,#after_ad,#afterpostad,#agencies_ad,#agi-ad300x250,#agi-ad300x250overlay,#agi-sponsored,#alert_ads,#amazon-ads,#amazon_ad,#amazon_bsa_block,#ami_ad_cntnr,#amsSparkleAdFeedback,#amsSparkleAdWrapper,#amzn-native-ad-0,#amzn_assoc_ad_div_adunit0_0,#anAdScGame300x250,#analytics_ad,#analytics_banner,#anchorAd,#annoying_ad,#annoying_extra_ad_wrapper,#anyvan-ad,#ap-widget-ad,#ap-widget-ad-label,#ap_adframe,#ap_adtext,#ap_cu_overlay,#ap_cu_wrapper,#apiBackgroundAd,#apiTopAdContainer,#apiTopAdWrap,#apmNADiv,#apolload,#app_advertising_pregame_content,#app_advertising_rectangle,#app_advertising_rectangle_ph,#apt-homebox-ads,#araHealthSponsorAd,#area-adcenter,#area-left-ad,#area13ads,#area1ads,#article-ad,#article-ad-container,#article-advert,#article-advert-dfp,#article-agora-ad,#article-billboard-ad-1,#article-bottom-ad,#article-box-ad,#article-footer-sponsors,#article-island-ad,#article-sidebar-ad,#article-sponspred-content,#article-top-728x90-ad-wrapper,#articleAd,#articleAdReplacement,#articleBoard-ad,#articleLeftAdColumn,#articleSideAd,#article_LeftAdWords,#article_SponsoredLinks,#article_ad,#article_ad_1,#article_ad_3,#article_ad_bottom,#article_ad_bottom_cont,#article_ad_container,#article_ad_rt1,#article_ad_top,#article_ad_top_cont,#article_ad_w,#article_adholder,#article_ads,#article_advert,#article_banner_ad,#article_body_ad1,#article_bottom_ad01,#article_box_ad,#article_gallery_desktop_ad,#article_left_ad01,#article_sidebar_ad,#article_sidebar_ad_02,#articlead1,#articlead2,#articlead300x250r,#articleadblock,#articletop_ad,#articleview_ad,#articleview_ad2,#artist-ad-container,#as24-magazine-rightcol-adtag-1,#aside_ad,#asideads,#asinglead,#assetsListings[style="display: block;"],#atad1,#atad2,#atlasAdDivGame,#atwAdFrame0,#atwAdFrame1,#atwAdFrame2,#atwAdFrame3,#atwAdFrame4,#autos_banner_ad,#aw-ad-container,#awds-nt1-ad,#awesome-ad,#awp_advertisements-2,#b-ad-choices,#b-adw,#b5-skyscraper-ad-3,#b5_ad_footer,#b5_ad_sidebar1,#b5_ad_top,#b5ad300,#bLinkAdv,#babAdTop,#backad,#background-ad-head-spacer,#background-adv,#background_ad_left,#background_ad_right,#background_ads,#backgroundadvert,#ban_300x250,#ban_728x90,#banner-300x250,#banner-300x250-area,#banner-300x250-north,#banner-300x600-area,#banner-336x280-north,#banner-336x280-south,#banner-468x60,#banner-728,#banner-728adtag,#banner-728adtag-bottom,#banner-728x90,#banner-728x90-area,#banner-ad-container,#banner-ad-first,#banner-ad-last,#banner-ad-loader,#banner-ad-square-first,#banner-ad-square-last,#banner-ads,#banner-advert,#banner-advert-container,#banner-lg-ad,#banner-skyscraper,#banner.b-banner__content,#banner120x600,#banner250x250,#banner300-top-right,#banner300x250,#banner468,#banner468x60,#banner600,#banner660x90,#banner728,#banner728x90,#banner975_container,#bannerAdContainer1_1,#bannerAdContainer1_2,#bannerAdContainer1_3,#bannerAdContainer1_4,#bannerAdContainer1_5,#bannerAdContainer1_6,#bannerAdContainer2_1,#bannerAdContainer2_2,#bannerAdContainer2_3,#bannerAdContainer2_4,#bannerAdContainer2_5,#bannerAdContainer2_6,#bannerAdFrame,#bannerAdLInk,#bannerAdRight3,#bannerAdTop,#bannerAdWrap,#bannerAd_ctr,#bannerAd_rdr,#bannerAds,#bannerAdsense,#bannerAdvert,#bannerGoogle,#banner_280_240,#banner_300_250,#banner_300x250_sidebar,#banner_468x60,#banner_ad,#banner_ad_Sponsored,#banner_ad_bottom,#banner_ad_div_fw,#banner_ad_footer,#banner_ad_module,#banner_ad_placeholder,#banner_ad_top,#banner_admicro,#banner_ads,#banner_adsense,#banner_adv,#banner_advertisement,#banner_adverts,#banner_content_ad,#banner_mpu1,#banner_mpu3,#banner_sedo,#banner_slot,#banner_spacer,#banner_videoad,#banner_wrapper_top,#bannerad-bottom,#bannerad-top,#bannerad2,#banneradrow,#bannerads,#banneradspace,#banneradvert3,#barAdWrapper,#base-advertising-top,#base-board-ad,#baseAdvertising,#baseboard-ad,#baseboard-ad-wrapper,#basket-adContainer,#bbContentAds,#bb_ad_container,#bbadwrap,#bbccom_leaderboard,#bbccom_leaderboard_container,#bbccom_mpu,#bbccom_sponsor_section,#bbccom_sponsor_section_text,#bbccom_storyprintsponsorship,#bbo_ad1,#bcaster-ad,#bdnads-top-970x90,#before-footer-ad,#below-listings-ad,#below-menu-ad-header,#below-post-ad,#belowAd,#belowContactBoxAd,#belowNodeAds,#below_comments_ad_holder,#below_content_ad_container,#belowad,#belowheaderad,#bg-footer-ads,#bg-footer-ads2,#bg_YieldManager-160x600,#bg_YieldManager-300x250,#bg_YieldManager-728x90,#bg_banner_120x600,#bg_banner_468x60,#bg_banner_728x90,#bgad,#bh_adFrame_ag_300x250_atf,#bh_adFrame_bh_300x250_atf,#bh_adFrame_bh_300x250_btf,#big-ad-switch,#big-box-ad,#bigAd1,#bigAd2,#bigAdDiv,#bigBannerAd,#bigBoxAd,#bigBoxAdCont,#big_ad,#big_ad_label,#big_ads,#bigad300outer,#bigadbox,#bigadframe,#bigadspace,#bigadspot,#bigboard_ad,#bigboard_ad_ini,#bigbox-ad,#bigsidead,#billboard-ad-container,#billboard_ad,#bingadcontainer2,#bl11adv,#blancco-ad,#block--ex_dart-ex_dart_adblade_article,#block-ad_blocks-0,#block-ad_cube-0,#block-ad_cube-1,#block-adsense-0,#block-adsense-2,#block-adsense_managed-0,#block-advert-content,#block-advert-content2,#block-advertisement,#block-bean-artadocean-splitter,#block-bean-artadocean-text-link-1,#block-bean-artadocean-text-link-2,#block-bean-artadocean300x250-1,#block-bean-artadocean300x250-3,#block-bean-artadocean300x250-6,#block-bean-in-content-ad,#block-boxes-taboola,#block-dart-dart-tag-ad_top_728x90,#block-dart-dart-tag-gfc-ad-top-2,#block-dctv-ad-banners-wrapper,#block-dfp-billboard-leaderboard,#block-dfp-mpu-1,#block-dfp-mpu-2,#block-dfp-mpu-3,#block-dfp-skyscraper_left_1,#block-dfp-skyscraper_left_2,#block-dfp-top,#block-display-ads-leaderboard,#block-ex_dart-ex_dart_adblade_article,#block-ex_dart-ex_dart_sidebar_ad_block_bottom,#block-ex_dart-ex_dart_sidebar_ad_block_top,#block-fan-ad-fan-ad-front-leaderboard-bottom,#block-fan-ad-fan-ad-front-medrec-top,#block-fcc-advertising-first-sidebar-ad,#block-google-ads,#block-ibtimestv-player-companion-ad,#block-localcom-localcom-ads,#block-openads-0,#block-openads-1,#block-openads-13,#block-openads-14,#block-openads-2,#block-openads-3,#block-openads-4,#block-openads-5,#block-openads-brand,#block-openx-0,#block-openx-1,#block-openx-4,#block-openx-5,#block-panels-mini-top-ads,#block-sponsors,#block-spti_ga-spti_ga_adwords,#block-thewrap_ads_250x300-0,#block-thewrap_ads_250x300-1,#block-thewrap_ads_250x300-2,#block-thewrap_ads_250x300-3,#block-thewrap_ads_250x300-4,#block-thewrap_ads_250x300-5,#block-thewrap_ads_250x300-6,#block-thewrap_ads_250x300-7,#block-views-Advertorial-block_5,#block-views-Advertorial-block_6,#block-views-Advertorial-block_7,#block-views-ad-directory-block,#block-views-advertisements-block,#block-views-advt-story-bottom-block,#block-views-custom-advertisement-2-block--2,#block-views-custom-advertisement-block--2,#block-views-premium-ad-slideshow-block,#block-views-sidebar-ad,#block-views-sponsor-block,#blockAd,#blockAds,#block_ad,#block_ad2,#block_ad_container,#block_advert,#block_advert1,#block_advert2,#block_advertisement,#block_timeout_sponsored_0,#blog-ad,#blog-advert,#blog-header-ad,#blogImgSponsor,#blog_ad_area,#blog_ad_content,#blog_ad_opa,#blog_ad_right,#blog_ad_top,#blogad,#blogad-wrapper,#blogad_728x90_header,#blogad_right_728x91_bottom,#blogad_top_300x250_sidebar,#blogads,#blogads_most_right_ad,#blox-big-ad,#blox-big-ad-bottom,#blox-big-ad-top,#blox-halfpage-ad,#blox-tile-ad,#blox-tower-ad,#bn_ad,#bnr-300x250,#bnr-468x60,#bnr-728x90,#bnrAd,#bnrhd468,#body-ads,#bodyAd1,#bodyAd2,#bodyAd3,#bodyAd4,#body_728_ad,#bodymainAd,#bonus-offers-advertisement,#book-ad,#bookmarkListDeckAdPlaceholder,#boss_banner_ad-2,#boss_banner_ad-3,#bot_ads,#botad,#botads2,#bott_ad2,#bott_ad2_300,#bottom-728-ad,#bottom-ad,#bottom-ad-1,#bottom-ad-banner,#bottom-ad-container,#bottom-ad-leaderboard,#bottom-ad-tray,#bottom-ad-wrapper,#bottom-add,#bottom-ads,#bottom-ads-container,#bottom-adspot,#bottom-advertising,#bottom-article-ad-336x280,#bottom-banner-spc,#bottom-boxad,#bottom-pinned-ad,#bottom-side-ad,#bottom-sponsor-add,#bottomAd300,#bottomAdBlcok,#bottomAdCCBucket,#bottomAdContainer,#bottomAdSection,#bottomAdSense,#bottomAdSenseDiv,#bottomAdWrapper,#bottomAdvBox,#bottomAdvertTab,#bottomBannerAd,#bottomContentAd,#bottomDDAd,#bottomFullAd,#bottomGoogleAds,#bottomLeftAd,#bottomMPU,#bottomRightAd,#bottomRightAdContainer,#bottomRightAdSpace,#bottomSponsorAd,#bottom_ad_area,#bottom_ad_box,#bottom_ad_container,#bottom_ad_left,#bottom_ad_region,#bottom_ad_right,#bottom_ad_unit,#bottom_ad_wrapper,#bottom_adbox,#bottom_ads,#bottom_ads_container,#bottom_advert_container,#bottom_adwrapper,#bottom_banner_ad,#bottom_ex_ad_holder,#bottom_leader_ad,#bottom_overture,#bottom_player_adv,#bottom_sponsor_ads,#bottom_sponsored_links,#bottom_text_ad,#bottomad,#bottomad300,#bottomad_table,#bottomadbanner,#bottomadbar,#bottomadholder,#bottomads,#bottomadsdiv,#bottomadsense,#bottomadvert,#bottomadwrapper,#bottomcontentads,#bottomleaderboardad,#bottommpuAdvert,#bottommpuSlot,#bottomsponad,#bottomsponsoredresults,#box-ad,#box-ad-section,#box-ad-sidebar,#box-ads-small-1,#box-ads-small-2,#box-ads-tr,#box-ads300-picture-detail,#box-content-ad,#box-googleadsense-1,#box-googleadsense-r,#box1ad,#box2ad,#boxAD,#boxAd,#boxAd300,#boxAdContainer,#boxAdvert,#boxLightImageGalleryAd,#box_ad,#box_ad_container,#box_ad_middle,#box_ads,#box_advertisement,#box_advertising_info,#box_advertisment,#box_articlead,#box_mod_googleadsense,#box_text_ads,#boxad,#boxad1,#boxad2,#boxad3,#boxad4,#boxad5,#boxads,#boxes-box-ad300x250set2,#boxes-box-ad300x250set2block,#boxes-box-ad_300x250_1,#boxes-box-ad_728x90_1,#boxes-box-ad_mpu,#boxes-box-zergnet_module,#boxtube-ad,#bpAd,#bps-header-ad-container,#bq_homeMiddleAd,#br_ad,#brand-box-ad,#brand-box-ad-1-container,#branding_ad_comment,#branding_ad_header,#branding_click {display: none !important; color: #72da9a !important; background-color: #a0abfd !important;}#browse-ad-container,#browse_ads_ego_container,#browsead,#bsaadvert,#bsap_aplink,#btfAdNew,#btm_ads,#btmad,#btmsponsoredcontent,#btn-sponsored-features,#btnAds,#btnads,#btr_horiz_ad,#burn_header_ad,#bus-center-ad,#button-ads,#button-ads-horizontal,#button-ads-vertical,#buttonAdWrapper1,#buttonAdWrapper2,#buttonAds,#buttonAdsContainer,#button_ad_container,#button_ad_wrap,#button_ads,#buttonad-widget-3,#buttonad-widget-4,#buy-sell-ads,#buySellAds,#buysellads,#buysellads-4x1,#c-adzone,#c4_ad,#c4ad-Middle1,#c4ad-Top-parent,#c_ad_sb,#c_ad_sky,#c_sponsoredSquare,#c_upperad,#c_upperad_c,#caAdLarger,#carbonads-container,#card-ads-top,#catad,#catalyst-125-ads,#catalyst-ads-2,#category-ad,#category-sponsor,#category_sponsorship_ad,#cb-ad,#cb_medrect1_div,#cbs-video-ad-overlay,#cbz-ads-text-link,#cbz-comm-advert-1,#cellAd,#center-ad,#center-ad-group,#center-ads-72980,#center-three-ad,#centerAdsHeadlines,#center_ad-0,#center_col &gt; #\5f Emc,#center_col &gt; #main &gt; .dfrd &gt; .mnr-c &gt; .c._oc._zs,#center_col &gt; #res &gt; #topstuff + #search &gt; div &gt; #ires &gt; #rso &gt; #flun,#center_col &gt; #resultStats + #tads,#center_col &gt; #resultStats + #tads + #res + #tads,#center_col &gt; #resultStats + div + #res + #tads,#center_col &gt; #resultStats + div[style="border:1px solid #dedede;margin-bottom:11px;padding:5px 7px 5px 6px"],#center_col &gt; #taw &gt; #tvcap &gt; .rscontainer,#center_col &gt; div[style="font-size:14px;margin-right:0;min-height:5px"] &gt; div[style="font-size:14px;margin:0 4px;padding:1px 5px;background:#fff8e7"],#central-ads,#cgp-bigbox-ad,#ch-ads,#channel-ads-300-box,#channel-ads-300x600-box,#channel_ad,#channel_ads,#chartAdWrap,#charts_adv,#chatAdv2,#chatad,#cherry_ads,#chitikaAdBlock,#ciHomeRHSAdslot,#circ_ad,#circ_ad_300x100,#circ_ad_620x100,#circ_ad_holder,#circad_wrapper,#city_House_Ad_300x137,#clickforad,#cliczone-advert-left,#cliczone-advert-right,#clientAds,#closeAdsDiv,#closeable-ad,#cltAd,#cmMediaRotatorAdTLContainer,#cmn_ad_box,#cmn_toolbar_ad,#cnhi_premium_ads,#cnnAboveFoldBelowAd,#cnnBottomAd,#cnnCMAd,#cnnRR336ad,#cnnSponsoredPods,#cnnTopAd,#cnnTowerAd,#cnnVPAd,#cnn_cnn_adtag-3,#cnt #center_col &gt; #res &gt; #topstuff &gt; .ts,#cnt #center_col &gt; #taw &gt; #tvcap &gt; .c._oc._Lp,#coAd,#cobalt-ad-1-container,#coda_ad_728x90_9,#cokeAd,#col-right-ad,#col3_advertising,#colAd,#colRightAd,#collapseobj_adsection,#college_special_ad,#column-ads-bg,#column2-145x145-ad,#column4-google-ads,#columnAd,#columnTwoAdContainer,#column_adverts,#column_extras_ad,#commentAdWrapper,#commentTopAd,#comment_ad_zone,#comments-ad-container,#comments-ads,#comments_advert,#commercial-textlinks,#commercial_ads,#commercial_ads_footer,#common_right_ad_wrapper,#common_right_adspace,#common_right_lower_ad_wrapper,#common_right_lower_adspace,#common_right_lower_player_ad_wrapper,#common_right_lower_player_adspace,#common_right_player_ad_wrapper,#common_right_player_adspace,#common_right_right_adspace,#common_top_adspace,#community_ads,#compAdvertisement,#comp_AdsLeaderboardBottom,#comp_AdsLeaderboardTop,#companion-ad,#companionAdDiv,#companion_Ad,#companionad,#componentAdRectangle,#componentAdSkyscraper,#conduitAdPopupWrapper,#container-ad,#container-ad-content-rectangle,#container-ad-topright,#container-advMoreAbout,#container-polo-ad,#container-righttopads,#container-topleftads,#containerAds980,#containerLocalAds,#containerLocalAdsInner,#containerMrecAd,#containerSqAd,#container_ad,#container_top_ad,#contener_pginfopop1,#content &gt; #center &gt; .dose &gt; .dosesingle,#content &gt; #right &gt; .dose &gt; .dosesingle,#content-ad,#content-ad-header,#content-ads,#content-adver,#content-advertising-header,#content-advertising-right,#content-adwrapper,#content-area-ad,#content-columns-post-ad-bottom,#content-columns-post-ad-top,#content-left-ad,#content-right-ad,#contentAdBottomRight,#contentAdHalfpage,#contentAdSense,#contentAdTwo,#contentAds,#contentAds300x200,#contentAds300x250,#contentAds667x100,#contentAdsCatArchive,#contentBottomAdLeaderboard,#contentBoxad,#contentFooterAD,#contentMain_sponsoredResultsPanel,#contentTopAds2,#content_0_storyarticlepage_main_0_pnlAdSlot,#content_0_storyarticlepage_main_0_pnlAdSlotInner,#content_0_storyarticlepage_sidebar_0_pnlAdSlot,#content_0_storyarticlepage_sidebar_11_pnlAdSlot,#content_0_storyarticlepage_sidebar_6_pnlAdSlot,#content_11_pnlAdSlot,#content_11_pnlAdSlotInner,#content_16_pnlAdSlot,#content_16_pnlAdSlotInner,#content_2_pnlAdSlot,#content_2_pnlAdSlotInner,#content_3_twocolumnrightfocus_right_bottomright_0_pnlAdSlot,#content_3_twocolumnrightfocus_right_bottomright_1_pnlAdSlot,#content_4_threecolumnallfocus_right_0_pnlAdSlot,#content_7_pnlAdSlot,#content_7_pnlAdSlotInner,#content_9_twocolumnleftfocus_b_right_1_pnlAdSlot,#content_Ad,#content_ad,#content_ad_1,#content_ad_2,#content_ad_block,#content_ad_container,#content_ad_placeholder,#content_ad_square,#content_ad_top,#content_ads_content,#content_bottom_ad,#content_bottom_ads,#content_box_300body_sponsoredoffers,#content_box_adright300_google,#content_lower_center_right_ad,#content_mpu,#content_right_ad,#content_right_area_ads,#content_right_side_advertisement_on_top_wrapper,#contentad-adsense-homepage-1,#contentad-adsense-homepage-2,#contentad-commercial-1,#contentad-content-box-1,#contentad-footer-tfm-1,#contentad-last-medium-rectangle-1,#contentad-lower-medium-rectangle-1,#contentad-sponsoredlinks-1,#contentad-story-bottom-1,#contentad-story-middle-1,#contentad-story-top-1,#contentad-superbanner-1,#contentad-superbanner-2,#contentad-top-adsense-1,#contentad_imtext,#contentad_right,#contentad_urban,#contentadcontainer,#contentads,#contentarea-ad,#contentarea-ad-widget-area,#contentinlineAd,#contents_post_ad,#contest-ads,#contextad,#contextual-ads,#contextual-ads-block,#contextual-ads-bricklet,#contextual-dummy-ad,#contextualad,#corner_ad,#cornerad,#cosponsor,#cosponsorTab,#coverADS,#coverads,#cpad_242306,#cph_cph_tlda_pnlAd,#criteoAd,#crowd-ignite,#crowd-ignite-header,#csBotterAd,#csTopAd,#ct-ad-lb,#ctl00_AdPanel1,#ctl00_AdPanelISRect2,#ctl00_AdWords,#ctl00_Adspace_Top_Height,#ctl00_BottomAd,#ctl00_BottomAd2_AdArea,#ctl00_BottomAdPanel,#ctl00_ContentMain_BanManAd468_BanManAd,#ctl00_ContentPlaceHolder1_AdRotator3,#ctl00_ContentPlaceHolder1_BannerAd_TABLE1,#ctl00_ContentPlaceHolder1_DrillDown1_trBannerAd,#ctl00_ContentPlaceHolder1_TextAd_Pulse360AdPanel,#ctl00_ContentPlaceHolder1_ad12_adRotator_divAd,#ctl00_ContentPlaceHolder1_blockAdd_divAdvert,#ctl00_ContentPlaceHolder1_ctl00_ContentPlaceHolder1_pnlGoogleAdsPanel,#ctl00_ContentPlaceHolder1_ctl00_StoryContainer1_ImageHouseAd,#ctl00_ContentPlaceHolder1_toplead_news1_dvFlashAd,#ctl00_ContentPlaceHolder1_ucAdHomeRightFO_divAdvertisement,#ctl00_ContentPlaceHolder1_ucAdHomeRight_divAdvertisement,#ctl00_ContentPlaceHolder_PageHeading_Special_divGoogleAd2,#ctl00_ContentRightColumn_RightColumn_Ad1_BanManAd,#ctl00_ContentRightColumn_RightColumn_Ad1_googlePublisherAd,#ctl00_ContentRightColumn_RightColumn_Ad2_BanManAd,#ctl00_ContentRightColumn_RightColumn_Ad2_googlePublisherAd,#ctl00_ContentRightColumn_RightColumn_PremiumAd1_ucBanMan_BanManAd,#ctl00_Content_SquareAd_AdBox,#ctl00_Content_skyAd,#ctl00_Footer1_v5footerad,#ctl00_FooterHome1_AdFooter1_AdRotatorFooter,#ctl00_GoogleAd1,#ctl00_GoogleAd3,#ctl00_GoogleSkyscraper,#ctl00_Header1_AdHeader1_LabelHeaderScript,#ctl00_HyperLinkHouseAd,#ctl00_ImageHouseAd,#ctl00_LHTowerAd,#ctl00_LeftHandAd,#ctl00_MainContent_adDiv1,#ctl00_MainContent_adDiv2,#ctl00_MasterHolder_IBanner_adHolder,#ctl00_RightBanner_AdvertisementText,#ctl00_SiteHeader1_TopAd1_AdArea,#ctl00_TopAd,#ctl00_TowerAd,#ctl00_VBanner_adHolder,#ctl00__Content__RepeaterReplies_ctl03__AdReply,#ctl00_adCar,#ctl00_adFooter,#ctl00_advert_LargeMPU_div_AdPlaceHolder,#ctl00_advert_WideSky_Right_divOther,#ctl00_bottom_advert_728x90,#ctl00_cphMainContent_lblPartnerAds,#ctl00_cphMain_adView_dlAds_ctl01_advert_AboveAds_divOther,#ctl00_cphMain_hlAd1,#ctl00_cphMain_hlAd2,#ctl00_cphMain_hlAd3,#ctl00_cphMain_phMain_ctl00_ctl03_ctl00_topAd,#ctl00_cphRoblox_boxAdPanel,#ctl00_ctl00_MainPlaceHolder_itvAdSkyscraper,#ctl00_ctl00_RightColumn1_ctl04_csc300x250Ad1,#ctl00_ctl00_RightColumn1_ctl04_pnlAdBlock300x250Ad1,#ctl00_ctl00_RightPanePlaceHolder_pnlAdv,#ctl00_ctl00_ctl00_Main_Main_PlaceHolderGoogleTopBanner_MPTopBannerAd,#ctl00_ctl00_ctl00_Main_Main_SideBar_MPSideAd,#ctl00_ctl00_ctl00_divAdsTop,#ctl00_ctl00_ctl00_tableAdsTop,#ctl00_ctl00_ctl00_tdBannerAd,#ctl00_ctl00_pnlAdBottom,#ctl00_ctl00_pnlAdTop,#ctl00_ctl01_ctl00_tdBannerAd,#ctl00_ctl05_ctl00_tableAdsTop,#ctl00_ctl05_ctl00_tdBannerAd,#ctl00_ctl08_ctl00_tableAdsTop,#ctl00_ctl11_AdvertisementText,#ctl00_ctrlAdvert6_iframeAdvert,#ctl00_ctrlAdvert7_iframeAdvert,#ctl00_ctrlAdvert8_iframeAdvert,#ctl00_divAdSuper,#ctl00_dlTilesAds,#ctl00_fc_ctl02_AdControl,#ctl00_fc_ctl03_AdControl,#ctl00_fc_ctl04_AdControl,#ctl00_fc_ctl06_AdControl,#ctl00_headerAdd,#ctl00_m_skinTracker_m_adLBL,#ctl00_mainContent_lblSponsor,#ctl00_phContents_ctlNewsPanel_rptMainColumn_ctl02_ctlLigatusAds_pnlContainer,#ctl00_phContents_ctlNewsPanel_rptMainColumn_ctl02_pnlLigatusAds,#ctl00_phCrackerMain_ucAffiliateAdvertDisplayMiddle_pnlAffiliateAdvert,#ctl00_phCrackerMain_ucAffiliateAdvertDisplayRight_pnlAffiliateAdvert,#ctl00_pnlAdTop,#ctl00_siteHeader_bannerAd,#ctl00_skyscraperAdvertContainer,#ctl00_tc_ctl03_AdControl,#ctl00_tc_ctl04_AdControl,#ctl00_tc_ctl05_AdControl,#ctl00_tc_ctl06_AdControl,#ctl00_tc_ctl14_AdControl,#ctl00_tc_ctl15_AdControl,#ctl00_tc_ctl16_AdControl,#ctl00_tc_ctl18_AdControl,#ctl00_tc_ctl19_AdControl,#ctl00_topAd,#ctl00_ucAffiliateAdvertDisplay_pnlAffiliateAdvert,#ctl00_ucFooter_ucFooterBanner_divAdvertisement,#ctl08_ad1,#ctlDisplayAd1_lblAd,#ctl_bottom_ad,#ctl_bottom_ad1,#ctr-ad,#ctr_adtech2,#ctr_adtech_mpu_bot,#ctr_adtech_mpu_top,#ctrlsponsored,#ctx_listing_ads,#ctx_listing_ads2,#cubeAd,#cube_ad,#cube_ads,#cube_ads_inner,#cubead,#cubead-2,#cubead2,#currencies-sponsored-by,#custom-advert-leadboard-spacer,#custom-small-ad,#customAd,#cxnAdrail,#d-adCont543x90,#d-adCont728x90Inner,#d4_ad_google02,#dAdverts,#dItemBox_ads,#d_AdLink,#dap300x250,#dart-300x250,#dart_160x600,#dart_300x250,#dart_ad_block,#dart_ad_island,#dartad11,#dartad13,#dartad16,#dartad17,#dartad19,#dartad25,#dartad28,#dartad8,#dartad9,#db_ad,#dc-display-right-ad-1,#dc_ad_data_1,#dc_ad_data_2,#dc_ad_data_4,#dc_advertisement,#dcadSpot-Leader,#dcadSpot-LeaderFooter,#dclinkad,#dcol-sponsored,#dcomad_728x90_0,#dcomad_ad_728x90_1,#dcomad_top_300x250_0,#dcomad_top_300x250_1,#dcomad_top_300x251_2,#ddAd,#ddAdZone2,#defer-adright,#desktop-aside-ad-container,#desktop-unrec-ad,#detail_page_vid_topads,#devil-ad,#dfp-ad-1,#dfp-ad-2,#dfp-ad-billboard_leaderboard,#dfp-ad-billboard_leaderboard-wrapper,#dfp-ad-boombox,#dfp-ad-boombox-wrapper,#dfp-ad-boombox_2,#dfp-ad-boombox_2-wrapper,#dfp-ad-boombox_3,#dfp-ad-boombox_3-wrapper,#dfp-ad-boombox_4,#dfp-ad-boombox_4-wrapper,#dfp-ad-boombox_5,#dfp-ad-boombox_5-wrapper,#dfp-ad-clone_of_sidebar_top,#dfp-ad-content_1-wrapper,#dfp-ad-content_2-wrapper,#dfp-ad-content_3-wrapper,#dfp-ad-content_4-wrapper,#dfp-ad-dfp_ad_atf_728x90,#dfp-ad-dfp_ad_atf_728x90-wrapper,#dfp-ad-fm_300x250-wrapper,#dfp-ad-half_page-wrapper,#dfp-ad-half_page_sidebar-wrapper,#dfp-ad-home_1-wrapper,#dfp-ad-home_2-wrapper,#dfp-ad-home_3-wrapper,#dfp-ad-homepage_300x250-wrapper,#dfp-ad-homepage_728x90,#dfp-ad-homepage_728x90-wrapper,#dfp-ad-kids_300x250-wrapper,#dfp-ad-large_rectangle,#dfp-ad-large_rectangle-wrapper,#dfp-ad-leaderboard,#dfp-ad-leaderboard-wrapper,#dfp-ad-local_300x250-wrapper,#dfp-ad-medium_rectangle,#dfp-ad-mediumrect-wrapper,#dfp-ad-mediumrectangle-wrapper,#dfp-ad-mediumrectangle2-wrapper,#dfp-ad-mosad_1,#dfp-ad-mosad_1-wrapper,#dfp-ad-mpu1,#dfp-ad-mpu2,#dfp-ad-mpu_1,#dfp-ad-mpu_1-wrapper,#dfp-ad-mpu_2,#dfp-ad-mpu_2-wrapper,#dfp-ad-mpu_3,#dfp-ad-mpu_3-wrapper,#dfp-ad-ne_carousel_300x250,#dfp-ad-ne_carousel_300x250-wrapper,#dfp-ad-ne_column3a_300x250,#dfp-ad-ne_column3a_300x250-wrapper,#dfp-ad-ne_news2_468x60,#dfp-ad-ne_news2_468x60-wrapper,#dfp-ad-pencil_pushdown,#dfp-ad-pencil_pushdown-wrapper,#dfp-ad-right1,#dfp-ad-right2,#dfp-ad-right3,#dfp-ad-schedule_300x250-wrapper,#dfp-ad-slot2,#dfp-ad-slot3,#dfp-ad-slot3-wrapper,#dfp-ad-slot4-wrapper,#dfp-ad-slot5,#dfp-ad-slot5-wrapper,#dfp-ad-slot6,#dfp-ad-slot6-wrapper,#dfp-ad-slot7,#dfp-ad-slot7-wrapper,#dfp-ad-stamp_1,#dfp-ad-stamp_1-wrapper,#dfp-ad-stamp_2,#dfp-ad-stamp_2-wrapper,#dfp-ad-stamp_3,#dfp-ad-stamp_3-wrapper,#dfp-ad-stamp_4,#dfp-ad-stamp_4-wrapper,#dfp-ad-top,#dfp-ad-tower_1,#dfp-ad-tower_1-wrapper,#dfp-ad-tower_2,#dfp-ad-tower_2-wrapper,#dfp-ad-tower_half_page,#dfp-ad-tower_half_page-wrapper,#dfp-ad-tv_300x250-wrapper,#dfp-ad-wallpaper,#dfp-ad-wallpaper-wrapper,#dfp-article-mpu,#dfp-article-related-mpu,#dfp-global_top,#dfp-home_after-headline_leaderboard,#dfp-middle,#dfp-middle1,#dfp-wallpaper-wrapper,#dfpAd,#dfp_ad_1,#dfp_ad_16,#dfp_ad_2,#dfp_ad_20,#dfp_ad_21,#dfp_ad_3,#dfp_ad_7,#dfp_ad_DictHome_300x250,#dfp_ad_DictHome_728x90,#dfp_ad_Entry_160x600,#dfp_ad_Entry_180x150,#dfp_ad_Entry_300x250,#dfp_ad_Entry_Btm_300x250,#dfp_ad_Entry_EntrySetA_300x250,#dfp_ad_Entry_EntrySetA_728x90,#dfp_ad_Entry_EntrySetB_300x250,#dfp_ad_Entry_EntrySetB_728x90,#dfp_ad_Entry_EntrySetC_728x90,#dfp_ad_Home_300x250,#dfp_ad_Home_Btm_300x250,#dfp_ad_IC_728x90,#dfp_ad_InternalAdX_300x250_right,#dfp_ad_Internal_EntryBr_300x250,#dfp_ad_Internal_Home_250x262,#dfp_ad_Result_728x90,#dfp_ad_SecContent_300x250,#dfp_ad_Thesaurus_728x90,#dfp_ad_mpu,#dfp_container,#dfpad-0,#dfrads-widget-6,#dfrads-widget-7,#dhm-bar,#dict-adv,#direct-ad,#disable-ads-container,#displayAd,#displayAdSet,#display_ad,#displayad_bottom-page,#div-ad-1x1,#div-ad-1x1_3,#div-ad-2,#div-ad-bottom,#div-ad-coupon_1,#div-ad-coupon_10,#div-ad-coupon_11,#div-ad-coupon_12,#div-ad-coupon_2,#div-ad-coupon_3,#div-ad-coupon_4,#div-ad-coupon_5,#div-ad-coupon_6,#div-ad-coupon_7,#div-ad-coupon_8,#div-ad-coupon_9,#div-ad-flex,#div-ad-inread,#div-ad-leaderboard,#div-ad-r,#div-ad-r1,#div-ad-top,#div-adcenter1,#div-adcenter2,#div-adid-4000,#div-dfp-BelowContnet,#div-gpt-ad-lr-cube1,#div-gpt-ad-mrec-5,#div-gpt-ad-spotlight,#div-gpt-ad-top_banner,#div-id-for-interstitial-ad,#div-insticator-ad-1,#div-insticator-ad-2,#div-social-ads,#div-vip-ad-banner,#div-web-ad-billboard,#div-web-ad-content-article,#div-web-ad-content-ressort,#div-web-ad-marginale-1,#div-web-ad-marginale-2,#div-web-ad-marginale-3,#div-web-ad-marginale-4,#div-web-ad-marginale-5,#div-web-ad-performance,#divAdBox,#divAdHere,#divAdHorizontal,#divAdLeft,#divAdRight,#divAdSpecial,#divAdWrapper,#divAdd728x90,#divAdd_Right,#divAdd_Top,#divAds,#divAdsTop,#divAdv300x250,#divAdvertisement,#divAdvertisingSection,#divArticleInnerAd,#divBannerTopAds,#divBottomad1,#divBottomad2,#divDoubleAd,#divFoldersAd,#divFooterAd,#divFooterAds,#divLeftAd12,#divLeftRecAd,#divMenuAds,#divReklamaTop,#divRightNavAdsLoader,#divSponAds + *,#divTopAd,#divTopAds,#divWNAdHeader,#divWNAdUnitLanding,#divWrapper_Ad,#div_ad_TopRight,#div_ad_float,#div_ad_holder,#div_ad_leaderboard,#div_content_mid_lft_ads,#div_googlead,#div_header_sponsors,#div_side_big_ad,#div_video_ads,#divadfloat,#divadsensex,#divmiddlerightad,#divuppercenterad,#divupperrightad,#dlads,#dni-advertising-skyscraper-wrapper,#dni-header-ad,#dnn_AdBannerPane,#dnn_Advertisement,#dnn_adSky,#dnn_adTop,#dnn_ad_banner,#dnn_ad_island1,#dnn_ad_skyscraper,#dnn_ad_sponsored_links,#dnn_banner_120x600,#dnn_banner_486x60,#dnn_ctl00_Ad2Pane,#dnn_dnn_dartBanner,#dnn_googleAdsense_a,#dnn_playerAd,#dnn_sponsoredLinks,#docmainad,#dogear_promo,#dotnAd_300x250_c20,#double-card-ad,#doubleClickAds3,#doubleClickAds_bottom_big_box,#doubleClickAds_bottom_skyscraper,#doubleClickAds_top_banner,#doubleclick-island,#download-leaderboard-ad-bottom,#download-leaderboard-ad-top,#downloadAd,#download_ad-box,#download_ads,#download_slide_ad,#dp_ad_1,#dp_ads1,#drudge-column-ads-14,#drudge-column-ads-2,#drudge-column-ads-5,#drudge-column-ads-7,#ds-mpu,#dsStoryAd,#ds_ad_north_leaderboard,#dvAd1Data,#dvAd1main,#dvAd2Center,#dvAd5Data,#dvAd5Main,#dvAdHead,#dvCenterAd,#dvad2,#dvad2main,#dvad5,#dvad6cntnr,#dvad6main,#dvadfirst,#dvadfirstmain,#dvadscnd,#dvadsecondmain,#dvsmladlft,#dvsmladrgt,#dynamicAdDiv,#dynamicAdWinDiv,#ear_ad,#eastAds,#ebsponsoredads,#editorsmpu,#elections-ad-container,#elite-ads,#em_ad_superbanner,#embedAD,#embedADS,#embedded-ad,#embeded_ad_content_container,#entrylist_ad,#epmads-holder,#ero_fade_banner,#eshopad-728x90,#eventAd,#event_ads,#events-adv-side1,#events-adv-side2,#events-adv-side3,#events-adv-side4,#events-adv-side5,#events-adv-side6,#evotopTen_advert,#ex-ligatus,#ex_dart--ex_dart_header_ad,#exads,#exoAd,#expandableAd,#expandable_welcome_ad,#expanderadblock,#external-links-column-ad,#externalAd,#extra-search-ads,#extraAd,#extraAdsBlock,#ezadswidget-2,#ezmob_footer,#f2p-ad-cnt,#f_ad,#f_adsky,#facebook-ad,#fav-advert,#fav-advertwrap,#fb_adbox,#fb_rightadpanel,#fearless_responsive_image_ad-2,#featAds,#featureAd,#featureAdSpace,#feature_ad,#feature_adlinks,#featured-ad-left,#featured-ad-right,#featured-advertisements,#featuredAdContainer2,#featuredAdWidget,#featuredSponsors,#featured_ad_links,#featured_ad_widget_area,#featured_sponsor_cnt,#feed_links_ad_container,#feedjiti-footerTR,#ffsponsors,#file_sponsored_link,#fin_ad_728x90_bottom,#fin_advertorial_features,#fin_dc_ad_300x100_pos_1,#fin_ds_homepage_adtag_468x60,#first-300-ad,#first-adframe,#first-adlayer,#firstAdUnit,#first_ad,#first_ad_unit,#firstad,#fixedAd,#flAdData6,#fl_hdrAd,#flash_ads_1,#flashad,#flex_sponsored_links,#flexiad,#flipbookAd,#floatAD_l,#floatAD_r,#floatAdv,#floatads,#floating-ad-spacer,#floating-ads,#floating-advert,#floatingAd,#floatingAdContainer,#floatingAds,#floating_ad,#floating_ad_container,#floatyContent,#flowplayer &gt; div[style="position: absolute; width: 300px; height: 275px; left: 222.5px; top: 85px; z-index: 999;"],#flowplayer &gt; div[style="z-index: 208; position: absolute; width: 300px; height: 275px; left: 222.5px; top: 85px;"],#foot-ad-1,#foot-add,#footAds,#footad,#footer-ad,#footer-ad-728,#footer-ad-block,#footer-ad-box,#footer-ad-col,#footer-ad-google,#footer-ad-large,#footer-ad-loader,#footer-ad-shadow,#footer-ad-unit,#footer-ad-wrapper,#footer-ads,#footer-adspace,#footer-adv,#footer-advert,#footer-advert-area,#footer-advertisement,#footer-adverts,#footer-adwrapper,#footer-affl,#footer-banner-ad,#footer-leaderboard-ad,#footer-sponsored,#footerAd,#footerAdBg,#footerAdBottom,#footerAdBox,#footerAdDiv,#footerAdLink,#footerAdSpecial,#footerAdd,#footerAds,#footerAdsPlacement,#footerAdvert,#footerAdvertisement,#footerAdverts,#footerGoogleAd,#footer_AdArea,#footer_ad_01,#footer_ad_block,#footer_ad_cloud,#footer_ad_container,#footer_ad_frame,#footer_ad_holder,#footer_ad_inventory,#footer_ad_modules,#footer_adcode,#footer_add,#footer_addvertise,#footer_ads_holder,#footer_adsense_ad,#footer_adspace,#footer_adv,#footer_advertising,#footer_leaderboard_ad,#footer_text_ad,#footerad,#footerad728,#footerads,#footeradsbox,#footeradvert,#form_bottomad,#forum_top_ad,#forumlist-ad,#four_ads,#fp_rh_ad,#fpad1,#fpad2,#fpv_companionad,#fr_ad_center,#fr_adtop,#frameAd,#frameTextAd2,#frame_admain,#free_ad,#frmRightnavAd,#frnAdSky,#frnBannerAd,#frnContentAd,#front-ad-cont,#front-page-advert,#frontPageAd,#front_ad728,#front_adtop_content,#front_advert,#front_mpu,#front_mpu_content,#frontlowerad,#frontpage_ad1,#frontpage_ad2,#ft-ad,#ft-ad-1,#ft-ad-container,#ft-ads,#ft_mpu,#ftad1,#ftad2,#full_banner_ad,#fulldown_ads_box,#fulldown_ads_frame,#fullsizebanner_468x60,#fullstory-google-textad,#fusionad,#fw-advertisement,#fwAdBox,#g-adblock2,#gAds,#gBnrAd,#gBottomRightAd,#g_ad,#g_ads_left_top_banner_ads,#g_ads_right_top_banner_ads,#g_adsense,#ga_300x250,#gad300x250,#gads-pub,#gads300x250,#gads_middle,#galleries-tower-ad,#gallery-ad,#gallery-ad-container,#gallery-ad-m0,#gallery-advert,#gallery-below-line-advert,#gallery-page-ad-bigbox,#gallery-random-ad,#gallery-sidebar-advert,#gallery-slideshow-interstitial-ad,#gallery_ad,#gallery_ads,#gallery_header_ad,#galleryad1,#game-info-ad,#gameAdMiddle,#gameAdTopMiddle,#gameSquareAd,#game_header_ad,#game_profile_ad_300_250,#gamead,#gameads,#gamepage_ad,#gameplay_ad,#games-mpu-container,#games_ad_container,#gasense,#gbl_topmost_ad,#gcommonad,#genad,#geoAd,#getUnderplayerIDAd,#gf-mrecs-ads,#gft-adChoicesCopy {display: none !important; color: #72da9a !important; background-color: #a0abfd !important;}#ggl-ad,#gglads,#gglads213A,#gglads213B,#ggogle_AD,#gl_ad_300,#glamads,#glinkswrapper,#global-banner-ad,#globalHeader_divAd,#globalLeftNavAd,#globalTopNavAd,#global_header_ad,#global_header_ad_area,#gm-ad-lrec,#gmi-ResourcePageAd,#gmi-ResourcePageLowerAd,#gnadww,#go-ads-double-2,#go-ads-double-3,#goad1,#goads,#gog_ad,#gooadtop,#google-ad,#google-ad-art,#google-ad-table-right,#google-ad-tower,#google-ads,#google-ads-bottom,#google-ads-bottom-container,#google-ads-container,#google-ads-container1,#google-ads-header,#google-ads-left-side,#google-adsense,#google-adsense-for-content,#google-adsense-mpusize,#google-adv-728x90,#google-adwords,#google-afc,#google-post-ad,#google-post-adbottom,#google-top-ads,#google336x280,#google468x60,#googleAd,#googleAdArea,#googleAdBottom,#googleAdBox,#googleAdMid,#googleAdSenseAdRR,#googleAdTop,#googleAdView,#googleAdYarrp,#googleAd_words,#googleAds,#googleAdsFrame,#googleAdsSml,#googleAdsense,#googleAdsenseAdverts,#googleAdsenseBanner,#googleAdsenseBannerBlog,#googleAdwordsModule,#googleAfcContainer,#googleSearchAds,#googleShoppingAdsRight,#googleShoppingAdsTop,#googleSubAds,#googleTxtAD,#google_ad,#google_ad_468x60_contnr,#google_ad_EIRU_newsblock,#google_ad_below_stry,#google_ad_container,#google_ad_container_right_side_bar,#google_ad_inline,#google_ad_test,#google_ad_top,#google_ads,#google_ads_1,#google_ads_aCol,#google_ads_box,#google_ads_div_Blog_300,#google_ads_div_Front-160x600,#google_ads_div_Raw_Override,#google_ads_div_Second_160,#google_ads_div_header1,#google_ads_div_header2,#google_ads_div_video_wallpaper_ad_container,#google_ads_frame,#google_ads_frame1_anchor,#google_ads_frame2_anchor,#google_ads_frame3_anchor,#google_ads_frame4_anchor,#google_ads_frame5_anchor,#google_ads_frame6_anchor,#google_ads_frame_quad,#google_ads_frame_vert,#google_ads_test,#google_ads_top,#google_ads_wide,#google_adsense,#google_adsense_ad,#google_adsense_home_468x60_1,#google_textlinks,#googlead-leaderboard,#googlead-left,#googlead-post-mpu,#googlead-sidebar-middle,#googlead-sidebar-top,#googlead01,#googlead1,#googlead2,#googlead_outside,#googleadbig,#googleadds,#googleadleft,#googleads,#googleads1,#googleads_h_injection,#googleads_mpu_injection,#googleadsense,#googleadsense300x250,#googleadsrc,#googleadstop,#googlebanner,#googleblock300,#googlesponsor,#googletextads,#googtxtad,#gpt-ad-1,#gpt-ad-halfpage,#gpt-ad-rectangle1,#gpt-ad-rectangle2,#gpt-ad-skyscraper,#gpt-ad-story_rectangle3,#gpt-mpu,#gpt2_ads_widget-10,#gpt2_ads_widget-6,#gpt2_ads_widget-7,#gpt2_ads_widget-8,#gpt2_ads_widget-9,#gpt_ad_panorama_top,#gpt_ad_small_insider_1,#gpt_unit_videoAdSlot1_0,#gridAdSidebarRight,#grid_ad,#grouponAdContainer,#gsyadrectangleload,#gsyadrightload,#gsyadtop,#gsyadtopload,#gtAD,#gtopadvts,#gtv_tabSponsor,#gwd-ad,#gwt-debug-ad,#h-ads,#hAd,#hAdv,#h_ads0,#h_ads1,#half-page-ad,#halfPageAd,#halfe-page-ad-box,#hb-header-ad,#hcf-ad-wrapper,#hd-ads,#hd-banner-ad,#hd_ad,#hd_ad_wp,#hdr-ad,#hdr-banner-ad,#hdrAdBanner,#hdrAds,#hdtv_ad_ss,#head-ad-1,#head-ads,#head-advertisement,#head-banner468,#head1ad,#headAd,#headAds,#headAdv,#headGoogleAffiliateLinkblock,#head_ad,#head_ad0,#head_ad_area,#head_ads,#head_advert,#headad,#headadvert,#header + #content &gt; #left &gt; #rlblock_left,#header-ad,#header-ad-1,#header-ad-background,#header-ad-block,#header-ad-bottom,#header-ad-container,#header-ad-holder,#header-ad-label,#header-ad-left,#header-ad-placeholder,#header-ad-rectangle-container,#header-ad-right,#header-ad-wrap,#header-ad-wrapper,#header-ad2,#header-ad2010,#header-ads-wrapper,#header-adsense,#header-adspace,#header-adv,#header-advert,#header-advert-panel,#header-advertisement,#header-advertising,#header-adverts,#header-advrt,#header-banner-728-90,#header-banner-ad,#header-banner-spc,#header-block-ads,#header-google,#header-house-ad,#header-lb-ad,#header-leader-ad,#header-leader-ad-2,#header-menu-horizontal-ad-superbanner,#header-top-ads-text,#headerAdBackground,#headerAdButton,#headerAdSpace,#headerAdUnit,#headerAdWrap,#headerAds,#headerAds4,#headerAdsWrapper,#headerAdv,#headerAdvert,#headerBannerAdNew,#headerNewAdsContainer,#headerNewAdsContainerB,#headerTopAd,#headerTopAdWide,#header_1_adv,#header_ad_167,#header_ad_728,#header_ad_728_90,#header_ad_banner,#header_ad_block,#header_ad_container,#header_ad_leaderboard,#header_ad_units,#header_ad_widget,#header_ad_wrap,#header_adbox,#header_adcode,#header_ads,#header_ads2,#header_ads_2,#header_ads_p,#header_adsense,#header_adv,#header_advert,#header_advertisement,#header_advertisement_top,#header_advertising,#header_adverts,#header_bottom_ad,#header_flag_ad,#header_leaderboard_ad_container,#header_publicidad,#header_right_ad,#header_sponsors,#header_top_ad,#headerad,#headeradbox,#headeradcontainer,#headerads,#headeradsbox,#headeradsense,#headeradspace,#headeradvert1div,#headeradvertholder,#headeradwrap,#headergooglead,#headerprimaryad,#headersponsors,#headingAd,#headline-sponsor,#headline_ad,#headlinesAdBlock,#hi5-ad-1,#hidadvnet,#hiddenadAC,#hide_ad_section_v2,#hideads,#hideads1,#hl-sponsored-links,#hl-sponsored-results,#hl-top-ad,#hldhdAds,#hly_ad_side_bar_tower_left,#hly_inner_page_google_ad,#hmt-widget-ad-unit-3,#holder-storyad,#holdunderad,#home-ad,#home-ad-block,#home-ad-slot,#home-adv-300x250,#home-advert-module,#home-advertise,#home-banner-ad,#home-left-ad,#home-page-listing-ad,#home-rectangle-ad,#home-right-col-ad,#home-side-ad,#home-top-ads,#homeAd,#homeAdLeft,#homeAds,#homeArticlesAd,#homeBottomAdWrapperInner,#homeMPU,#homePageBotAd,#homeSideAd,#homeTopRightAd,#home_ad,#home_ad_sub_spotlight,#home_ads_top_hold,#home_ads_vert,#home_bottom_ad,#home_contentad,#home_feature_ad,#home_lower_center_right_ad,#home_mpu,#home_sec2_adverts,#home_sidebar_ad,#home_spensoredlinks,#home_top_right_ad,#homegoogletextad,#homeheaderad,#homepage-ad,#homepage-adbar,#homepage-footer-ad,#homepage-header-ad,#homepage-right-rail-ad,#homepage-sidebar-ad,#homepage-sidebar-ads,#homepageAd,#homepageAdsTop,#homepageFooterAd,#homepageGoogleAds,#homepage__desktop-lead-ad-wrap,#homepage__lead-ad-slot,#homepage_ad,#homepage_ad_listing,#homepage_middle_ads,#homepage_middle_ads_2,#homepage_middle_ads_3,#homepage_rectangle_ad,#homepage_right_ad,#homepage_right_ad_container,#homepage_top_ad,#homepage_top_ads,#homepagead_300x250,#homepageadvert,#homestream-advert3,#hometop_234x60ad,#hometopads,#horAd,#hor_ad,#horadslot,#horizad,#horizads728,#horizontal-ad,#horizontal-adspace,#horizontal-banner-ad,#horizontal-banner-ad-container,#horizontalAd,#horizontalAdvertisement,#horizontal_ad,#horizontal_ad2,#horizontal_ad_top,#horizontalad,#horizontalads,#hot-deals-ad,#hottopics-advert,#hours_ad,#houseAd,#hovered_sponsored,#hp-header-ad,#hp-mpu,#hp-right-ad,#hp-store-ad,#hpSponsor,#hpV2_300x250Ad,#hpV2_googAds,#hp_ad300x250,#hp_right_ad_300,#i9lsdads,#i_ads_table,#iaa_ad,#ibt_local_ad728,#icePage_SearchLinks_AdRightDiv,#icePage_SearchLinks_DownloadToolbarAdRightDiv,#icePage_SearchResults_ads0_SponsoredLink,#icePage_SearchResults_ads1_SponsoredLink,#icePage_SearchResults_ads2_SponsoredLink,#icePage_SearchResults_ads3_SponsoredLink,#icePage_SearchResults_ads4_SponsoredLink,#icom-ad-top,#idDivAd,#idMapAdvertising,#idRightAdArea,#idSponsoredresultend,#idSponsoredresultstart,#id_SearchAds,#ifmSocAd,#iframe-ad,#iframe-ad-container-Top3,#iframeAd_2,#iframeRightAd,#iframeTopAd,#iframe_ad_2,#iframe_ad_300,#iframe_ad_728,#iframe_container300x250,#iframead-300x250,#ignad_medrec,#ii_banner_ads,#imPopup,#im_box,#im_papupFixed,#im_popupDiv,#im_popupFixed,#ima_ads-2,#ima_ads-3,#ima_ads-4,#imageGalleryAd,#imageGalleryAdHeadLine,#imageGalleryAdPlaceholder,#image_selector_ad,#imageadsbox,#imgCollContentAdIFrame,#imgad1,#imu_ad_module,#in-article-ad,#in-content-ad,#in-story-ad-wrapper,#inVideoAd,#in_ad_col_a,#in_post_ad_middle_1,#in_serp_ad,#inadspace,#inarticlead,#inc-ads-bigbox,#index-ad,#index-bottom-advert,#indexSquareAd,#index_ad,#indexad,#indexad300x250l,#indexsmallads,#indiv_adsense,#influads_block,#infoBottomAd,#inhousead,#initializeAd,#injectableTopAd,#inline-ad,#inline-advert,#inline-story-ad,#inline-story-ad2,#inlineAd,#inlineAdCont,#inlineAdtop,#inlineAdvertisement,#inlineBottomAd,#inline_ad,#inline_ad_section,#inline_search_ad,#inlinead,#inlineads,#inlinegoogleads,#inlist-ad-block,#inner-ad,#inner-advert-row,#inner-deals-ads,#inner-top-ads,#innerad,#innerpage-ad,#innovativeadspan,#inside-page-ad,#insideCubeAd,#insidearticleBodyAd,#insider_ad_wrapper,#insticator-container,#instoryad,#instoryadtext,#instoryadwrap,#insurance-ad-1-container,#int-ad,#intAdUnit,#int_ad,#interads,#internalAdvert,#internalads,#interstitialAd,#interstitialAdContainer,#interstitialAdUnit,#interstitial_ad,#interstitial_ad_container,#interstitial_ad_wrapper,#interstitial_ads,#interviews-ad,#introAds,#invid_ad,#ip-ad-leaderboard,#ip-ad-skyscraper,#ipadv,#iq-AdSkin,#iqadcontainer,#iqadoverlay,#iqadtile1,#iqadtile11,#iqadtile14,#iqadtile15,#iqadtile2,#iqadtile3,#iqadtile4,#iqadtile5,#iqadtile8,#iqadtile9,#iqd_align_Ad,#iqd_mainAd,#iqd_rightAd,#iqd_topAd,#ir-sidebar-ad,#irgoogleadsense,#islandAd,#islandAdPan,#islandAdPane,#islandAdPane2,#islandAdPaneGoogle,#islandAdSponsored,#island_ad_top,#islandad,#isliveContainer,#issue-sidebar-ad,#item-detail-feature-ad,#itemGroupAd2,#iv160ad,#iv728ad,#iwad,#j_ad,#j_special_ad,#ji_medShowAdBox,#jmp-ad-buttons,#job_ads_container,#jobs-ad,#jobsAdBox,#joead,#joead2,#js-ad-leaderboard,#js-adslot-300x250-storyrec,#js-image-ad-mpu,#js-outbrain-ads-module,#js-outbrain-rightrail-ads-module,#js-site-nav-ad-wrap,#js-story__ad-storyrec,#js-wide-ad,#js_adsense,#jt-advert,#jupiter-ads,#ka_adFullBanner,#ka_adMediumRectangle,#ka_adsense_container,#ka_samplead,#kads-main,#kamidarticle-adnotice,#kamidarticle-middle-content,#karmaAds,#kaufDA-widget,#kb-ad-banner,#kbbAdsMainCenterAd,#kdz_ad1,#kdz_ad2,#keen_overlay_ad_display,#keyadvertcontainer,#khAdSpace,#ksperAD,#l_home-keen_ad_mask,#landing-adserve,#landing-adserver,#lapho-top-ad-1,#large-ads,#large-rectange-ad,#large-rectange-ad-2,#large-screen-ads,#large-skyscraper-ad,#largeAd,#largeAds,#large_rec_ad1,#largead,#lateAd,#lateralAdWrapper,#launchpad-ads-2,#layerAds_layerDiv,#layerTLDADSERV,#layer_ad,#layer_ad_content,#layer_ad_main,#layer_adv1,#layerad,#layeradsense,#layout-header-ad-wrapper,#lb-ad,#lb-sponsor-left,#lb-sponsor-right,#lbAdBar,#lbAdBarBtm,#lblAds,#lead-ads,#lead_ad,#leadad_1,#leadad_2,#leader-ad,#leader-board-ad,#leaderAdContainer,#leaderAdContainerOuter,#leader_ad,#leader_board_ad,#leaderad,#leaderad_section,#leaderadvert,#leaderboard-ad-1,#leaderboard-ad-1-container,#leaderboard-ad-1_iframe,#leaderboard-ad-2,#leaderboard-ad-2_iframe,#leaderboard-ad-3,#leaderboard-ad-3_iframe,#leaderboard-ad-4,#leaderboard-ad-4_iframe,#leaderboard-ad-5,#leaderboard-ad-5_iframe,#leaderboard-ad-bottom,#leaderboard-ad-bottom-container,#leaderboard-ad-container,#leaderboard-ad-container-1,#leaderboard-bottom-ad,#leaderboardAd,#leaderboardAdArea,#leaderboardAdArea2,#leaderboardAdLabel,#leaderboardAdSibling,#leaderboardAdTop,#leaderboardAds,#leaderboardAdvert,#leaderboardAdvertFooter,#leaderboardBottomAd,#leaderboard_728x90,#leaderboard_Ad,#leaderboard_ad,#leaderboard_ad_gam,#leaderboard_ad_main,#leaderboard_ad_unit,#leaderboard_ads,#leaderboard_bottom_ad,#leaderboard_top_ad,#leaderboardadtagwidget-2,#learad,#leatherboardad,#left-ad-1,#left-ad-2,#left-ad-col,#left-ad-skin,#left-bottom-ad,#left-col-ads-1,#left-lower-adverts,#left-lower-adverts-container,#left-rail-ad,#leftAD,#leftAdAboveSideBar,#leftAdCol,#leftAdContainer,#leftAdMessage,#leftAdSpace,#leftAd_fmt,#leftAd_rdr,#leftAds,#leftAdsSmall,#leftAdvert,#leftBanner-ad,#leftColumnAdContainer,#leftGoogleAds,#leftSectionAd300-100,#leftTopAdWrapper,#left_ad,#left_adsense,#left_adspace,#left_adv,#left_advertisement,#left_bg_ad,#left_block_ads,#left_float_ad,#left_global_adspace,#left_side_ads,#left_sidebar_ads,#left_skyscraper_ad,#left_ws_ad_container,#leftadg,#leftcolAd,#leftcolumnad,#leftforumad,#leftframeAD,#lg-banner-ad,#lgfRightBarAd,#lhsBottomAd,#li-right-geobooster-oas,#ligatus,#ligatusdiv,#lightboxAd,#lilo_imageAd,#linebreak-ads,#linkAdSingle,#linkAds,#link_ads,#linkads,#links-ads-detailnews,#listadholder,#liste_top_ads_wrapper,#listing-ad,#live-ad,#lj_ad_row,#load-adslargerect,#localAds,#logoAd2,#long-ad,#long-ad-box,#long-ad-space,#long-bottom-ad-wrapper,#longAdSpace,#longAdWrap,#long_advert_header,#long_advertisement,#lower-ad-banner,#lower-advertising,#lowerAdvertisement,#lowerAdvertisementImg,#lower_ad,#lowerads,#lowerthirdad,#lowertop-adverts,#lowertop-adverts-container,#lpAdPanel,#lrec_ad,#lrecad,#lsadvert-left_menu_1,#lsadvert-left_menu_2,#lsadvert-top,#mBannerAd,#m_top_adblock,#madison_ad_248_100,#madskills-ad-manager-0,#madskills-ad-manager-1,#madskills-ad-manager-2,#madskills-ad-manager-3,#magnify_player_continuous_ad,#magnify_widget_playlist_item_companion,#main-ad,#main-ad160x600,#main-ad160x600-img,#main-ad728x90,#main-advert,#main-advert1,#main-advert2,#main-advert3,#main-bottom-ad,#main-bottom-ad-tray,#main-content &gt; [style="padding:10px 0 0 0 !important;"],#main-content-ad1,#main-content-adcontent1,#main-header-ad-wrap,#main-header-ad-wrap-home,#main-header-advertisement,#main-middle-ad,#main-right-ad-tray,#main-tj-ad,#mainAd1,#mainAdUnit,#mainAdvert,#mainAdvertismentP,#mainHeaderAdvertisment,#mainMenu_divTopAd,#mainPageAds,#mainPlaceHolder_coreContentPlaceHolder_rightColumnAdvert_divControl,#main_AD,#main_ads,#main_col &gt; #center_col div[style="font-size:14px;margin:0 4px;padding:1px 5px;background:#fff7ed"],#main_content_ad,#main_left_side_ads,#main_rec_ad,#main_right_side_ads,#main_right_side_ads_130_01,#main_top_ad,#main_top_ad_container,#major_ad,#maker-rect-ad,#mapAdvert,#marcoad,#marketgid,#marketing-promo,#marketplace-ad-1,#marketplace-ad-2,#marketplaceAds,#marquee_ad,#masSearchAd,#mason_adv_bp_1,#mason_adv_bp_2,#mason_adv_bp_3,#mason_adv_bp_4,#mason_adv_rn_2,#mastAd,#mastAdvert,#mast_ad_wrap,#mast_ad_wrap_btm,#mast_logo_advertisement,#mastad,#masterTopAds,#masterad,#mastercardAd,#masthead-ad,#masthead_ad,#masthead_ads_container,#masthead_topad,#matchFooterAd,#mbEnd[cellspacing="0"][cellpadding="0"],#mbbs-ad-in-content-shortcode,#mc_ad,#mclip_container:last-child,#md-sidebar-video-companion-ad-loaded,#md_adLoader,#md_topad,#me-adspace-002,#med-rect-ad,#med-rectangle-ad,#medRecAd,#medReqAd,#media-ad,#media-ad-thumbs,#media-temple-ad,#mediaAdLeaderboard,#media_ad,#mediaget_box,#mediagoogleadsense,#mediaplayer_adburner,#medium-ad,#medium-rectangle-ad1,#mediumAd1,#mediumAdContainer,#mediumAdvertisement,#mediumRectangleAd,#mediumrectangle_300x250,#medrec_bottom_ad,#medrec_middle_ad,#medrec_top_ad,#medrectad,#medrectangle_banner,#mee-ad-wrapper,#memberad,#mens-journal-feature-ad,#menu-ads,#menuAds,#menuad,#menubanner-ad-content,#mgid-container,#mhheader_ad,#mi_story_assets_ad,#microAdDiv,#microsoft_ad,#mid-ad300x250,#mid-table-ad,#midAD,#midRightAds,#midRightTextAds,#mid_ad_div,#mid_ad_title,#mid_left_ads,#mid_mpu,#mid_roll_ad_holder,#midadd,#midadspace,#midadvert,#midbarad,#midbnrad,#midcolumn_ad,#middle-ad,#middle-ad-destin,#middle-story-ad-container,#middleRightColumnAdvert,#middle_ad,#middle_ads,#middle_bannerad,#middle_bannerad_section,#middle_body_advertising,#middle_mpu,#middle_sponsor_ads,#middlead,#middleads,#middleads2,#midpost_ad,#midrect_ad,#midstrip_ad,#mini-ad,#mini-panel-dart_stamp_ads,#mini-panel-dfp_stamp_ads,#mini-panel-top_ads,#mini-panel-two_column_ads,#miniAdsAd,#mini_ads_inset,#mn #center_col &gt; div &gt; h2.spon:first-child,#mn #center_col &gt; div &gt; h2.spon:first-child + ol:last-child,#mn div[style="position:relative"] &gt; #center_col &gt; ._Ak,#mn div[style="position:relative"] &gt; #center_col &gt; div &gt; ._dPg,#mn_ads,#moa-ads-long,#mobile-swipe-banner,#mobileAd_holder,#mobile_ad_spot_header,#mochila-column-right-ad-300x250,#mochila-column-right-ad-300x250-1,#mod-ad-msu-2,#mod-partner-center,#mod_ad,#mod_ad_top,#modal-ad,#modal_videoAd_wrapper,#module-ad-300x250,#module-ad-728x90,#module-google_ads,#module_ad,#module_box_ad,#module_sky_scraper,#monsterAd,#moogleAd,#more_ad,#moreads,#morefooterads,#mos-adCarouselContainer,#mosBannerAd,#mosTileAds,#most_popular_ad,#motionAd,#movads10,#movieads,#mozo-ad,#mph-rightad,#mpl_adv_text,#mpr-ad-leader,#mpr-ad-wrapper-1,#mpr-ad-wrapper-2,#mpu-ad,#mpu-advert,#mpu-cont,#mpu-content,#mpu-sidebar,#mpu300250,#mpuAd,#mpuAdvert,#mpuAdvertMob,#mpuContainer,#mpuDiv,#mpuInContent,#mpuSecondary,#mpuSlot,#mpuWrapper,#mpuWrapper600,#mpuWrapperAd,#mpuWrapperAd2,#mpu_300x250,#mpu_ad,#mpu_ad2,#mpu_adv,#mpu_banner,#mpu_box,#mpu_div,#mpu_firstpost,#mpu_holder,#mpu_text_ad,#mpuad,#mpubox,#mpuholder,#mpuholder01,#mpusLeftAd {display: none !important; color: #72da9a !important; background-color: #a0abfd !important;}#mr_banner_topad,#mrec-advertisement,#mrecAdContainer,#mrecPlacement,#mrt-node-Col2-1-AdBlockPromo,#mrt-node-Lead-2-AdBlockPromo,#mrt-node-tgtm-Col2-4-ComboAd,#msAds,#ms_ad,#msnAds_inner,#msn_header_ad,#msnau_ad_medium_rectangle,#mtSponsor,#mt_adv,#mts_ad_widget,#mu_2_ad,#multiLinkAdContainer,#multi_ad,#multibar-ads,#mvp_160_ad,#my-ads,#my-adsFPL,#my-adsFPT,#my-adsLREC,#my-adsLREC2,#my-adsLREC4-base,#my-adsMAST,#my-medium-rectangle-ad-1-container,#my-medium-rectangle-ad-2-container,#myElementAd,#myads_HeaderButton,#mydfpad,#n_sponsor_ads,#na_adblock,#name-advert,#namecom_ad_hosting_main,#narrow-ad,#narrow_ad_unit,#nat-ad-300x250,#natadad300x250,#nationalAd_secondary_btm,#nationalAd_secondary_top,#national_ad,#national_microlink_ads,#nationalad,#native_ad2,#nativeadsteaser,#navAdBanner,#nav_ad,#nav_ad_728_mid,#navads-container,#navbar_ads,#navi_banner_ad_780,#navigation-ad,#nba160PromoAd,#nba300Ad,#nbaGI300ad,#nbaHeaderAds,#nbaHouseAnd600Ad,#nbaLeft600Ad,#nbaMidAds,#nbaVid300Ad,#nbabot728ad,#nbcAd300x250,#nbcShowcaseAds,#nc-header-ads,#netBoard-ad,#network_header_ad_1,#new-ad-footer,#new-ad-leaderboard,#new-ad-sidebottom,#new-ad-sidetop,#newAd,#newPostProfileAd,#newPostProfileVerticalAd,#newTopAds,#new_ad_728_90,#new_ad_header,#new_topad,#newadmpu,#newads,#news-adocs,#news_advertorial_content,#news_advertorial_top,#news_article_ad_mrec,#news_article_ad_mrec_right,#news_left_ad,#news_right_ad,#newstream_first_ad,#newuser_ad,#ng_rtcol_ad,#nia_ad,#nib-ad,#nlrightsponsorad,#noresults_ad_container,#noresultsads,#northad,#northbanner-advert,#northbanner-advert-container,#notify_ad,#np_content_ads_module,#nrAds,#nrcAd_Top,#ns_ad1,#ns_ad2,#ns_ad3,#ntvAdZone,#ntvads,#nuevo_ad,#oanda_ads,#oas_Middle,#oas_Middle1,#oas_Right,#oas_Right1,#oas_Right2,#oas_Top,#oas_Top1,#oas_asponsor,#oas_wide_skyscraper,#ob_sponsoredcontent,#oba_message,#objadscript,#oem_ad,#ofie_ad,#omnibar_ad,#onPauseAdOverlayDesktop,#onespot-ads,#online_ad,#onpageads,#onpageadstext,#onscroll-ad-holder-mpu2,#openx-slc,#openx-text-ad,#openx-widget,#openx_iframe,#osDirAd2Post,#osads_300,#outbrain-paid,#outbrainAdWrapper,#outbrain_dual_ad_fs_0_dual,#outbrain_vertical,#outerAd300,#outerTwrAd,#outer_div_top_ad,#outsideAds,#ovAd,#ovAdWrap,#ovadsense,#overlay_ad,#overlayadd,#overtureSponsoredLinks,#p-advert,#p-googlead,#p-googleadsense,#p-googleadsense-portletlabel,#p2HeaderAd,#p2squaread,#p360_ad_unit,#p_lt_zoneContent_SubContent_p_lt_zoneRight_IFrameAd_panelAd,#page-ad-container-TopLeft,#page-ad-top,#page-advert-3rdrail,#page-advertising,#page-header-ad,#page-top-ad,#pageAdDiv,#pageAdds,#pageAds,#pageAdsDiv,#pageAdvert,#pageBannerAd,#pageLeftAd,#pageOwnershipAd_side,#pageRightAd,#page_ad,#page_ad_top,#page_content_top_ad,#page_top_ad,#pageads_top,#pagebottomAd,#pagelet_adbox,#pagelet_netego_ads,#pagelet_search_ads2,#pagelet_side_ads,#pagination-advert,#paidlistingAds,#panel-ad,#panelAd,#panoAdBlock,#parade_300ad,#parade_300ad2,#partner-ad,#partnerAd,#partnerMedRec,#partnerSitesBannerAd,#partner_ads,#pause-ad,#pauseAd,#pb_adbanner,#pb_report_ad,#pc-billboard-ad,#pcworldAdBottom,#pcworldAdTop,#pencil-ad,#pencil-ad-container,#perm_ad,#permads,#persistentAd,#personalization_ads,#pf-dialog-ads,#pg-ad-160x600,#pg-ad-item-160x600,#pgAdWrapper,#pgFooterAd,#pgHeaderAd,#pgSquareAd,#pgad_Bottom3,#photoAdvert,#photoAndAdBox,#photo_ad_google,#picad_div,#pinball_ad,#pixAd,#plAds,#player-advert,#player-advertising,#player-banner,#player-below-advert,#player-midrollAd,#playerAd,#playerAdsRight,#player_ad,#player_middle_ad,#player_top_ad,#playerad,#playvideotopad,#pmad-in1,#pnAd2,#pnlADS,#pnlRedesignAdvert,#pnl_BannerAdServed,#pod-ad-video-page,#pof_ads_Wrapper,#pop_ad,#popadwrap,#popback-ad,#popoverAd,#popular-column-ad,#populate_ad_bottom,#populate_ad_left,#populate_ad_textupper,#populate_ad_textupper_textlink,#popupAd,#popupBottomAd,#popup_domination_lightbox_wrapper,#popupadunit,#portlet-advertisement-left,#portlet-advertisement-right,#pos_ContentAd2,#post-ad,#post-ad-01,#post-ad-02,#post-ad-hd,#post-ad-layer,#post-ads,#post-adsense-top-banner,#post-bottom-ads,#post-content-ad,#post-page-ad,#post-promo-ad,#post5_adbox,#postAd,#postNavigationAd,#post_ad,#post_addsense,#post_adsense,#post_adspace,#post_advert,#post_id_ad_bot,#postpageaddiv,#ppcAdverts,#pr_ad,#pr_advertising,#pre-adv,#pre-footer-ad,#pregame_header_ad,#premSpons,#premier-ad-space,#preminumAD,#premiumAdTop,#premium_ad,#premium_ad_inside,#premiumad,#premiumads,#premiumsponsorbox,#preroll_compainion_ad,#priceGrabberAd,#primary_mpu_placeholder,#prime-ad-space,#print-advertisement,#print-header-ad,#print_ads,#printads,#privateadbox,#privateads,#pro_ads_custom_widgets-2,#pro_ads_custom_widgets-3,#pro_ads_custom_widgets-5,#pro_ads_custom_widgets-7,#pro_ads_custom_widgets-8,#product-adsense,#profileAdHeader,#proj-bottom-ad,#promoAds,#promoFloatAd,#promo_ads,#ps-ad-iframe,#ps-top-ads-sponsored,#ps-vertical-ads,#psmpopup,#pswp_advert,#pub-right-bottom-ads,#pub-right-top-ads,#pub468x60,#publicGoogleAd,#publicidad-video,#publicidad_120,#publicidadeLREC,#pulse360_1,#pushAd,#pushDownAd,#pushdown-ad,#pushdownAdWrapper,#pushdown_ad,#pusher-ad,#pvadscontainer,#qaSideAd,#qadserve_728x90_StayOn_div,#qm-ad-big-box,#qm-ad-sky,#qm-dvdad,#qpon_big_ad-teaser,#qtopAd-graybg,#quads-ad2,#quads-ad2_widget,#quads-ad4,#quick_ads_frame_bottom,#quidgetad,#quigo,#quigo-ad,#quigo_ad,#quinAdLeaderboard,#r-ad-tag,#r-ads-listings,#r-ads-preview-top,#r1SoftAd,#r_ad3_ad,#r_adver,#radioProfileAds,#rafael_side_ads_widget-5,#rail-ad-wrap,#rail-bottom-ad,#railAd,#rail_ad,#rail_ad1,#rail_ad2,#rbAdWrapperRt,#rbAdWrapperTop,#rc-row-container,#rc_edu_span5AdDiv,#rd_banner_ad,#reader-ad-container,#realEstateAds,#rearad,#recommendedAdContainer,#rect-ad,#rectAd,#rect_ad,#rectad,#rectangle-ad,#rectangleAd,#rectangleAdSpace,#rectangleAdTeaser1,#rectangle_ad,#rectangle_ad_smallgame,#redirect-ad,#redirect-ad-modal,#redirect_ad_1_div,#redirect_ad_2_div,#reference-ad,#refine-300-ad,#refine-ad,#refreshable_ad5,#region-node-advert,#region-regions-ad-top,#region-top-ad,#reklam-728x90,#reklama_big,#reklama_left_body,#reklama_left_up,#reklama_right_up,#related-ads,#related-projects-sponsor,#related_ad,#related_ads,#related_ads_box,#relatedvideosads2,#relocation_ad_container,#remove_ads_button1,#remove_ads_button2,#removeadlink,#responsive-ad,#resultSponLinks,#resultsAdsBottom,#resultsAdsSB,#resultsAdsTop,#resultspanel &gt; #topads,#rg_right_ad,#rh-ad-container,#rh_tower_ad,#rhapsodyAd,#rhc_ads,#rhsBottomAd,#rhs_ads,#rhs_adverts,#rhs_block .mod &gt; .gws-local-hotels__booking-module,#rhs_block .mod &gt; .luhb-div &gt; div[data-async-type="updateHotelBookingModule"],#rhs_block .xpdopen &gt; ._OKe &gt; div &gt; .mod &gt; ._yYf,#rhs_block &gt; #mbEnd,#rhs_block &gt; .ts[cellspacing="0"][cellpadding="0"][style="padding:0"],#rhs_block &gt; ol &gt; .rhsvw &gt; .kp-blk &gt; .xpdopen &gt; ._OKe &gt; ol &gt; ._DJe &gt; .luhb-div,#rhs_block &gt; script + .c._oc._Ve.rhsvw,#rhs_whistleout_widget,#rhsads,#rhsadvert,#rhswrapper &gt; #rhssection[border="0"][bgcolor="#ffffff"],#richad,#right-ad,#right-ad-1,#right-ad-block,#right-ad-col,#right-ad-skin,#right-ad-title,#right-ad1,#right-adds,#right-ads,#right-ads-3,#right-ads-4,#right-advert,#right-bar-ad,#right-box-ad,#right-col-ad-600,#right-featured-ad,#right-mpu-1-ad-container,#right-uppder-adverts,#right-uppder-adverts-container,#right1-ad,#right160x600ads_part,#right2Ad_Iframe,#rightAD,#rightAd,#rightAd1,#rightAd160x600,#rightAd160x600two,#rightAd300x250,#rightAd300x250Lower,#rightAdBar,#rightAdColumn,#rightAdContainer,#rightAdDiv1,#rightAdDiv2,#rightAdDiv3,#rightAdHideLinkContainer,#rightAdHolder,#rightAd_Iframe,#rightAd_rdr,#rightAds,#rightAdsDiv,#rightBanner-ad,#rightBlockAd,#rightBottomAd,#rightBoxAdvertisement,#rightBoxAdvertisementLast,#rightColAd,#rightColumnAds,#rightColumnMpuAd,#rightColumnSkyAd,#rightDoubleClick,#rightMortgageAd,#rightSideAd,#rightSideAdvert,#rightSideSquareAdverts,#right_Ads2,#right_ad,#right_ad_2,#right_ad_box,#right_ad_container,#right_ad_top,#right_ad_wrapper,#right_ads_box,#right_adv1-v2,#right_advert,#right_advertisement,#right_advertising,#right_adverts,#right_bg_ad,#right_block_ads,#right_column_ad,#right_column_ad_container,#right_column_ads,#right_column_adverts,#right_column_internal_ad_container,#right_column_top_ad_unit,#right_gallery_ad,#right_global_adspace,#right_mini_ad,#right_panel_ads,#right_player_ad,#right_rail-zergnet,#right_rail_ad_header,#right_side_bar_ami_ad,#right_sidebar_ads,#right_top_ad,#right_top_gad,#rightad,#rightad1,#rightad2,#rightadBorder,#rightadBorder1,#rightadBorder2,#rightadContainer,#rightadcell,#rightadd300,#rightadg,#rightadhome,#rightadpat,#rightads,#rightadsarea,#rightadvertbar-doubleclickads,#rightbar-ad,#rightbar_ad,#rightcol_mgid,#rightcol_sponsorad,#rightcolhouseads,#rightcollongad,#rightcolumn_300x250ad,#rightcolumn_ad_gam,#rightforumad,#rightgoogleads,#rightinfoad,#rightrail-ad,#rightrail-ad-1,#rightrail_ad-0,#rightside-ads,#rightside_ad,#rightskyad,#righttop-adverts,#righttop-adverts-container,#ringtone-ad-bottom,#ringtone-ad-top,#rm_ad_text,#rmx-ad-cta-box,#roadsheet-advertising,#rockmelt-ad-top,#rolldown-ad,#ros_ad,#rotate_textads_1,#rotating-ad-display,#rotating-ads-wrap,#rotating_ad,#rotatingads,#row-ad,#row2AdContainer,#rowAdv,#rprightHeaderAd,#rpuAdUnit-0,#rrAdWrapper,#rr_MSads,#rr_ad,#rr_gallery_ad,#rside_ad,#rside_adbox,#rt-ad,#rt-ad-top,#rt-ad468,#rtAdvertisement,#rtMod_ad,#rt_side_top_google_ad,#rtcol_advert_1,#rtcol_advert_2,#rtm_div_562,#rtm_html_226,#rtm_html_920,#rtmm_right_ad,#rtmod_ad,#rtn_ad_160x600,#rubicsTextAd,#rxgcontent,#rxgfooter,#rxgheader,#rxgleftbar,#rxgrightbar,#sAdsBox,#s_ads_header,#say-center-contentad,#sb-ad-sq,#sb_ad_links,#sb_advert,#sbads-top,#scoreAD,#script_ad_0,#scroll-ad,#scroll_ad,#scroll_banner_ad,#scrollingads,#sct_side_ads,#sdac_bottom_ad_widget-3,#sdac_footer_ads_widget-3,#sdac_skyscraper_ad_widget-3,#sdac_top_ad_widget-3,#search-ad,#search-ads1,#search-google-ads,#search-sponsored-links,#search-sponsored-links-top,#searchAdFrame,#searchAdSenseBox,#searchAdSenseBoxAd,#searchAdSkyscraperBox,#searchAds,#searchGoogleAdBottom,#searchPaneGoogleAd,#search_ad,#search_result_ad,#searchresult_advert_right,#searchsponsor,#sec_adspace,#second-adframe,#second-adlayer,#second-right-ad-tray,#second-story-ad,#secondBoxAd,#secondBoxAdContainer,#second_ad_div,#secondad,#secondary_ad_inventory,#secondaryad,#secondrowads,#sect-ad-300x100,#sect-ad-300x250,#sect-ad-300x250-2,#section-ad,#section-ad-1-728,#section-ad-300-250,#section-ad-4-160,#section-ad-bottom,#section-blog-ad,#section-container-ddc_ads,#section-footer-ribbonad,#section-pagetop-ad,#section-sub-ad,#section_ad,#section_advertisements,#section_advertorial_feature,#sector-widget__tiny-ad,#self-ad,#self_serve_ads,#sensis_island_ad_1,#sensis_island_ad_1_column,#sensis_island_ad_2,#sensis_island_ad_2_column,#sensis_island_ad_3,#sensis_island_ad_3_column,#serveAd1,#serveAd2,#serveAd3,#servfail-ads,#sew-ad1,#sew_advertbody,#sfif-wrapper-keywordad-0,#sgAdHeader,#sgAdScGp160x600,#shellnavAd,#shoppingads,#shortads,#shortnews_advert,#show-ad,#show-player-right-ad,#showAd,#show_ads,#showads,#showcaseAd,#sic_superBannerAd-loader,#sic_superBannerAdTop,#side-ad,#side-ad-container,#side-ads,#side-ads-box,#side-banner-ad,#side-big-ad-bottom,#side-big-ad-middle,#side-boxad,#side-content-ad-1,#side-content-ad-2,#side-halfpage-ad,#side-skyscraper-ad,#sideABlock,#sideABlockHeader,#sideAD,#sideAd1,#sideAd2,#sideAdArea,#sideAdLarge,#sideAdSmall,#sideAdSub,#sideAds,#sideAdsBis,#sideBannerAd,#sideBar-ads,#sideBarAd,#sideBySideAds,#sideSponsors,#side_ad,#side_ad_call,#side_ad_container_A,#side_ad_module,#side_ad_wrapper,#side_ads_by_google,#side_adv_2,#side_adverts,#side_longads,#side_sky_ad,#side_skyscraper_ad,#side_sponsors,#sidead,#sidead1,#sidead1mask,#sideadbox,#sideads,#sideads_container,#sideadscol,#sideadtop-to,#sideadvert,#sideadzone,#sidebar-125x125-ads,#sidebar-125x125-ads-below-index,#sidebar-ad,#sidebar-ad-300,#sidebar-ad-block,#sidebar-ad-boxes,#sidebar-ad-holdd,#sidebar-ad-holdd-middle,#sidebar-ad-loader,#sidebar-ad-middle,#sidebar-ad-space,#sidebar-ad-wrap,#sidebar-ad1,#sidebar-ad2,#sidebar-ad3,#sidebar-ad_dbl,#sidebar-ads-content,#sidebar-ads-narrow,#sidebar-ads-wide,#sidebar-ads-wrapper,#sidebar-adspace,#sidebar-adv,#sidebar-advertise-text,#sidebar-advertisement,#sidebar-banner300,#sidebar-corner-ad,#sidebar-feed-ad,#sidebar-left-ad,#sidebar-long-advertise,#sidebar-main-ad,#sidebar-post-120x120-banner,#sidebar-post-300x250-banner,#sidebar-scroll-ad-container,#sidebar-sponsor-link,#sidebar-sponsors,#sidebar-top-ad,#sidebar-top-ads,#sidebar2-ads,#sidebar2ads,#sidebarAd,#sidebarAd1,#sidebarAd2,#sidebarAdSense,#sidebarAdSpace,#sidebarAdUnitWidget,#sidebarAds,#sidebarAdvert,#sidebarSponsors,#sidebarTextAds,#sidebarTowerAds,#sidebar_ad_1,#sidebar_ad_2,#sidebar_ad_3,#sidebar_ad_adam,#sidebar_ad_container,#sidebar_ad_top,#sidebar_ad_widget,#sidebar_ad_wrapper,#sidebar_adblock,#sidebar_ads_180,#sidebar_box_add,#sidebar_mini_ads,#sidebar_sponsoredresult_body,#sidebar_topad,#sidebar_txt_ad_links,#sidebarad,#sidebarad_300x600-33,#sidebarad_300x600-4,#sidebaradpane,#sidebaradsense,#sidebaradver_advertistxt,#sidebaradverts,#sidebard-ads-wrapper,#sidebargooglead,#sidebargoogleads,#sidebarrectad,#sideline-ad,#sidepad-ad,#simple_ads_manager_ad_widget-2,#simple_ads_manager_widget-3,#simple_ads_manager_widget-4,#simplyhired_job_widget,#single-ad,#single-ad-2,#single-adblade,#single-mpu,#singleAd,#singleAdsContainer,#single_ad_above_content,#singlead,#site-ad-container,#site-ads,#site-header__ads,#site-leaderboard-ads,#site-sponsor-ad,#site-sponsors,#siteAdHeader,#site_body_header_banner_ad,#site_bottom_ad_div,#site_content_ad_div,#site_top_ad,#sitead,#sitemap_ad_left,#skcolAdSky,#skin-ad,#skinTopAd,#skin_ADV_DIV,#skin_adv,#skinad-left,#skinad-right,#skinmid-ad,#skinmid-ad_iframe,#skinningads,#sky-ad,#sky-ads,#sky-left,#sky-right,#sky-top-ad,#skyAd,#skyAdContainer,#skyAdNewsletter,#skyScraperAd,#skyScrapperAd,#skyWrapperAds,#sky_ad,#sky_advert,#skyads,#skyadwrap,#skyline_ad,#skyscrapeAd,#skyscraper-ad,#skyscraper-ad-1,#skyscraper-ad-2,#skyscraperAd,#skyscraperAdContainer,#skyscraperAdWrap,#skyscraperAds,#skyscraperWrapperAd,#skyscraper_ad,#skyscraper_advert,#skyscraperadblock,#skyscrapper-ad,#slide_ad,#slidead,#slideboxad,#slider-ad,#sliderAdHolder,#slider_ad,#slideshow-middle-ad,#slideshowAd,#slideshow_ad_300x250,#sm-banner-ad,#smallAd,#smallBannerAdboard,#small_ad,#small_ad_banners_vertical,#small_ads,#smallad,#smallads,#smallerAd,#smoozed-ad,#smxTextAd,#socialAD,#socialBarAd,#socialBarAdMini,#some-ads,#some-ads-holder,#some-more-ads,#sortsite1-bottom-ad,#source-ad-native-sticky-wrapper,#source_ad,#source_content_ad,#spec_offer_ad2,#special-deals-ad,#specialAd_one,#specialAd_two,#special_ads,#specialadfeatures,#specialadvertisingreport_container,#specials_ads,#speed_ads,#speeds_ads,#speeds_ads_fstitem,#speedtest_mrec_ad,#sphereAd,#sphereAd-wrap,#spl_ad,#spnAds,#spnslink,#sponBox,#sponLinkDiv_1,#sponLinkDiv_2,#spon_links,#sponlink,#sponlinks,#sponsAds,#sponsLinks,#spons_links,#sponseredlinks,#sponsor-flyout-wrap,#sponsor-links,#sponsor-sidebar-container,#sponsorAd,#sponsorAd1,#sponsorAd2,#sponsorBanners32,#sponsorBar,#sponsorBorder,#sponsorContainer0,#sponsorFooter,#sponsorLinkDiv,#sponsorLinks,#sponsorResults,#sponsorSpot,#sponsorTab,#sponsorTextLink,#sponsor_300x250,#sponsor_ad,#sponsor_ads,#sponsor_banderole,#sponsor_bar,#sponsor_bottom,#sponsor_box,#sponsor_deals,#sponsor_div,#sponsor_footer,#sponsor_header,#sponsor_link,#sponsor_no,#sponsor_partner_single,#sponsor_posts,#sponsor_right,#sponsored-bucket,#sponsored-features,#sponsored-inline,#sponsored-links,#sponsored-links-container,#sponsored-links-list,#sponsored-links-media-ads,#sponsored-listings,#sponsored-message,#sponsored-not,#sponsored-products-dp_feature_div,#sponsored-recommendations,#sponsored-resources,#sponsored-text-links,#sponsored-widget,#sponsored1,#sponsoredAdvertisement,#sponsoredBottom,#sponsoredBox1,#sponsoredBox2,#sponsoredFeaturedHoz,#sponsoredHoz,#sponsoredLinks,#sponsoredLinksBox {display: none !important; color: #72da9a !important; background-color: #a0abfd !important;}#sponsoredLinks_Bottom,#sponsoredLinks_Top,#sponsoredList,#sponsoredResults,#sponsoredResultsWide,#sponsoredSiteMainline,#sponsoredSiteSidebar,#sponsoredTop,#sponsoredWd,#sponsored_ads,#sponsored_ads_v4,#sponsored_container,#sponsored_content,#sponsored_game_row_listing,#sponsored_head,#sponsored_label,#sponsored_link,#sponsored_link_bottom,#sponsored_links,#sponsored_native_ad,#sponsored_news,#sponsored_option,#sponsored_v12,#sponsoredads,#sponsoredlinks,#sponsoredlinks_cntr,#sponsoredlinks_left_wrapper,#sponsoredlinkslabel,#sponsoredresultsBottom_body,#sponsoredresults_top,#sponsoredwellcontainertop,#sponsorlink,#sponsors-block,#sponsorsBox,#sponsorsContainer,#sponsors_right_container,#sponsors_top_container,#sponsorsads1,#sponsorsads2,#sponsorship-box,#sponsorshipBadge,#sporsored-results,#sports_only_ads,#spotadvert,#spotadvert1,#spotadvert2,#spotadvert3,#spotadvert5,#spotlight-ad-container-block,#spotlight-ad_iframe,#spotlight-ads,#spotlightAds,#spotlight_ad,#spotlightad,#spr_ad_bg,#spreadly-advertisement-container,#sprint_ad,#sqAd,#sq_ads,#square-ad,#square-ad-box,#square-ad-slider-wrapper,#square-ad-space,#square-ad-space_btm,#square-ads,#square-sponsors,#squareAd,#squareAdBottom,#squareAdSpace,#squareAdTop,#squareAdWrap,#squareAds,#squareGoogleAd,#square_ad,#square_lat_adv,#squaread,#squareadAdvertiseHere,#squareadvert,#squared_ad,#srp_adsense-top,#ss-ad-container,#ss-ad-overlay,#ss-ads-container,#ssmiwdiv[jsdisplay],#st_topads,#stageAds,#starad,#start_middle_container_advertisment,#static_textads_1,#stationad,#sticky-ad,#sticky-ad-container,#sticky-top-ad-spacer,#sticky-top-ad-wrap,#stickyAdBlock,#stickyBottomAd,#stickySkyAd,#sticky_adv_container,#stickyad,#stickyads,#stickyleftad,#stickyrightad,#stopAdv,#stopAdvt,#story-90-728-area,#story-ad,#story-ad-a,#story-ad-b,#story-ad-top,#story-ad-wrap,#story-leaderboard-ad,#story-page-leaderboard-ad,#story-sponsoredlinks,#storyAd,#storyAdWrap,#story_ad,#story_ads,#story_main_mpu,#story_unseen_ad,#storyad2,#storyblock-ad,#stripadv,#style_ad_bottom,#subAdsFooter,#subbgad,#subheaderAd,#submenu-ads,#subpage-ad-right,#subpage-ad-top,#subpageAd,#subpage_234x60ad,#sugarad-stitial-overlay,#super_ad,#svp-ad,#swads,#sway-banner-ad,#sway-banner-ad-container,#sway-banner-ad1,#sweep_right_ad,#sweep_top_ad,#swfAd1,#swfAd5,#syn_headerad_zone,#synced-ad,#synch-ad,#systemad_background,#t7ad,#tabAdvertising,#table_ads,#taboola-above-article-thumbnails-title,#taboola-ad,#taboola-adverts,#taboola-below,#taboola-below-article-thumbnails-3rd,#taboola-content,#taboola-footer-ad,#taboola-right-rail-stream-2nd,#taboola-right-rail-thumbnails-1st,#taboola-top-banner-abp,#taboola_related,#tads + div + .c,#tads.c,#tadsb.c,#tadsto.c,#tailResultAd,#takeover-ad,#takeoverad,#targetWeeklyAd,#targetWeeklyAdLogo,#targeted-ads,#tblAd,#tblReklama2,#tbl_googlead,#tbo_headerads,#tcwAd,#td-GblHdrAds,#td-applet-ads_2_container,#td-applet-ads_container,#tdAds,#tdBannerTopAds,#tdGoogleAds,#td_adunit1,#td_adunit1_wrapper,#td_adunit2,#td_sponsorAd,#teaser-adtag-left,#teaser-adtag-right,#temp-ads,#template_ad_leaderboard,#template_affiliates,#tertiary_advertising,#test_adunit_160_article,#text-ad,#text-link-ads,#text-linkAD,#textAd,#textAd1,#textAds,#textAdsTop,#text_ad,#text_ads,#text_advert,#textad,#textad3,#textad_block,#textads_right_container,#textlink-advertisement,#textlink_ads_placeholder,#textsponsor,#tf_page_ad_content_bottom,#tgAD_imu_2,#tgAD_imu_3,#tgAD_imu_4,#tgt1-Bottom-0-AdBlockPromo-Proxy,#tgt1-Col2-0-ComboAd-Proxy,#tgt1-Col2-1-ComboAd-Proxy,#tgt1-Col2-2-AdBlockPromo-Proxy,#the-last-ad-standing,#theadsADT3,#thefooterad,#thelistBottomAd,#themis-ads,#thheaderadcontainer,#third_party_ads,#thisisnotanad,#thistad,#thread-ad,#ti-sway-ad,#tile-ad,#tileAds,#tilia_ad,#tippytop-ad,#title-sponsor-banner,#title-wide-sponsored-by,#tmcomp_ad,#tmgAd_div_mpu_1,#tmglBannerAd,#tmn_ad_1,#tmn_ad_2,#tmn_ad_3,#tmp2_promo_ad,#tnt_ad_column,#toaster_ad,#tobsideAd,#today_ad_bottom,#toolbarSlideUpAd,#top-ad-970x250,#top-ad-banner,#top-ad-container,#top-ad-desktop,#top-ad-google,#top-ad-left-spot,#top-ad-menu,#top-ad-position-inner,#top-ad-rect,#top-ad-right-spot,#top-ad-unit,#top-ad-wrapper,#top-adblock,#top-adds,#top-ads,#top-ads-1,#top-ads-contain,#top-ads-tabs,#top-adspot,#top-advert,#top-advertisement,#top-advertisements,#top-banner-ad,#top-dfp,#top-leaderboard-ad,#top-left-ad,#top-middle-add,#top-right-ad,#top-search-ad-wrapper,#top-sidebar-ad-300x250,#top-sponsor-ad,#top-story-ad,#top100_ad300right,#top100_ad300rightbottom,#top2_ads,#top300x250ad,#top3_ads,#top728ad,#topAD,#topAd300x250_,#topAd728x90,#topAdArea,#topAdBanner,#topAdBar,#topAdBox,#topAdContainer,#topAdDropdown,#topAdHolder,#topAdSenseDiv,#topAdShow,#topAdWrapper,#topAdcontainer,#topAds,#topAds1,#topAds2,#topAdsContainer,#topAdsDiv,#topAdsG,#topAdv,#topAdvBox,#topAdvert-09,#topBanner-ad,#topBannerAdContainer,#topContentAdTeaser,#topImgAd,#topLBAd,#topLeaderAdAreaPageSkin,#topLeaderboardAd,#topMPU,#topMpuContainer,#topNavLeaderboardAdHolder,#topOpenXAdSlot,#topOverallAdArea,#topRightBlockAdSense,#topSponsoredLinks,#top_AD,#top_ad-sense,#top_ad_area,#top_ad_banner,#top_ad_block,#top_ad_box,#top_ad_container,#top_ad_game,#top_ad_inventory,#top_ad_parent,#top_ad_strip,#top_ad_td,#top_ad_unit,#top_ad_widget_area,#top_ad_wrapper,#top_ad_zone,#top_adblock_fix,#top_add,#top_ads_container,#top_ads_region,#top_ads_wrap,#top_adsense_cont,#top_adspace,#top_adv,#top_adv-v2,#top_adv_220,#top_adv_728,#top_advert,#top_advert_box,#top_advertise,#top_advertising,#top_banner_ads,#top_container_ad,#top_content_ad_inner_container,#top_google_ad_container,#top_google_ads,#top_header_ad_wrapper,#top_mpu,#top_mpu_ad,#top_rectangle_ad,#top_right_ad,#top_span_ad,#top_sponsor_ads,#top_sponsor_text,#top_wide_ad,#topad-728x90,#topad-wrap,#topad1,#topad2,#topad728,#topad_holder,#topad_left,#topad_right,#topad_table,#topadbanner,#topadbanner2,#topadbar,#topadblock,#topadcell,#topadcontainer,#topaddwide,#topadh,#topadone,#topads-spacer,#topads-wrapper,#topadsblock,#topadsdiv,#topadsense,#topadspace,#topadvertisements,#topadvertisementwrapper,#topadwrap,#topadz,#topadzone,#topbanner_ad,#topbanner_sponsor,#topbanneradtitle,#topbar-ad,#topbarAd,#topbar_Adc1_AdContainer,#topbarads,#topcustomad,#topheader_ads,#topicPageAdsense,#topleaderAd,#topleaderboardad,#topnav-ad-shell,#topnavad,#toppannonse,#topright-ad,#toprightAdvert,#toprightad,#toprow-ad,#topsidebar-ad,#topsponad,#topsponsorads,#topsponsored,#topstuff &gt; #tads,#toptextad,#tour300Ad,#tour728Ad,#tourSponsoredLinksContainer,#tower1ad,#towerAdContainer,#towerad,#tr-ad,#tr-ad-mpu01,#tr-ad-mpu02,#tr-adv-banner,#trafficrevenue2,#transparentad,#travel_ad,#trc_google_ad,#trendex-sponsor-ad,#trib2-footer-ad-back,#trib2-leaderboard-ad-back,#tripleAdInner,#tripleAdOuter,#ts-ad_module,#tsad1,#tsad2,#ttp_ad_slot1,#ttp_ad_slot2,#tube_ad,#turnAD,#tut_ads,#tvd-ad-top,#twogamesAd,#txfPageMediaAdvertVideo,#txtAdcontainer2,#txtTextAd,#txt_link_ads,#txtads,#ucfooterad,#ugly-ad,#ui-about-these-ads-img,#ultraWideAdContainer,#underPlayerAd,#under_content_ad,#undergameAd,#universalAdContainer,#uploadMrecAd,#upper-ads,#upperAdvertisementImg,#upperMpu,#upperRightAds,#upper_adbox,#upper_advertising,#upper_small_ad,#upperad,#urban_contentad_1,#urban_contentad_2,#urban_contentad_article,#usa_ad_728x90,#usenetAdsTable,#uvp_ad_container,#uzcrsite,#vListAds,#v_ad,#vap_adsense-top,#variant_adsLazyLoad,#vc_side_ad,#vdiAd,#vdls-adv,#vdls-advs,#vert-ads,#vertAd2,#vert_ad,#vert_ad_placeholder,#vertad1,#verticalAds,#vertical_ad,#vertical_ads,#vhDivAdSlot300x250,#vid-left-ad,#vid-right-ad,#vidAdBottom,#vidAdRight,#vidAdTop,#video-ad,#video-ad-companion-rectangle,#video-adv,#video-adv-300,#video-adv-wrapper,#video-coverage-ad-300x250,#video-embed-ads,#video-header-advert,#video-in-player-ad,#video-in-player-ad-container,#video-under-player-ad,#videoAdContainer,#videoAdvert,#videoCompanionAd,#videoPauseAd,#videoPlayerAdLayer,#video_ads_background,#video_ads_bot_overlay,#video_ads_overdiv,#video_adv,#video_advert,#video_advert2,#video_advert3,#video_advert_top,#video_cnv_ad,#video_embed_ads,#video_hor_bottom_ads,#video_overlay_ad,#video_vert_right_ads,#videoadlogo,#videopageadblock,#view-photo-ad,#viewAd1,#view_ads_bottom_bg,#view_ads_bottom_bg_middle,#view_ads_content_bg,#view_ads_top_bg,#view_ads_top_bg_middle,#view_adtop,#viewer-ad-bottom,#viewer-ad-top,#viewer_ads_wrapper,#viewportAds,#viewvid_ad300x250,#visual-ad,#votvAds_inner,#vsw-ads,#vsw_ad,#vuukle_ads_square2,#wTopAd,#wXcds12-ad,#wallAd,#wall_advert,#wallpaper-ad-link,#wallpaperAd_left,#wallpaperAd_left3,#wallpaperAd_right,#wallpaperAd_right2,#wallpaperAd_right2_1,#wallpaper_flash_ad,#wallpaper_header_ad,#walltopad,#watch-now-ad,#watch7-sidebar-ads,#watch_sponsored,#wd_ads,#weather-ad,#weather_sponsor,#weatherad,#weblink_ads_container,#websearchAdvert,#welcomeAdsContainer,#welcome_ad,#welcome_ad_mrec,#welcome_advertisement,#wf_ContentAd,#wf_FrontSingleAd,#wf_SingleAd,#wf_bottomContentAd,#wg_ads,#wgtAd,#wh_ad_4,#whatsnews_footer_ad,#whatsnews_top_ad,#whitepaper-ad,#whoisRightAdContainer,#whoisRightAdContainerBottom,#whoisRightAdContainerTop,#wibiyaAdRotation,#wibiyaToolbarAdUnitFlash,#wide-ad,#wideAdd,#wide_ad_unit,#wide_ad_unit2,#wide_ad_unit_2,#wide_ad_unit_top,#wide_ad_unit_up,#wide_adv,#wide_right_ad,#wideskyscraper_160x600_left,#wideskyscraper_160x600_right,#widget-ads-3,#widget-ads-4,#widget-adv-12,#widget-box-ad-1,#widget-box-ad-2,#widget-style-ad,#widgetADT3,#widget_Adverts,#widget_ad,#widget_advertisement,#widget_thrive_ad_default-2,#widget_thrive_ad_default-4,#widgetwidget_adserve2,#wl-pencil-ad,#wo-widget-wrap,#wog-300x250-ads,#wow-ads,#wp-insert-ad-widget-1,#wp-topAds,#wp125adwrap_2c,#wp_ad_marker,#wp_ads_gpt_widget-16,#wp_ads_gpt_widget-17,#wp_ads_gpt_widget-18,#wp_ads_gpt_widget-19,#wp_ads_gpt_widget-21,#wp_ads_gpt_widget-4,#wp_ads_gpt_widget-5,#wp_pro_ad_system_ad_zone,#wrapAd,#wrapAdRight,#wrapAdTop,#wrapCommentAd,#wrapperAdsTopLeft,#wrapperAdsTopRight,#wrapperRightAds,#wrapper_ad_Top,#wrapper_ad_island2,#wrapper_sponsoredlinks,#wsAdWrapper,#x-ad-item-themed-skyscraper-placekeeper,#x-houseads,#x01-ad,#x300_ad,#xColAds,#xadtop,#xlAd,#xybrad,#y-ad-units,#y708-ad-expedia,#y708-ad-lrec,#y708-ad-partners,#y708-ad-ysm,#y708-advertorial-competitions,#y708-advertorial-marketplace,#yahoo-ads,#yahoo-ads-content,#yahoo-sponsors,#yahooAdsBottom,#yahooSponsored,#yahoo_ad,#yahoo_ad_contanr,#yahoo_ads,#yahoo_sponsor_links,#yahoo_sponsor_links_title,#yahoo_text_ad,#yahooad-tbl,#yahooads,#yan-advert-north,#yan-advert-nt1,#yan-question-advert,#yan-sponsored,#yatadsky,#ybf-ads,#yfi-sponsor,#yfi_ads_4x4,#yfi_fp_ad_fx,#yfi_fp_ad_mort,#yfi_fp_ad_nns,#yfi_pf_ad_mort,#ygrp-sponsored-links,#yieldaddiv,#ylf-lrec,#ylf-lrec2,#ymap_adbanner,#yn-gmy-ad-lrec,#yom-ad-tbs-as,#ypaAdWrapper-BottomAds,#ypaAdWrapper-TopAds,#yrail_ads,#yreSponsoredLinks,#ysm_ad_iframe,#yt-adsfull-widget-2,#yt-adsfull-widget-3,#yw-sponsoredad,#zMSplacement1,#zMSplacement2,#zMSplacement3,#zMSplacement4,#zMSplacement5,#zMSplacement6,#zag_square_ad,#zergnet,#zergnet-widget,#zergnet-wrapper,#zoneAdserverMrec,#zoneAdserverSuper,#zoneAdvertisment,#zone_a_ad,#zone_b_ad,#zone_c_ads,#zztextad,.AD-POST,.AD-RC-300x250,.AD-Rotate,.AD-label300x250,.AD300,.AD300Block,.AD300x600-wrapper,.AD355125,.AD728,.ADBnrArea,.ADBox,.ADCLOUD,.ADFooter,.ADITION,.ADInfo,.ADLeader,.ADMiddle1,.ADPod,.ADS-Content-Sidebar,.ADS-MainContent,.ADServer,.ADStyle,.ADTextSingle,.ADV-Space,.AD_2,.AD_300x100,.AD_300x250,.AD_300x265,.AD_302x252,.AD_ALBUM_ITEMLIST,.AD_Leaderboard,.AD_MOVIE_ITEM,.AD_MOVIE_ITEMLIST,.AD_MOVIE_ITEMROW,.AD_area,.AD_mid300,.AD_textinfo,.AD_underpost,.ADbox,.ADmid,.ADouter_div,.ADwidget,.A__smallSuperbannerAdvert-main,.AcceptableTextAds,.Accordion_ad,.Ad--header,.Ad--sidebar,.Ad-300x100,.Ad-Container,.Ad-Container-976x166,.Ad-Header,.Ad-IframeWrap,.Ad-MPU,.Ad-Wrapper-300x100,.Ad-label,.Ad120x600,.Ad160x600,.Ad160x600left,.Ad160x600right,.Ad247x90,.Ad300,.Ad300x,.Ad300x250,.Ad300x250L,.Ad300x250_top,.Ad728x90,.AdBorder,.AdBox160,.AdBox7,.AdBox728,.AdBoxStyle,.AdBoxStyleHome,.AdCaption,.AdCommercial,.AdContainer160x600,.AdContainerBottom,.AdContainerBox308,.AdContainerModule,.AdFrameLB,.AdGraph,.AdGrayBox,.AdHeader,.AdHere,.AdHolder,.AdIndicator,.AdInjectContainer,.AdInline,.AdInline_left,.AdLeft1,.AdLeft2,.AdLeftbarBorderStyle,.AdMedium,.AdMessage,.AdModule,.AdModule_Content,.AdModule_ContentLarge,.AdModule_Hdr,.AdMultiPage,.AdPanel,.AdPlaceHolder,.AdProS728x90Container,.AdProduct,.AdRight1,.AdRight2,.AdRingtone,.AdScriptBox,.AdSectionHeader,.AdSense,.AdSenseLeft,.AdSense_Header,.AdSense_Sidebar,.AdSlot,.AdSlotHeader,.AdSlot__Commercial,.AdSpace,.AdTextSmallFont,.AdTop,.AdUnit,.AdUnit300,.AdUnit300x250,.AdUnitBox,.AdWidget_ImageWidget,.AdZone120,.AdZone316,.Ad_120x600,.Ad_120x600_holder,.Ad_160x600_holder,.Ad_160x600_inner,.Ad_300x250,.Ad_300x250_holder,.Ad_468x60,.Ad_728x90,.Ad_728x90_holder,.Ad_C,.Ad_D,.Ad_D_Wrapper,.Ad_E_Wrapper,.Ad_Label,.Ad_Label_foursquare,.Ad_Right,.Ad_Tit,.Ad_container,.Adbuttons,.Adbuttons-sidebar,.AdnetBox,.Ads-768x90,.Ads2x1000,.AdsBottom,.AdsBottom336X280,.AdsBoxBottom,.AdsBoxSection,.AdsBoxTop,.AdsLeft_list,.AdsLinks1,.AdsLinks2,.AdsPlayRight_list,.AdsRec,.Ads_3,.Ads_4,.Ads_forum,.Adsense,.AdsenseBox,.AdsenseBoxCenter,.AdsenseDivFooter,.AdsenseDownload,.AdsenseForum,.AdsenseLarge,.AdsenseTechsupport,.Adspottop,.Adtext,.Adv300x250,.Adv300x250Box,.Adv468,.AdvBoxSidebar,.Adv_Left,.Advert300x250,.AdvertMidPage,.AdvertiseWithUs,.Advertisehere2,.AdvertisementText,.AdvertisementTextTag,.AdvertisementTop,.Advertisment,.AdvertorialTeaser,.Advman_Widget,.Advrt,.Advrt_desktop,.AdvtNews,.AdvtSample,.AdvtSample2,.AdvtSample4,.AffAD,.AffiliateAds,.AmazonSimpleAdmin_widget,.ArticleAd,.ArticleInlineAd,.ArticleLeaderboard_ad,.BCA_Advertisement,.BGoogleAds300,.BOT-ADS,.Banner300x250,.Banner468X60,.BannerAD728,.BannerAd,.Banner_Group,.Banner_Group_Ad_Label,.BigBoxAd,.BigBoxAdLabel,.BlockAd,.BlueTxtAdvert,.BottomAdContainer,.BottomAffiliate,.BottomGoogleAds,.BoxAd,.BoxAdWrap,.BoxSponsorBottom,.BtmAd,.BtmSponsAd,.ButtonAd,.CG_adkit_leaderboard,.CG_details_ad_dropzone,.CWReviewsProdInfoAd,.Cheat__footer-ad-container,.Cheat__outbrain,.CollisionAdMarker,.ComAread,.CommentAd,.CommentGoogleAd,.ContentAd,.ContentAd2,.ContentAds,.DAWRadvertisement,.DartAdvert,.DeptAd,.DetachedAd,.DetailAds,.DisplayAd,.DomAdsDiv,.DoubleClickRefreshable,.EzAdsLUPro,.EzAdsSearchPro,.EzAdsWidget,.FT_Ad,.FeaturedAdIndexAd,.FlatAds,.FlowersAdContainer,.FooterAdContainer,.FooterAds,.FooterTileAdOuter_Div,.Footer_AD_Links_DIV,.Footer_Default_AD_Message_DIV,.GAME_Ad160x600,.GB3L-QEDGY .GB3L-QEDF- &gt; .GB3L-QEDE-,.GFYY1SVD2 &gt; .GFYY1SVC2 &gt; .GFYY1SVF5,.GFYY1SVE2 &gt; .GFYY1SVD2 &gt; .GFYY1SVG5,.GHOFUQ5BG2 &gt; .GHOFUQ5BF2 &gt; .GHOFUQ5BG5,.GJJKPX2N1 &gt; .GJJKPX2M1 &gt; .GJJKPX2P4,.GKJYXHBF2 &gt; .GKJYXHBE2 &gt; .GKJYXHBH5,.GOOGLE_AD,.GPMV2XEDA2 &gt; .GPMV2XEDP1 &gt; .GPMV2XEDJBB,.G_ads,.G_ads_m,.GalleryViewerAdSuppress,.GetRightAds,.GoogleAd,.GoogleAdInfo,.GoogleAdSencePanel,.GoogleAdSenseBottomModule,.GoogleAdSenseRightModule,.GoogleAdWords_container,.GoogleAdsBox,.GoogleAdsItem,.GoogleAdv,.Googleads728,.GreenHomeAd,.GridHouseAdRight,.HGLoneAdTitleFrame,.HPG_Ad_B,.HPNewAdsBannerDiv,.HPRoundedAd,.HeaderAd,.HeaderAds,.HeaderBannerAd,.HeaderLeaderAd,.HeadingAdSpace,.HomeAd1Label,.HomeContentAd {display: none !important; color: #72da9a !important; background-color: #a0abfd !important;}.HomePageAD,.HomeSidebarAd,.Hotels-Results-InlineAd,.IABAdSpace,.InArticleAd,.IndexRightAd,.InternalAdPanel1,.JobListMidAd,.LL_Widget_Advertorial,.LN_Related_Posts_bottom_adv,.LargeOuterBoxAdsense,.LargeRightAd,.LastAd,.LeaderAd,.LeaderAdvertisement,.LeaderBoardAd,.LeaderboardAdTagWidget,.LeftAd,.LeftButtonAdSlot,.LeftTowerAd,.LeftWideSkyscraperAdPanel,.Left_Content_Google_Ad,.Ligatus,.Loge_AD,.LoungeAdsBottomLinks,.M2Advertisement,.MBoxAdM,.MBoxAdMain,.MBoxAdR,.MBoxAdRight,.MDCadSummary,.MD_adZone,.MOS-ad-hack,.MPUHolder,.MPUTitleWrapperClass,.MPUad,.MREC_ads,.M__leaderboardAdvert-image,.MadClose,.MainAdCont,.Main_right_Adv_incl,.MarketGid_container,.MasterLeftContentColumnThreeColumnAdLeft,.MbanAd,.MedRecAD-border,.MediumRectangleAdPanel,.MiddleAd,.MiddleAdContainer,.MiddleAdvert,.MiddleRightRadvertisement,.Mpopup + #Mad &gt; #MadZone,.MspAd,.NAPmarketAdvert,.NGOLocalFooterAd,.NavBarAd,.NewsAds,.OAS_position_TopLeft,.OSOasAdModule,.OSProfileAdSenseModule,.OpaqueAdBanner,.OpenXad,.OuterAdvertisingContainer,.PERFORMANCE_AD_COMPLETE,.PERFORMANCE_AD_RELATED,.PU_DoubleClickAdsContent,.PencilAd,.Post5ad,.Post8ad,.Post9ad,.PostSidebarAd,.PremiumObitAdBar,.ProductAd,.PushDownAdPane,.PushdownAd,.RBboxAd,.RC-AD,.RGAdBoxMainDiv,.RHR-ADS,.RR_ad,.RW_ad300,.RectangleAd,.ResponsiveAd,.Right-Column-AD-Container,.Right300x250AD,.RightAd,.RightAd1,.RightAd2,.RightAdvertiseArea,.RightAdvertisement,.RightGoogleAFC,.RightGoogleAd,.RightRailAd,.RightRailAdbg,.RightRailAdtext,.RightRailTop300x250Ad,.RightSponsoredAdTitle,.RightTowerAd,.SBAArticle,.SBABottom,.SBABottom1,.SBAInHouse,.SBAMR,.SBARightBottom,.SBARightTop,.SBATier1,.SBATier2,.SBATier3,.SBAUA,.SIM_ad_140x140_homepage_tv_promo,.SRPads,.STR_AdBlock,.SecondaryAd,.SecondaryAdLink,.SectionSponsor,.ShootingAd,.ShootingAdLeft,.ShowAdDisplay,.SideAd,.SideAdCol,.SideAds,.SidebarAd,.SidebarAdvert,.SidebarMiddleAdContainer,.SidekickItem-Ads,.SimpleAcceptableTextAds,.SimpleAcceptebleTextAds,.SitesGoogleAdsModule,.Sitewide_AdLabel,.SkyAdContainer,.SkyAdContent,.SkyScraperAd,.SkyscraperAD-border,.SmartAdZoneList,.Sponsor-container,.SponsorAds,.SponsorHeader,.SponsorIsland,.SponsorLink,.SponsoredAdTitle,.SponsoredArticleAd,.SponsoredLinkItemTD,.SponsoredLinks,.SponsoredLinksGrayBox,.SponsoredLinksModule,.SponsoredLinksPadding,.SponsoredLinksPanel,.SponsoredResults,.Sponsored_link,.SponsorshipText,.SquareAd,.Squareadspot,.StandardAdLeft,.StandardAdRight,.TOP-ADS,.TRADING_AD_RELATED,.TRU-onsite-ads-leaderboard,.TTButtAd,.Tadspacemrec,.TextAd,.TextAdds,.TheEagleGoogleAdSense300x250,.ThreeAds,.TimelineAd,.TmnAdsense,.TopAd,.TopAdContainer,.TopAdL,.TopAdR,.TopAds,.TopBannerAd,.TopLeaderboardAdPanel,.TopRightRadvertisement,.Top_Ad,.TrafficAd,.UFSquareAd,.UIStandardFrame_SidebarAds,.UIWashFrame_SidebarAds,.UnderAd,.UpperAdsContainer,.VerticalAd,.Video-Ad,.VideoAd,.WPBannerizeWidget,.WP_Widget_Ad_manager,.WideAdContainer,.WideAdTile,.WideAdsLeft,.WidgetAdvertiser,.WiredWidgetsDartAds,.WiredWidgetsGoogleAds,.WithAds,.XEad,.YEN_Ads_120,.YEN_Ads_125,.ZERGNET,.ZventsSponsoredLabel,.ZventsSponsoredList,.__xX20sponsored20banners,.__y_elastic .__y_item,.__y_inner &gt; .__y_item,.__y_outer,.__yinit .__y_item,.__ywl .__y_item,.__ywvr .__y_item,.__zinit .__y_item,._ap_adrecover_ad,._articleAdvert,._bannerAds,._bottom_ad_wrapper,._fullsquaread,._iub_cs_activate_google_ads,._top_ad_wrapper,.a-ad,.a-d-container,.a160x600,.a300x250,.a468x60,.a728x90,.aa_AdAnnouncement,.aa_ad-160x600,.aa_ad-728x15,.aa_sb_ad_300x250,.aadsection_b1,.aadsection_b2,.ab-prompt,.abAdArea,.abAdPositionBoxB,.abBoxAd,.ablock300,.ablock468,.ablock728,.about_adsense,.above-header-advert,.aboveCommentAdBladeWrapper,.aboveCommentAds,.aboveCommentAdsWrapper,.above_discussion_ad,.above_miniscore_ad,.abovead,.absoluteAd_wss,.ac_adbox,.ac_adbox_inner,.acm_ad_zones,.ad--300,.ad--300x250,.ad--468,.ad--468-60,.ad--728x90,.ad--article-top,.ad--b,.ad--bottom-label,.ad--bottommpu,.ad--c,.ad--dart,.ad--e,.ad--footer,.ad--google,.ad--homepage-mrec,.ad--homepage-top,.ad--inner,.ad--just-in-feed,.ad--large,.ad--leaderboard,.ad--mpu,.ad--noscroll,.ad--pushdown,.ad--right,.ad--scroll,.ad--showmob,.ad--square-rectangle,.ad--top-label,.ad--top-leaderboard,.ad--top-slot,.ad-1,.ad-120-60,.ad-120-600-inner,.ad-120x60,.ad-120x600,.ad-120x90,.ad-125,.ad-125x125,.ad-140x45-2,.ad-150,.ad-160,.ad-160-160,.ad-160-600,.ad-160x600,.ad-160x600-gallery,.ad-160x600-home,.ad-160x600-wrap,.ad-160x600x1,.ad-160x600x2,.ad-160x600x3,.ad-194,.ad-2,.ad-200,.ad-200-big,.ad-200-small,.ad-200x200,.ad-228x94,.ad-230x90,.ad-234,.ad-246x90,.ad-250,.ad-250x125,.ad-250x300,.ad-260x60,.ad-270x100,.ad-300,.ad-300-250,.ad-300-250-600,.ad-300-600,.ad-300-b,.ad-300-b-absolute,.ad-300-block,.ad-300-blog,.ad-300-dummy,.ad-300-flex,.ad-300x,.ad-300x100,.ad-300x200,.ad-300x250-first,.ad-300x250-home,.ad-300x250-right0,.ad-300x250-section,.ad-300x250-singlepost,.ad-300x250_600x250,.ad-300x600,.ad-300x70,.ad-300x75,.ad-319x128,.ad-336x280,.ad-336x280B,.ad-350,.ad-355x75,.ad-3x1,.ad-4,.ad-468,.ad-468x120,.ad-468x60,.ad-5,.ad-544x250,.ad-560,.ad-6,.ad-600,.ad-635x40,.ad-7,.ad-720-affiliate,.ad-728,.ad-728-90,.ad-728-banner,.ad-728x90,.ad-728x90-1,.ad-728x90-top,.ad-728x90-top0,.ad-728x90_forum,.ad-768,.ad-88-60,.ad-88-text,.ad-88x31,.ad-90x600,.ad-970x50,.ad-970x90,.ad-980-1,.ad-BANNER,.ad-CUSTOM,.ad-E,.ad-LREC,.ad-LREC2,.ad-Leaderboard,.ad-MPU,.ad-MediumRectangle,.ad-PENCIL,.ad-RR,.ad-S,.ad-Square,.ad-SuperBanner,.ad-TOPPER,.ad-W,.ad-a,.ad-abc,.ad-above-header,.ad-adSense,.ad-adcode,.ad-adlink-bottom,.ad-adlink-side,.ad-adsense-block-250,.ad-after-content,.ad-alsorectangle,.ad-alternative,.ad-amongst-container,.ad-area,.ad-area-small,.ad-article-breaker,.ad-atf,.ad-atf-medRect,.ad-b,.ad-background,.ad-background-intra-body,.ad-banner-300,.ad-banner-bkgd,.ad-banner-container,.ad-banner-image,.ad-banner-label,.ad-banner-leaderboard,.ad-banner-placeholder,.ad-banner-smaller,.ad-banner-top,.ad-banner-top-wrapper,.ad-banner-vertical,.ad-banner-wrapper,.ad-banner728-top,.ad-banr,.ad-bar,.ad-below-images,.ad-below-player,.ad-belowarticle,.ad-bg,.ad-big,.ad-big-box,.ad-bigbox,.ad-bigboxSub,.ad-bigsize,.ad-billboard,.ad-bline,.ad-block-240x400,.ad-block-300-widget,.ad-block-300x250,.ad-block-big,.ad-block-bottom,.ad-block-clear-back,.ad-block-holder,.ad-block-in-post,.ad-block-square,.ad-block-wide,.ad-blog2biz,.ad-blogads,.ad-board,.ad-boombox,.ad-bordered,.ad-borderless,.ad-bot,.ad-bottom,.ad-bottom-container,.ad-bottom728x90,.ad-bottomLeft,.ad-bottomleader,.ad-bottomline,.ad-box-300x250,.ad-box-adsea,.ad-box-caption,.ad-box-container,.ad-box-up,.ad-box1,.ad-box2,.ad-box3,.ad-boxbottom,.ad-boxes,.ad-boxtop,.ad-break,.ad-breaker,.ad-breakout,.ad-browse-rectangle,.ad-bt,.ad-btn-heading,.ad-bug-300w,.ad-buttons,.ad-cad,.ad-calendar,.ad-call-300x250,.ad-callout,.ad-caption,.ad-card,.ad-card-container,.ad-catfish,.ad-center,.ad-chartbeatwidget,.ad-choices,.ad-circ,.ad-click,.ad-cluster,.ad-cluster-container,.ad-codes,.ad-col,.ad-col-02,.ad-column,.ad-comment,.ad-companion,.ad-contain,.ad-contain-300x250,.ad-contain-top,.ad-container--featured_videos,.ad-container--stripe,.ad-container--taboola,.ad-container-160x600,.ad-container-300x250,.ad-container-728,.ad-container-728x90,.ad-container-994x282,.ad-container-LEADER,.ad-container-bot,.ad-container-bottom,.ad-container-dk,.ad-container-embedded,.ad-container-leaderboard,.ad-container-left,.ad-container-responsive,.ad-container-right,.ad-container-side,.ad-container-tool,.ad-container-top,.ad-container-topad,.ad-container__ad-slot,.ad-container_row,.ad-content,.ad-content-area,.ad-content-rectangle,.ad-context,.ad-curtain,.ad-custom-size,.ad-d,.ad-defer,.ad-desktop,.ad-desktop-only,.ad-dfp-column,.ad-dfp-row,.ad-disclaimer,.ad-div,.ad-diver,.ad-divider,.ad-dt,.ad-dynamic-showcase-top,.ad-e,.ad-embedded,.ad-engage,.ad-entry-wrapper,.ad-exchange,.ad-expand,.ad-external,.ad-f-monster,.ad-fadein,.ad-fadeup,.ad-feature-content,.ad-feature-sponsor,.ad-feature-text,.ad-feedback,.ad-field,.ad-filler,.ad-fix,.ad-flag,.ad-flex,.ad-footer,.ad-footer-empty,.ad-footer-leaderboard,.ad-force-center,.ad-forum,.ad-full-width,.ad-fullbanner,.ad-fullbanner-btf-container,.ad-google,.ad-google-contextual,.ad-gpt,.ad-gpt-breaker,.ad-gpt-container,.ad-gpt-main,.ad-gpt-vertical,.ad-graphic-large,.ad-gray,.ad-grey,.ad-grid-125,.ad-grid-container,.ad-group,.ad-grp,.ad-hdr,.ad-head,.ad-header-container,.ad-header-pencil,.ad-header-sidebar,.ad-heading,.ad-headliner-container,.ad-here,.ad-hide-mobile,.ad-hideable,.ad-hldr-tmc,.ad-hold,.ad-home-bottom,.ad-home-right,.ad-homeleaderboard,.ad-homepage,.ad-homepage-1,.ad-homepage-2,.ad-homepage-one,.ad-hor,.ad-horizontal,.ad-horizontal-top,.ad-hpto,.ad-iab-txt,.ad-icon,.ad-identifier,.ad-iframe,.ad-imagehold,.ad-img300X250,.ad-in-300x250,.ad-in-content-300,.ad-in-post,.ad-in-results,.ad-incontent-ad-plus-bottom,.ad-incontent-ad-plus-middle,.ad-incontent-ad-plus-middle2,.ad-incontent-ad-plus-middle3,.ad-incontent-ad-plus-top,.ad-incontent-wrap,.ad-index,.ad-index-main,.ad-indicator-horiz,.ad-inline,.ad-inline-article,.ad-innr,.ad-inpage-video-top,.ad-insert,.ad-inserter,.ad-inserter-widget,.ad-integrated-display,.ad-internal,.ad-interruptor,.ad-interstitial,.ad-intromercial,.ad-island,.ad-item-related,.ad-label,.ad-lable,.ad-landscape,.ad-large-game,.ad-layer,.ad-lazy-support-yes,.ad-lb,.ad-lead,.ad-lead-bottom,.ad-leader,.ad-leader-bottom,.ad-leader-plus-top,.ad-leader-wrap,.ad-leader-wrapper,.ad-leaderboard-companion,.ad-leaderboard-container,.ad-leaderboard-marquee,.ad-leaderboard-top,.ad-leaderboard_river,.ad-leaderbody,.ad-leaderheader,.ad-leadtop,.ad-left3,.ad-leftrail,.ad-line,.ad-link-label,.ad-link-left,.ad-link-right,.ad-links-text,.ad-location,.ad-location-container,.ad-location-header,.ad-lock,.ad-lock-content,.ad-lower_rec,.ad-lower_river,.ad-lowerboard,.ad-lrec,.ad-mad,.ad-main,.ad-manager-ad,.ad-marker,.ad-marketplace,.ad-marketplace-horizontal,.ad-marketswidget,.ad-marquee,.ad-med,.ad-med-rec,.ad-med-rect,.ad-med-rect-tmp,.ad-medRec,.ad-media-marquee,.ad-media-marquee-btn,.ad-medium,.ad-medium-rectangle,.ad-medium-two,.ad-medrect,.ad-megaboard,.ad-message,.ad-messaging,.ad-mid-article-container,.ad-midleader,.ad-mobile,.ad-mobile-banner,.ad-mod,.ad-module,.ad-mpl,.ad-mpu,.ad-mpu-bottom,.ad-mpu-container,.ad-mpu-middle,.ad-mpu-middle2,.ad-mpu-placeholder,.ad-mpu-plus-top,.ad-mpu-top,.ad-mpu__aside,.ad-mpufixed,.ad-mrec,.ad-mrect,.ad-msg,.ad-msgunit,.ad-msn,.ad-national-1,.ad-native-dfp,.ad-new,.ad-no-style,.ad-noBorderAndMargin,.ad-noline,.ad-note,.ad-notice,.ad-notice-small,.ad-on,.ad-one,.ad-other,.ad-outlet,.ad-output-middle,.ad-output-wrapper,.ad-outside,.ad-overlay,.ad-packs,.ad-padding,.ad-page-leader,.ad-page-medium,.ad-pagehead,.ad-panel__container,.ad-panel__container--styled,.ad-panel__googlead,.ad-panorama,.ad-parallax-wrap,.ad-parent-hockey,.ad-passback-o-rama,.ad-pb,.ad-peg,.ad-permalink,.ad-personalise,.ad-place,.ad-place-active,.ad-place-holder,.ad-placeholder,.ad-plea,.ad-pos-top,.ad-position,.ad-position-1,.ad-post,.ad-post300X250,.ad-postText,.ad-poster,.ad-prevent-jump,.ad-primary,.ad-primary-sidebar,.ad-priority,.ad-pro70,.ad-promo,.ad-promoted-game,.ad-push,.ad-pushdown,.ad-r,.ad-rect,.ad-rect-atf-01,.ad-rect-top-right,.ad-rectangle,.ad-rectangle-banner,.ad-rectangle-container,.ad-rectangle-long,.ad-rectangle-long-sky,.ad-rectangle-text,.ad-rectangle-wide,.ad-rectangle-xs,.ad-refresh,.ad-region,.ad-region-delay-load,.ad-region__top,.ad-related,.ad-relatedbottom,.ad-resource-center-top,.ad-responsive-wide,.ad-rh,.ad-ri,.ad-right-header,.ad-right-txt,.ad-right1,.ad-right2,.ad-right3,.ad-roadblock,.ad-rotation,.ad-row-viewport,.ad-s,.ad-s-rendered,.ad-sample,.ad-scl,.ad-script-processed,.ad-scrollpane,.ad-search-grid,.ad-section-body,.ad-sense,.ad-sep,.ad-sharethrough-top,.ad-shifted,.ad-show-label,.ad-show-text,.ad-showcase,.ad-side,.ad-side-one,.ad-sidebar-180-150,.ad-sidebar-300-250,.ad-sidebar-ad-message,.ad-sidebar-border,.ad-sidebar-outer,.ad-sidebar300,.ad-sidebar_right_above,.ad-sidebar_right_below,.ad-siderail,.ad-signup,.ad-sitewide,.ad-sky,.ad-sky-left,.ad-sky-right,.ad-sky-wrap,.ad-skyscr,.ad-skyscraper,.ad-skyscraper-label,.ad-skyscraper1,.ad-skyscraper2,.ad-skyscraper3,.ad-slider,.ad-slot,.ad-slot--inline,.ad-slot--mpu-banner-ad,.ad-slot-1,.ad-slot-2,.ad-slot-234-60,.ad-slot-300-250,.ad-slot-728-90,.ad-slot-a,.ad-slot-banner,.ad-slot-container,.ad-slot-sidebar,.ad-slot-sidebar-b,.ad-slot-tall,.ad-slot-top-728,.ad-slot__label,.ad-slot__oas,.ad-slug,.ad-smallBP,.ad-sp,.ad-space,.ad-space-mpu-box,.ad-space-topbanner,.ad-spacer,.ad-span,.ad-speedbump,.ad-splash,.ad-sponsor,.ad-sponsor-large-container,.ad-sponsor-text,.ad-sponsored-feed-top,.ad-sponsored-links,.ad-sponsored-post,.ad-sponsors,.ad-spot,.ad-spotlight,.ad-square2-container,.ad-square300,.ad-squares,.ad-statement,.ad-sticky,.ad-story-inject,.ad-story-top,.ad-strip,.ad-subnav-container,.ad-subtitle,.ad-superbanner,.ad-t,.ad-table,.ad-tabs,.ad-tag,.ad-tag-square,.ad-tall,.ad-target2-wrapper,.ad-text-blockA01,.ad-text-blockB01,.ad-text-label,.ad-text-link,.ad-text-links,.ad-text-placeholder-3,.ad-textG01,.ad-textads,.ad-textlink,.ad-thanks,.ad-ticker,.ad-tile,.ad-tl1,.ad-top-300x250,.ad-top-728,.ad-top-728x90,.ad-top-banner,.ad-top-box-right,.ad-top-in,.ad-top-lboard,.ad-top-left,.ad-top-mpu,.ad-top-rectangle,.ad-top-wrapper,.ad-top1,.ad-top2,.ad-topbanner,.ad-topleader,.ad-topright,.ad-total,.ad-total1,.ad-tower,.ad-towers,.ad-txt,.ad-type,.ad-type1,.ad-type10,.ad-type2,.ad-type3,.ad-unit-300,.ad-unit-anchor,.ad-unit-container,.ad-unit-horisontal,.ad-unit-inline-center,.ad-unit-label,.ad-unit-medium-retangle,.ad-unit-mpu,.ad-unit-top,.ad-unit-wrapper,.ad-update,.ad-upper_rec,.ad-us,.ad-v,.ad-v2,.ad-vendor-text-link,.ad-vert,.ad-vertical,.ad-vertical-stack-ad,.ad-vtu,.ad-w300,.ad-wallpaper-container,.ad-wallpaper-panorama-container,.ad-warning,.ad-wgt,.ad-wide-bottom,.ad-widget,.ad-widget-area,.ad-widget-list,.ad-width-300,.ad-width-728,.ad-windowshade-full,.ad-wings__link,.ad-wireframe,.ad-with-background,.ad-with-us,.ad-wrap--leaderboard,.ad-wrap--mrec,.ad-wrapper--articletop,.ad-wrapper--slideshowhalfpage,.ad-wrapper-left,.ad-wrapper__ad-slug,.ad-x10x20x30,.ad-x31-full,.ad-zone,.ad-zone-container,.ad-zone-s-q-l,.ad.super,.ad01,.ad02,.ad03,.ad04,.ad08sky,.ad1-left,.ad1-right,.ad10,.ad100,.ad1000,.ad1001,.ad100x100,.ad120,.ad120_600,.ad120x120,.ad120x240GrayBorder,.ad120x240backgroundGray,.ad120x60,.ad120x600,.ad125,.ad125x125,.ad125x125a,.ad125x125b,.ad140,.ad160 {display: none !important; color: #72da9a !important; background-color: #a0abfd !important;}.ad160600,.ad160_blk,.ad160_l,.ad160_r,.ad160x160,.ad160x600,.ad160x600GrayBorder,.ad160x600box,.ad170x30,.ad18,.ad180,.ad185x100,.ad19,.ad1Image,.ad1_bottom,.ad1_latest,.ad1_top,.ad1b,.ad1left,.ad1x1,.ad200,.ad200x60,.ad220x50,.ad230,.ad233x224,.ad234,.ad234x60,.ad236x62,.ad240,.ad250,.ad250-h1,.ad250-h2,.ad250_250,.ad250c,.ad250wrap,.ad250x250,.ad250x300,.ad260x60,.ad284x134,.ad2content_box,.ad300-hp-top,.ad3001,.ad300250,.ad300Block,.ad300Wrapper,.ad300X250,.ad300_2,.ad300_250,.ad300_bg,.ad300_ver2,.ad300b,.ad300banner,.ad300mrec1,.ad300shows,.ad300top,.ad300w,.ad300x-placeholder,.ad300x100,.ad300x111,.ad300x120,.ad300x150,.ad300x250,.ad300x250-1,.ad300x250-2,.ad300x250-home,.ad300x250-hp-features,.ad300x250-inline,.ad300x250-stacked,.ad300x2501,.ad300x250GrayBorder,.ad300x250Module,.ad300x250Right,.ad300x250Top,.ad300x250_box,.ad300x250_container,.ad300x250a,.ad300x250b,.ad300x250box,.ad300x250box2,.ad300x250flex,.ad300x250s,.ad300x40,.ad300x50-right,.ad300x600,.ad300x77,.ad300x90,.ad310,.ad315,.ad320x250,.ad336,.ad336_b,.ad336x250,.ad336x280,.ad336x362,.ad343x290,.ad350,.ad350r,.ad360,.ad400,.ad400right,.ad400x40,.ad450,.ad468_60,.ad468x60,.ad468x60Wrap,.ad468x60_main,.ad470x60,.ad530,.ad540x90,.ad590,.ad590x90,.ad5_container,.ad600,.ad612x80,.ad620x70,.ad626X35,.ad640x480,.ad640x60,.ad644,.ad650x140,.ad652,.ad670x83,.ad72890,.ad728By90,.ad728_90,.ad728_blk,.ad728_cont,.ad728_wrap,.ad728cont,.ad728h,.ad728x90,.ad728x90-1,.ad728x90-2,.ad728x90-main_wrap,.ad728x90WithLabel,.ad728x90_2,.ad728x90_container,.ad728x90_wrap,.ad728x90box,.ad728x90btf,.ad728x90container,.ad768x90,.ad90x780,.ad940x30,.ad954x60,.ad960,.ad960x185,.ad960x90,.ad970x30,.ad970x90,.ad980,.ad980x120,.ad980x50box,.ad987,.adAgate,.adAlert,.adAlone300,.adArea,.adArea674x60,.adAreaLC,.adArticleBanner,.adArticleBody,.adArticleRecommend,.adArticleSidetile,.adArticleTopText,.adAuto,.adBGcolor,.adBan,.adBanner,.adBanner300x250,.adBanner728x90,.adBannerTyp1,.adBannerTypSortableList,.adBannerTypW300,.adBarCenter,.adBarLeft,.adBarRight,.adBelt,.adBgBottom,.adBgClick,.adBgMId,.adBgTop,.adBigBoxFirst,.adBigBoxSecond,.adBigBoxThird,.adBillboard,.adBkgd,.adBlock-300-250,.adBlock160x600Spot1,.adBlock728,.adBlockBottom,.adBlockBottomBreak,.adBlockNext,.adBlockSpacer,.adBlockSpot,.adBlock_1,.adBlock_14,.adBlock_15,.adBlock_17,.adBlock_2,.adBlock_3,.adBlock_6,.adBlock_8,.adBlock_9,.adBodyBlockBottom,.adBorder,.adBorders,.adBottomLink,.adBottomboxright,.adBox-mr,.adBox1,.adBox2,.adBox230X96,.adBox250,.adBox3b,.adBox5,.adBox6,.adBox728,.adBox728X90,.adBox728X90_header,.adBoxBody,.adBoxBorder,.adBoxContainer,.adBoxContent,.adBoxFooter,.adBoxHeader,.adBoxInBignews,.adBoxSidebar,.adBoxSingle,.adBoxTitle,.adBox_1,.adBox_3,.adBrandpanel,.adBtm,.adBuyRight,.adBwrap,.adCMRight,.adCMSlide,.adCall,.adCaptionText,.adCell,.adCenter,.adCenterAd,.adCentered,.adCentertile,.adChoice,.adChoiceLogo,.adClm,.adClose,.adCode,.adColBgBottom,.adColumn,.adColumnLeft,.adComponent,.adCont,.adContRight,.adContTop,.adContainer1,.adContainerRectangle,.adContainerSide,.adContainer_125x125,.adContainer_728x90,.adContainerg6,.adContentAd,.adContour,.adCopy,.adCreative,.adCs,.adCube,.adDefRect,.adDialog,.adDingT,.adDivSmall,.adEmployment,.adFender3,.adFooterLinks,.adFrameContainer,.adFrames,.adFtr,.adFull,.adFullWidth,.adFullWidthBottom,.adFullWidthMiddle,.adGlobalHeader,.adGogleBox,.adGoogle,.adGroup,.adHeaderAdbanner,.adHeaderText,.adHeadlineSummary,.adHed,.adHolder2,.adHome300x250,.adHorisontal,.adHorisontalNoBorder,.adHorizontalTextAlt,.adHplaceholder,.adHz,.adIMm,.adIframe,.adIframeCount,.adImgIM,.adInArticle,.adInNews,.adInfoLargeLeaderboard,.adInner,.adInnerLeftBottom,.adInteractive,.adIsland,.adLabel,.adLabel160x600,.adLabel300x250,.adLabelLine,.adLabels,.adLargeRec,.adLargeRect,.adLat,.adLeader,.adLeaderForum,.adLeaderboard,.adLeaderboardAdContainer,.adLeft,.adLine,.adLine300x100,.adLine300x250,.adLine300x600,.adLinkCnt,.adListB,.adLoaded,.adLoader,.adLocal,.adLocation,.adMPU,.adMPUHome,.adMarker,.adMarkerBlock,.adMastheadLeft,.adMastheadRight,.adMedRectBox,.adMedRectBoxLeft,.adMediaMiddle,.adMediumRectangle,.adMegaBoard,.adMeldGuts,.adMiniTower,.adMinisLR,.adMkt2Colw,.adModule300,.adModuleAd,.adModule_square2,.adMpu,.adMpuHolder,.adMrginBottom,.adNarrow,.adNetPromo,.adNewsChannel,.adNoBorder,.adNoOutline,.adNone,.adNote,.adNotice,.adNotice90,.adNoticeOut,.adNotification,.adObj,.adOne,.adOuterContainer,.adPageBorderL,.adPageBorderR,.adPanelContent,.adPlaceholder,.adPlaceholder35,.adPlaceholder54,.adPlaceholder_foot,.adPosition,.adRecommend,.adRecommendRight,.adRect,.adRectangle,.adRectangleUnit,.adRegionSelector,.adRemove,.adReportsLink,.adResponsive,.adResults,.adRightSide,.adRow,.adRowTopWrapper,.adSKY,.adSTHomePage,.adSection,.adSection_rt,.adSelfServiceAdvertiseLink,.adSenceImagePush,.adSense,.adSepDiv,.adServer,.adSeven,.adSide,.adSide203,.adSide230,.adSidebarButtons,.adSidetileplus,.adSize_MedRec,.adSkin,.adSkinLayerConfig,.adSky,.adSky600,.adSkyOrMpu,.adSkyscaper,.adSkyscraper,.adSkyscraperHolder,.adSlice,.adSlide,.adSlot,.adSlotContainer,.adSlug,.adSpBelow,.adSpace300x250,.adSpace950x90,.adSpacer,.adSplash,.adSponsor,.adSponsorText,.adSpot-brought,.adSpot-mrec,.adSpot-searchAd,.adSpot-textBox,.adSpot-textBoxGraphicRight,.adSpot-twin,.adSpotIsland,.adSquare,.adStatementText,.adStyle,.adStyle1,.adSub,.adSubColPod,.adSummary,.adSuperboard,.adSupertower,.adTD,.adTXTnew,.adTab,.adTag,.adTag-wrap,.adTextPmpt,.adTicker,.adTile,.adTileWrap,.adTiler,.adTitleR,.adTop,.adTopBanner_nomobile,.adTopBk,.adTopLeft,.adTopLink,.adTopRight,.adTopboxright,.adTout,.adTower,.adTwo,.adTxt,.adType2,.adUnit,.adUnitHorz,.adUnitVert,.adUnitVert_noImage,.adVar,.adVertical,.adVideo,.adVideo2,.adVl,.adVplaceholder,.adWarning,.adWebBoard,.adWideSkyscraper,.adWideSkyscraperRight,.adWidgetBlock,.adWidgetSponsor,.adWithTab,.adWord,.adWrapLg,.adWrapper,.adZone,.adZoneRight,.ad_0,.ad_1000x90,.ad_100x100,.ad_1200,.ad_120x60,.ad_120x600,.ad_120x90,.ad_125,.ad_130x90,.ad_150x150,.ad_160_600,.ad_180x150,.ad_1day9,.ad_200,.ad_200x200,.ad_234x60,.ad_240,.ad_240x400,.ad_242_90_top,.ad_250,.ad_250x200,.ad_250x250,.ad_250x250_w,.ad_300,.ad_300250,.ad_300Home,.ad_300Side,.ad_300_120,.ad_300_250,.ad_300_250_1,.ad_300_250_2,.ad_300_250_cpv,.ad_300_250_wrapper,.ad_300_600,.ad_300s,.ad_300x100,.ad_300x240,.ad_300x250,.ad_300x250_box_right,.ad_300x250_live,.ad_300x50,.ad_300x500,.ad_300x60,.ad_300x600,.ad_320x250_async,.ad_320x360,.ad_326x260,.ad_330x110,.ad_336,.ad_336_gr_white,.ad_336x280,.ad_336x90,.ad_338_282,.ad_350x100,.ad_350x250,.ad_4,.ad_400x200,.ad_468,.ad_468x60,.ad_4_row,.ad_5,.ad_600,.ad_630x130,.ad_640,.ad_640x90,.ad_680x15,.ad_728,.ad_72890,.ad_72890_box,.ad_728Home,.ad_728_90,.ad_728_90_1,.ad_728_90_top,.ad_728_90b,.ad_728_in,.ad_728_top,.ad_728_unit,.ad_728_v2,.ad_728x90-1,.ad_728x90-2,.ad_728x90_top,.ad_728x90b,.ad_88x31,.ad_925x90,.ad_954-60,.ad_970_2,.ad_970x90_prog,.ad_980x260,.ad_CustomAd,.ad_Flex,.ad_Left,.ad__caption,.ad__centered,.ad__container,.ad__in-loop,.ad__in-loop--desktop,.ad__inline,.ad__label,.ad__leaderboard,.ad__mpu,.ad__placeholder,.ad__rectangle,.ad__width-by-height,.ad__wrapper,.ad_a,.ad_adInfo,.ad_ad_160,.ad_ad_300,.ad_adblade,.ad_adsense_spacer,.ad_adv,.ad_amazon,.ad_area,.ad_area_two,.ad_article_top_left,.ad_atf_300x250,.ad_atf_728x90,.ad_avu_300x250,.ad_back,.ad_background,.ad_bank_wrapper,.ad_banner,.ad_banner2,.ad_banner_2,.ad_banner_234,.ad_banner_250x250,.ad_banner_468,.ad_banner_728x90_inner,.ad_banner_border,.ad_banner_div,.ad_bar,.ad_below_content,.ad_belowmenu,.ad_bg,.ad_bg_300x250,.ad_bgskin,.ad_big_banner,.ad_bigbox,.ad_billboard,.ad_biz,.ad_blk,.ad_block_1,.ad_block_2,.ad_block_300x250,.ad_block_336,.ad_block_338,.ad_block__336_d1,.ad_block_leader2,.ad_bn,.ad_border,.ad_botbanner,.ad_bottom_728,.ad_bottom_leaderboard,.ad_bottom_left,.ad_bottom_mpu,.ad_bottom_space,.ad_bottomline,.ad_box,.ad_box1,.ad_box2,.ad_box300x250,.ad_box_2,.ad_box_ad,.ad_box_div,.ad_box_new,.ad_box_righ,.ad_box_right_120,.ad_box_spacer,.ad_box_title,.ad_box_top,.ad_boxright1,.ad_break,.ad_break_container,.ad_btf,.ad_btf_300x250,.ad_btf_728x90,.ad_buttom_banner,.ad_buttons_300,.ad_buttons_320,.ad_callout,.ad_caption,.ad_center,.ad_center_bottom,.ad_centered,.ad_cheat,.ad_choice,.ad_choices,.ad_cl,.ad_claim,.ad_click,.ad_code,.ad_col,.ad_col_a,.ad_column,.ad_column_box,.ad_column_hl,.ad_common,.ad_cont,.ad_cont_footer,.ad_contain,.ad_container_300x250,.ad_container_5,.ad_container_6,.ad_container_7,.ad_container_728x90,.ad_container_8,.ad_container_9,.ad_container__sidebar,.ad_container__top,.ad_container_body,.ad_content,.ad_content_wide,.ad_contents,.ad_custombanner,.ad_db,.ad_default,.ad_deferrable,.ad_descriptor,.ad_desktop,.ad_disclaimer,.ad_div_banner,.ad_embed,.ad_eniro,.ad_entry_title_under,.ad_entrylists_end,.ad_event_mast_wrapper,.ad_external,.ad_eyebrow,.ad_feature,.ad_filler,.ad_flash,.ad_flat-boxright10,.ad_flat-boxright6,.ad_flat-boxright9,.ad_float,.ad_floating_box,.ad_font,.ad_footer,.ad_footer_super_banner,.ad_for_layout,.ad_frame,.ad_framed,.ad_front_promo,.ad_full_click,.ad_fullwidth,.ad_gal,.ad_gpt,.ad_grid,.ad_gutter_top,.ad_half_page,.ad_halfpage,.ad_hat_728,.ad_hat_banner_300,.ad_hat_top,.ad_head,.ad_head_wide,.ad_header_lb,.ad_header_left,.ad_header_noad,.ad_heading,.ad_headline,.ad_help_link,.ad_holder,.ad_home_block,.ad_honcode_label,.ad_horizontal_marker,.ad_hover_href,.ad_hpm,.ad_hr,.ad_hyper_wrap,.ad_identifier,.ad_iframe2,.ad_ifrwrap,.ad_image,.ad_image_container,.ad_imgae_150,.ad_in_column,.ad_in_head,.ad_index02,.ad_indicator,.ad_info_block,.ad_inline,.ad_inset,.ad_island,.ad_island2_spacer,.ad_island_feedback,.ad_island_spacer,.ad_isolation,.ad_jnaught,.ad_js_deal_top,.ad_keywords_bot,.ad_keywords_bot_r,.ad_l,.ad_label,.ad_label1,.ad_label2a,.ad_label_centered,.ad_label_long,.ad_label_method,.ad_label_top,.ad_large,.ad_launchpad,.ad_leader,.ad_leader_bottom,.ad_leader_plus_top,.ad_leaderboard_atf,.ad_leaderboard_top,.ad_left_cell,.ad_left_column,.ad_lft,.ad_line,.ad_line2,.ad_link,.ad_link1,.ad_link_468,.ad_link_area,.ad_link_label,.ad_link_label_vert,.ad_links,.ad_linkunit,.ad_lnks,.ad_loc,.ad_long,.ad_lrec,.ad_lt,.ad_main,.ad_maintopad,.ad_margin,.ad_masthead,.ad_med,.ad_medium_rectangle,.ad_medrec,.ad_medrect,.ad_megabanner,.ad_message,.ad_microlen,.ad_middle_banner,.ad_middle_hub_page,.ad_mobile,.ad_mod,.ad_module,.ad_movFocus,.ad_mp,.ad_mpu,.ad_mpu_top,.ad_mr,.ad_mrec,.ad_mrec_title_article,.ad_mrect,.ad_mrectangle,.ad_msg,.ad_new_box01,.ad_new_box02,.ad_news,.ad_newsstream,.ad_no_border,.ad_note,.ad_notice,.ad_nsRT_300_250,.ad_nsbd_300_250,.ad_on_article,.ad_one,.ad_overlays,.ad_p360,.ad_pagebody,.ad_panel,.ad_panel_1,.ad_panel_2,.ad_partner,.ad_partners,.ad_perma-panorama,.ad_pic,.ad_placeholder,.ad_placement,.ad_placement_300x250,.ad_placement_small,.ad_plane_336,.ad_plus,.ad_policy_link_br,.ad_position,.ad_post,.ad_posttop,.ad_power,.ad_primary,.ad_promo1,.ad_promo_spacer,.ad_r,.ad_r1_menu,.ad_rakuten,.ad_rakuten_wrapper,.ad_rec,.ad_rect,.ad_rect_contr,.ad_rectangle,.ad_rectangle_300_250,.ad_rectangle_medium,.ad_rectangular,.ad_regular1,.ad_regular2,.ad_regular3,.ad_reminder,.ad_report_btn,.ad_rightSky,.ad_right_cell,.ad_right_col,.ad_right_column,.ad_right_column160,.ad_rightside,.ad_row,.ad_row_bottom_item,.ad_rtg300,.ad_secondary,.ad_section_300x250,.ad_section_728x90,.ad_segment,.ad_sense_01,.ad_sense_footer_container,.ad_share_box,.ad_shuffling_text,.ad_side,.ad_side_rectangle_banner,.ad_sidebar,.ad_sidebar_bigbox,.ad_size_160x600,.ad_sky,.ad_skyscpr,.ad_skyscraper,.ad_skyscrapper,.ad_slider_out,.ad_slot,.ad_slot_right,.ad_slug,.ad_slug_font,.ad_slug_healthgrades,.ad_small,.ad_sonar,.ad_space_300_250,.ad_space_730,.ad_space_holder,.ad_space_in,.ad_space_rgt,.ad_space_w300_h250,.ad_spacer,.ad_special_badge,.ad_spons_box,.ad_sponsor,.ad_sponsor_fp,.ad_sponsoredlinks,.ad_sponsoredsection,.ad_spot_b,.ad_spot_c,.ad_square,.ad_square_r,.ad_square_r_top,.ad_square_top,.ad_station,.ad_story_island,.ad_stream,.ad_stream_hd,.ad_strip_noline,.ad_sub,.ad_supersize,.ad_swf,.ad_tag,.ad_tag_middle,.ad_text_link,.ad_text_links,.ad_text_vertical,.ad_text_w,.ad_textlink_box,.ad_thumbnail_header,.ad_title_small,.ad_tlb,.ad_top,.ad_top1,.ad_top_1,.ad_top_2,.ad_top_3,.ad_top_banner,.ad_top_leaderboard,.ad_top_left,.ad_top_mpu,.ad_top_right,.ad_topic_content,.ad_topright,.ad_topshop,.ad_tower,.ad_trailer_header,.ad_ttl,.ad_txt2,.ad_type_1,.ad_type_adsense,.ad_type_dfp,.ad_under,.ad_under_royal_slider,.ad_unit,.ad_unit_300_x_250,.ad_unit_rail,.ad_url,.ad_v2,.ad_v3,.ad_v300,.ad_vertisement,.ad_w300i,.ad_w_us_a300,.ad_warn,.ad_warning,.ad_wid300,.ad_wide,.ad_widget,.ad_widget_200_100,.ad_widget_200_200,.ad_word,.ad_wrapper_false,.ad_wrapper_fixed {display: none !important; color: #72da9a !important; background-color: #a0abfd !important;}.ad_wrapper_top,.ad_wrp,.ad_xrail_top,.ad_zone,.adadded,.adamazon,.adarea-long,.adb-728x90,.adback,.adbadge,.adban-hold-narrow,.adbanner-300-250,.adbanner-bottom,.adbanner1,.adbanner2nd,.adbannerbox,.adbanneriframe,.adbannerright,.adbannertop,.adbase,.adbbox,.adbckgrnd,.adbetween,.adbkgnd,.adblade,.adblade-container,.adbladeimg,.adblk,.adblock-240-400,.adblock-300-300,.adblock-600-120,.adblock-bottom,.adblock-header,.adblock-header1,.adblock-main,.adblock-popup,.adblock-top,.adblock-top-left,.adblock-wide,.adblock300,.adblock300250,.adblock300x250Spot1,.adblock728x90,.adblock_noborder,.adblock_primary,.adblocks-topright,.adboard,.adborder,.adborderbottom,.adbordertop,.adbot,.adbot_postbit,.adbot_showthread,.adbottomright,.adbox-300x250,.adbox-468x60,.adbox-box,.adbox-outer,.adbox-rectangle,.adbox-sidebar,.adbox-slider,.adbox-title,.adbox-topbanner,.adbox-wrapper,.adbox1,.adbox160,.adbox2,.adbox300,.adbox300x250,.adbox336,.adbox600,.adbox728,.adboxVert,.adbox_300x600,.adbox_366x280,.adbox_468X60,.adbox_border,.adbox_bottom,.adbox_br,.adbox_cont,.adbox_largerect,.adbox_left,.adboxbg,.adboxbot,.adboxclass,.adboxcontent,.adboxcontentsum,.adboxes,.adboxesrow,.adboxlong,.adboxo,.adbreak,.adbrite2,.adbrite_post,.adbucks,.adbuddy-protected,.adbug,.adbutton-block,.adbuttons,.adbygoogle,.adcard,.adcasing,.adcenter,.adchange,.adchoices,.adchoices-link,.adclass,.adcode,.adcode2,.adcode_container,.adcodetop,.adcol1,.adcol2,.adcolumn_wrapper,.adcomment,.adcontainer300x250l,.adcontainer300x250r,.adcontent_box,.adcopy,.adctr,.add-column2,.add-header-area,.add-sidebar,.add300,.add300top,.add300x250,.add768,.addResources,.add_300_250,.add_300x250,.add_728x90_teckpage,.add_baner,.add_topbanner,.addarea,.addarearight,.addbanner,.addboxRight,.addisclaimer,.adds2,.adds300x250,.adds620x90,.addtitle,.addvert,.addwide,.adengageadzone,.adenquire,.adexpl,.adf_tisers,.adfbox,.adfeedback,.adfeeds,.adfieldbg,.adfix,.adfix-300x250,.adflag,.adflexi,.adfliction,.adfloatleft,.adfloatright,.adfoot,.adfootbox,.adfooter,.adformobile,.adframe2,.adframe_banner,.adframe_rectangle,.adfront,.adfront-head,.adg_cell,.adg_row,.adg_table,.adg_table_cell,.adg_table_row,.adgear,.adgear-bb,.adgear_header,.adgeletti-ad-div,.adgoogle_block,.adhalfhome,.adhead,.adhead_h,.adhead_h_wide,.adheader100,.adheader401,.adheader416,.adherebox,.adhesion-block,.adhi,.adhide,.adhint,.adholder-300,.adholderban,.adhoriz,.adhref_box_ads,.adical_contentad,.adiframe,.adiframe250x250,.adinjwidget,.adinner,.adinpost,.adinsert,.adinsert-bdr,.adinsert160,.adinside,.adintext,.adintext-unten,.adintro,.adits,.adjimage2,.adjlink,.adkicker,.adkit-advert,.adkit-lb-footer,.adkit_free_html,.adl125,.adlabel-horz,.adlabel-vert,.adlabel1,.adlabel2,.adlabel3,.adlabelleft,.adlarge,.adlarger,.adlayer,.adleader,.adleft1,.adlgbox,.adline,.adlinkdiv,.adlinks,.adlinks-class,.adlist1,.adlist2,.adlist__item--midstream,.adlnklst,.adlsot,.adman,.admarker,.admaster,.admediumred,.admedrec,.admeldBoxAd,.admessage,.admiddlesidebar,.administer-ad,.admods,.admodule,.admoduleB,.admpu,.admpu-small,.admsg__mrec,.admz,.adnSpot,.adname,.adnation-banner,.adnet120,.adnet_area,.adnl_zone,.adnotecenter,.adnotice,.adocean728x90,.adonmedianama,.adops,.adp-AdPrefix,.adpacks,.adpacks_content,.adpad300,.adpad300spacer,.adpadding,.adpadtwo_div,.adpane,.adpic,.adplace,.adplace_center,.adplacement,.adplate-background,.adpod,.adpos-19,.adpos-20,.adpos-25,.adpos-26,.adpos-8,.adpost,.adproxy,.adrec,.adrechts,.adrecom-pic,.adrect,.adrectangle,.adrectwrapper,.adright300,.adrightsm,.adrighttop,.adriverBanner,.adroot,.adrotate_top_banner,.adrotate_widget,.adrotate_widgets,.adrow,.adrow-post,.adrow1box1,.adrow1box3,.adrow1box4,.adrule,.ads--sidebar,.ads--square,.ads--top,.ads-120x600,.ads-125,.ads-125-widget,.ads-160-head,.ads-160x600,.ads-160x600-outer,.ads-166-70,.ads-180-65,.ads-220x90,.ads-250,.ads-290,.ads-300,.ads-300-box,.ads-300x250,.ads-300x300,.ads-300x80,.ads-301,.ads-336-197-qu,.ads-468,.ads-468x60-bordered,.ads-560-65,.ads-600-box,.ads-728-90,.ads-728by90,.ads-728x90,.ads-728x90-wrap,.ads-729,.ads-above-comments,.ads-ad,.ads-ads-top,.ads-advertorial,.ads-articlebottom,.ads-banner,.ads-banner-bottom,.ads-banner-js,.ads-banner-middle,.ads-banner-top-right,.ads-beforecontent,.ads-below-content,.ads-below-home,.ads-bigbox,.ads-block,.ads-block-bottom-wrap,.ads-block-link-000,.ads-block-link-text,.ads-block-marketplace-container,.ads-block-menu-center,.ads-border,.ads-bottom,.ads-bottom-block,.ads-bottom-content,.ads-bottom-left,.ads-bottom-right,.ads-box,.ads-box-border,.ads-box-header,.ads-box-header-marketplace-right,.ads-box-header-pb,.ads-box-header-ws,.ads-box-header-wsl,.ads-btm,.ads-by,.ads-by-google-0,.ads-callback,.ads-card,.ads-cars-larger,.ads-cars-top2,.ads-categories-bsa,.ads-code,.ads-container-mediumrectangle,.ads-content,.ads-custom,.ads-div,.ads-divider,.ads-express,.ads-favicon,.ads-feed,.ads-fieldset,.ads-fif,.ads-flow,.ads-footer,.ads-full,.ads-google,.ads-half,.ads-header-left,.ads-header-right,.ads-here,.ads-home-top-buttons-wrap,.ads-horizontal,.ads-horizontal-banner,.ads-inarticle,.ads-inner,.ads-label,.ads-large,.ads-leaderboard,.ads-leaderboard-border,.ads-leaderboard-panel,.ads-left,.ads-line,.ads-link,.ads-links-general,.ads-long,.ads-main,.ads-margin,.ads-medium-rect,.ads-middle,.ads-middle-top,.ads-mini,.ads-module,.ads-movie,.ads-mpu,.ads-narrow,.ads-native-wrapper,.ads-note,.ads-outer,.ads-player-03,.ads-popup-corner,.ads-post,.ads-post-closing,.ads-post-full,.ads-profile,.ads-rectangle,.ads-right-min,.ads-rotate,.ads-scroller-box,.ads-side,.ads-sidebar,.ads-sidebar-boxad,.ads-single,.ads-site,.ads-sky,.ads-small,.ads-smartphone,.ads-sponsors,.ads-sponsors-125-left,.ads-sponsors-125-right,.ads-square,.ads-squares,.ads-static-video-overlay,.ads-story,.ads-stripe,.ads-styled,.ads-superbanner,.ads-text,.ads-tittle,.ads-top-content,.ads-top-left,.ads-top-right,.ads-top-spacer,.ads-txt,.ads-ul,.ads-wide,.ads-widget,.ads-widget-content,.ads-widget-partner-gallery,.ads-widget-sponsor-gallery,.ads-wrap,.ads-wrapper,.ads-zone,.ads01,.ads02,.ads03,.ads04,.ads05,.ads06,.ads07,.ads08,.ads09,.ads10,.ads1000x100,.ads11,.ads12,.ads120_600,.ads120_600-widget,.ads120_80,.ads120x,.ads123,.ads125,.ads125-widget,.ads13,.ads14,.ads15,.ads160,.ads160-600,.ads160_600-widget,.ads160x600,.ads180x150,.ads1_250,.ads1_label,.ads1_sidebar,.ads24Block,.ads250,.ads250-250,.ads250_96,.ads3,.ads300,.ads300-200,.ads300-250,.ads300250,.ads300_250,.ads300_250-widget,.ads300_600-widget,.ads300box,.ads300n,.ads300nb,.ads300x,.ads300x100,.ads300x250,.ads300x250-thumb,.ads315,.ads320x100,.ads324-wrapper,.ads324-wrapper2ads,.ads336_280,.ads336x280,.ads4,.ads460,.ads460_home,.ads468,.ads468x60,.ads486x100,.ads486x100-1,.ads598x98,.ads5blocks,.ads600,.ads667x100,.ads720x90,.ads728,.ads728_90,.ads728x90,.ads728x90-1,.ads728x90-thumb,.ads970,.adsArea,.adsBelowHeadingNormal,.adsBot,.adsBottom,.adsBox,.adsBoxTop,.adsByTJ,.adsCap,.adsCategoryIcon,.adsCategoryTitleLink,.adsCell,.adsCombo02_1,.adsCombo02_2,.adsCombo02_3,.adsCombo02_4,.adsCombo02_5,.adsCombo02_6,.adsCombo02_7,.adsConfig,.adsCont,.adsDef,.adsDetailsPage,.adsDisclaimer,.adsDiv,.adsFixed,.adsFull,.adsHeader,.adsHeaderFlog,.adsHeading,.adsImages,.adsInner,.adsInsideResults_v3,.adsLabel,.adsLibrary,.adsLine,.adsMPU,.adsMag,.adsMiddle,.adsOuter,.adsOverPrimary,.adsPlaceHolder,.adsRectangleMedium,.adsRight,.adsRow,.adsSpace300x250,.adsSpace300x600,.adsSpace650x100,.adsSpacing,.adsTableBlox,.adsTag,.adsText,.adsTextHouse,.adsThema,.adsTop,.adsTopBanner,.adsTopCont,.adsTower2,.adsTowerWrap,.adsTxt,.adsWithUs,.adsWrap,.adsYN,.ads_1,.ads_120x60,.ads_120x60_index,.ads_125_square,.ads_160,.ads_180,.ads_2,.ads_3,.ads_300,.ads_300250_wrapper,.ads_300x100,.ads_300x239,.ads_300x250,.ads_300x600,.ads_305,.ads_320,.ads_320_100,.ads_330,.ads_337x280,.ads_350,.ads_3col,.ads_4,.ads_460up,.ads_468,.ads_468x60,.ads_672,.ads_728,.ads_728x90,.ads_ad_box,.ads_ad_box2,.ads_admeld,.ads_adsense1,.ads_after,.ads_after_more,.ads_amazon,.ads_amazon_outer,.ads_area,.ads_article,.ads_banner,.ads_banner_between,.ads_banner_between_string,.ads_banniere,.ads_bar,.ads_before,.ads_bg,.ads_big,.ads_big-half,.ads_big_right,.ads_big_right_code,.ads_bigrec,.ads_block,.ads_block250,.ads_border,.ads_box,.ads_box_headline,.ads_brace,.ads_by,.ads_by_tico,.ads_catDivRight,.ads_center,.ads_code,.ads_column,.ads_container,.ads_container_top,.ads_content,.ads_der,.ads_disc_anchor,.ads_disc_leader,.ads_disc_lwr_square,.ads_disc_rectangle,.ads_disc_skyscraper,.ads_disc_square,.ads_entrymore,.ads_folat_left,.ads_foot,.ads_footer,.ads_footerad,.ads_frame_wrapper,.ads_google,.ads_h,.ads_header,.ads_header_bottom,.ads_holder,.ads_horizontal,.ads_infoBtns,.ads_inline_640,.ads_inside2,.ads_item,.ads_label,.ads_layout_sky,.ads_lb,.ads_leader,.ads_leaderboard,.ads_left,.ads_linkb_728,.ads_loc_bottom,.ads_loc_side,.ads_lr_wrapper,.ads_lr_wrapper2,.ads_main,.ads_main_hp,.ads_medium,.ads_medium_rectangle,.ads_medrect,.ads_middle,.ads_middle_container,.ads_mpu,.ads_mpu_small,.ads_obrazek,.ads_outer,.ads_outline,.ads_post,.ads_post_end,.ads_post_end_code,.ads_post_start,.ads_post_start_code,.ads_qc1,.ads_qc2,.ads_r,.ads_rectangle,.ads_rem,.ads_remove,.ads_right,.ads_rightbar_top,.ads_sc_bl,.ads_sc_bl_i,.ads_sc_ls_i,.ads_sc_tb,.ads_sc_tl_i,.ads_sep,.ads_show_if,.ads_side,.ads_sideba,.ads_sidebar,.ads_sidebar_360,.ads_sidebar_360_b,.ads_singlepost,.ads_slice,.ads_small_rectangle,.ads_space_long,.ads_spacer,.ads_square,.ads_takeover,.ads_text,.ads_ticker_main,.ads_title,.ads_top_banner,.ads_top_both,.ads_top_promo,.ads_topbanner,.ads_topic_300,.ads_topic_after,.ads_topleft,.ads_topright,.ads_tower,.ads_tr,.ads_under_fileinfo,.ads_under_player,.ads_up,.ads_up_big2,.ads_upper_right_wrap,.ads_verticalSpace,.ads_vtlLink,.ads_vtlList,.ads_wide,.ads_widesky,.ads_without_height,.ads_wrapperads_top,.adsafp,.adsanity-group,.adsanity-single,.adsarea,.adsbantop,.adsbar,.adsbg300,.adsblock,.adsblockvert,.adsbnr,.adsbody,.adsborder,.adsboth,.adsbottom,.adsbox-square,.adsboxBtn,.adsbox_300x250,.adsboxitem,.adsbttmpg,.adsbycircumventioncentral,.adsbygoogle-box,.adsbygoogle2,.adsbysinodia,.adsbyyahoo,.adsc,.adscaleAdvert,.adscaleP6_canvas,.adscaleTop,.adscatalog,.adsclick,.adscontent250,.adscontentcenter,.adscreen,.adsd_shift100,.adsdisplaygames,.adsdiv,.adsection_a2,.adsection_c2,.adsection_c3,.adsence-domain,.adsens,.adsense-250,.adsense-300x256-widget,.adsense-300x256-widget-2,.adsense-336,.adsense-468,.adsense-ad,.adsense-ads,.adsense-afterpost,.adsense-attribution,.adsense-block,.adsense-category,.adsense-category-bottom,.adsense-center,.adsense-code,.adsense-container,.adsense-content,.adsense-div,.adsense-float,.adsense-googleAds,.adsense-header,.adsense-heading,.adsense-image-detail,.adsense-left,.adsense-links,.adsense-links2,.adsense-midtext,.adsense-mod-border,.adsense-module,.adsense-overlay,.adsense-post,.adsense-review,.adsense-reviews-float,.adsense-right,.adsense-slot,.adsense-square,.adsense-sticky-slide,.adsense-title,.adsense-top,.adsense-top-bar,.adsense-topics-detail,.adsense-unit,.adsense-wide-background,.adsense-widget,.adsense-widget-horizontal,.adsense1,.adsense160x600,.adsense250,.adsense3,.adsense300,.adsense300_top,.adsense728,.adsense728x90,.adsenseAds,.adsenseBlock,.adsenseContainer,.adsenseGreenBox,.adsenseInPost,.adsenseLargeRectangle,.adsenseList,.adsenseRow,.adsenseSky,.adsenseWrapper,.adsense_200,.adsense_200x200,.adsense_336_280,.adsense_728x15_center,.adsense_afc_related_art,.adsense_bdc_v2,.adsense_block,.adsense_bottom,.adsense_box01,.adsense_container,.adsense_div_wrapper,.adsense_full_width,.adsense_leader,.adsense_left_lu,.adsense_mainbox01,.adsense_managed,.adsense_managed_,.adsense_media,.adsense_menu,.adsense_mpu,.adsense_rectangle,.adsense_results,.adsense_right,.adsense_sidebar,.adsense_single,.adsense_small_square,.adsense_top,.adsense_top_ad,.adsense_top_lu,.adsense_unit,.adsense_x88,.adsensebig,.adsenseblock_bottom,.adsenseblock_top,.adsensefloat,.adsenseformat,.adsenseframe,.adsenseleaderboard,.adsenselr,.adsensem_widget,.adsensemainpage,.adsensesky,.adsensesq,.adsensex336,.adsenvelope,.adsep,.adseparator,.adserve_728,.adserver_zone,.adserverad,.adserving,.adset,.adsforums,.adsghori,.adsgrd,.adsgvert,.adsh,.adshl,.adshowcase,.adshp,.adside-box-index,.adside-box-single,.adsidebar,.adsidebox,.adsider,.adsincs2,.adsinfo,.adsingle,.adsitem,.adsize728,.adsizer,.adsleaderboard,.adsleaderboardbox,.adsleft,.adsleftblock,.adslibraryArticle,.adslider,.adslink,.adslist,.adslogan,.adslot-banner,.adslot-billboard,.adslot-mpu,.adslot-rectangle,.adslot-widget,.adslot_1,.adslot_300,.adslot_728,.adslot_bot_300x250,.adslot_side1,.adslothead,.adslotleft,.adslotright,.adslug,.adslx-bottom2015,.adslx2015,.adsmall,.adsmaller,.adsmalltext,.adsmanag,.adsmbody,.adsmedrect,.adsmedrectright,.adsmessage,.adsnippet_widget,.adsns,.adsonar-after,.adsonofftrigger,.adsoptimal-slot,.adspace-300x600,.adspace-336x280,.adspace-728x90,.adspace-MR,.adspace-leaderboard,.adspace-mpu,.adspace-widget,.adspace1,.adspace180,.adspace2,.adspace728x90,.adspace_2,.adspace_bottom,.adspace_buysell,.adspace_rotate,.adspace_skyscraper,.adspace_top,.adspacer {display: none !important; color: #72da9a !important; background-color: #a0abfd !important;}.adspan,.adspanel,.adspecial390,.adspeed,.adsplash-160x600,.adsplat,.adsponsor,.adspost,.adspot,.adspot-title,.adspot1,.adspot200x90,.adspot468x60,.adspot728x90,.adspotGrey,.adspot_468x60,.adspot_728x90,.adsrecnode,.adsright,.adsskyscraper,.adssmall,.adssquare,.adssquare2,.adstext,.adstextpad,.adstipt,.adstitle,.adstop,.adstory,.adstrip,.adstxt,.adstyle,.adsupperugo,.adsupperugo_txt,.adswidget,.adswitch,.adsxpls,.adsystem_ad,.adszone,.adt-300x250,.adt-300x600,.adt-728x90,.adtab,.adtag,.adtech,.adtech-ad-widget,.adtech-banner,.adtech-boxad,.adtech_wrapper,.adtext_gray,.adtext_horizontal,.adtext_onwhite,.adtext_vertical,.adtext_white,.adtextleft,.adtextright,.adtexts,.adthx,.adtips,.adtips1,.adtoggle,.adtop-border,.adtops,.adtower,.adtravel,.adtv_300_250,.adtxt,.adtxtlinks,.adult-adv,.adunit,.adunit-300-250,.adunit-active,.adunit-middle,.adunit-parent,.adunit-side,.adunit125,.adunit160,.adunit300x250,.adunit468,.adunit_210x509,.adunit_300x100,.adunit_300x250,.adunit_300x600,.adunit_607x110,.adunit_728x90,.adunit_content,.adunit_footer,.adunit_leaderboard,.adunit_maincol_right,.adunit_rectangle,.adunitfirst,.adunitrd,.adv-160,.adv-200-200,.adv-250-250,.adv-300,.adv-300-1,.adv-300-250,.adv-300x250,.adv-300x250-generic,.adv-336-280,.adv-4,.adv-468-60,.adv-700,.adv-728,.adv-970,.adv-980x60,.adv-ad,.adv-background,.adv-banner,.adv-block,.adv-border,.adv-bottom,.adv-box,.adv-box-wrapper,.adv-click,.adv-comment--opened,.adv-comments,.adv-cont,.adv-cont1,.adv-container,.adv-dvb,.adv-format-1,.adv-google,.adv-halfpage,.adv-home-300x600,.adv-in-body,.adv-inset,.adv-intext,.adv-intext-label,.adv-key,.adv-label,.adv-leaderboard,.adv-leaderboard-banner,.adv-lshaped-wrapper,.adv-mid-rect,.adv-mpu,.adv-mpu-shoulder,.adv-outer,.adv-p,.adv-right,.adv-right-300,.adv-search-ad,.adv-sidebar,.adv-slide-block-wrapper,.adv-square-banner,.adv-squarebox-banner,.adv-teaser-divider,.adv-top,.adv-top-container,.adv-top-page,.adv-under-video,.adv-videoad,.adv-x61,.adv200,.adv200_border,.adv250,.adv300-250,.adv300-250-2,.adv300-70,.adv300left,.adv300x100,.adv300x250,.adv300x70,.adv336,.adv350,.adv460x60,.adv468,.adv468x90,.adv728,.advBottom,.advBottomHome,.advBox,.advDesktop300x250,.advImagesbox,.advLB_PageMiddle,.advLeaderboard,.advSquare,.advText,.advTicker,.advVideobox,.advWrappers,.adv_1,.adv_120,.adv_120_600,.adv_120x240,.adv_120x600,.adv_160_600,.adv_160x600,.adv_2,.adv_250_250,.adv_300_300,.adv_300_top,.adv_300x250,.adv_336_280,.adv_468_60,.adv_630,.adv_728_90,.adv_728x90,.adv_90,.adv_PageTop,.adv__container--300x250,.adv__container--728x90,.adv__text,.adv_aff,.adv_amazon_single,.adv_banner,.adv_banner_hor,.adv_bg,.adv_blocker,.adv_box_narrow,.adv_cnt,.adv_code,.adv_default_box_container,.adv_flash,.adv_floater_left,.adv_floater_right,.adv_headerleft,.adv_headerright,.adv_hed,.adv_here,.adv_in_body_a,.adv_info_text,.adv_leaderboard,.adv_left,.adv_link,.adv_main_middle,.adv_main_middle_wrapper,.adv_main_right_down,.adv_main_right_down_wrapper,.adv_medium_rectangle,.adv_message,.adv_page_blocker_overlay,.adv_panel,.adv_pointer_home,.adv_pointer_section,.adv_right,.adv_sd_dx,.adv_side1,.adv_side2,.adv_sidebar,.adv_sidebar_300x250,.adv_standard_d,.adv_title,.adv_top,.adv_under_menu,.adv_underpost,.adv_x_1,.adv_x_2,.advads-5,.advads_widget,.advart,.advbanner_300x250,.advbanner_300x600,.advbanner_970x90,.advbig,.advbptxt,.adver,.adver-left,.adver-text,.adverTag,.adverTxt,.adver_bot,.adver_cont_below,.adverdown,.adverhrz,.adverserve145,.adverstisement_right,.advert--background,.advert--banner-wrap,.advert--header,.advert--leaderboard,.advert--mpu,.advert--mpu--rhs,.advert--transition,.advert--vc,.advert--vc__wrapper,.advert-100,.advert-120x90,.advert-160x600,.advert-300,.advert-300-side,.advert-300x100-side,.advert-300x250-container,.advert-728,.advert-728-90,.advert-728x90,.advert-760,.advert-arch-top,.advert-article-bottom,.advert-banner,.advert-banner-holder,.advert-bannerad,.advert-bg-250,.advert-bloggrey,.advert-body-not-home,.advert-bot-box,.advert-bronze,.advert-bronze-btm,.advert-btm,.advert-center,.advert-center_468x60,.advert-col,.advert-col-center,.advert-competitions,.advert-content-item,.advert-detail,.advert-featured,.advert-footer,.advert-full-raw,.advert-gold,.advert-group,.advert-head,.advert-header-728,.advert-home-380x120,.advert-iab-300-250,.advert-iab-468-60,.advert-image,.advert-info,.advert-label,.advert-leaderboard,.advert-leaderboard2,.advert-loader,.advert-lower-right,.advert-mini,.advert-mpu,.advert-mrec,.advert-note,.advert-overlay,.advert-pane,.advert-right,.advert-section,.advert-sidebar,.advert-silver,.advert-sky,.advert-skyscraper,.advert-stub,.advert-text,.advert-three,.advert-tile,.advert-title,.advert-top,.advert-top-footer,.advert-txt,.advert-under-hedaer,.advert-unit,.advert-wide,.advert-words,.advert-wrap,.advert-wrap1,.advert-wrap2,.advert-wrapper_rectangle_aside,.advert1,.advert120,.advert1Banner,.advert300,.advert300-home,.advert300x100,.advert300x250,.advert300x300,.advert300x440,.advert300x600,.advert350ih,.advert4,.advert5,.advert728_90,.advert728x90,.advert8,.advertAreaFrame,.advertBanner,.advertBar,.advertBlock,.advertBottom,.advertBox,.advertCaption,.advertCont,.advertContent,.advertDownload,.advertFullBanner,.advertGenerator,.advertHeadline,.advertIslandWrapper,.advertLink1,.advertMiddle,.advertRight,.advertSideBar,.advertSign,.advertSuperBanner,.advertTh,.advertThInnBg,.advertTitleSky,.advertWrapper,.advert_300x250,.advert_336,.advert_468x60,.advert__container,.advert__fullbanner,.advert__leaderboard,.advert__mpu,.advert__tagline,.advert_back_160x600,.advert_back_300x250,.advert_back_300xXXX,.advert_banner,.advert_block,.advert_box,.advert_caption,.advert_cont,.advert_div,.advert_djad,.advert_google_content,.advert_google_title,.advert_header,.advert_home_300,.advert_img,.advert_in_post,.advert_label,.advert_leaderboard,.advert_line,.advert_main,.advert_main_bottom,.advert_mpu,.advert_mpu_body_hdr,.advert_nav,.advert_note,.advert_rectangle_aside,.advert_small,.advert_societe_general,.advert_source,.advert_span,.advert_surr,.advert_top,.advert_txt,.advert_wrapper,.advertasingtxt,.advertbar,.advertheader-red,.adverthome,.advertis-left,.advertis-right,.advertise-box,.advertise-here,.advertise-homestrip,.advertise-horz,.advertise-info,.advertise-inquiry,.advertise-leaderboard,.advertise-link,.advertise-link-post-bottom,.advertise-list,.advertise-small,.advertise-square,.advertise-top,.advertise-vert,.advertiseBlack,.advertiseContainer,.advertiseHere,.advertiseLabel234x60,.advertiseLabel300x250,.advertiseText,.advertise_ads,.advertise_box,.advertise_box1,.advertise_box4,.advertise_here,.advertise_link,.advertise_link_sidebar,.advertise_links,.advertise_sec,.advertise_txt,.advertise_verRight,.advertisebtn,.advertisedBy,.advertisement-160-600,.advertisement-2,.advertisement-234-60,.advertisement-250,.advertisement-300,.advertisement-300-250,.advertisement-300x250,.advertisement-300x600,.advertisement-728-90,.advertisement-728x90,.advertisement-750-60,.advertisement-BottomRight,.advertisement-after,.advertisement-amazon-banner,.advertisement-background,.advertisement-banner,.advertisement-before,.advertisement-bkg,.advertisement-bottom,.advertisement-caption,.advertisement-cell,.advertisement-comment,.advertisement-container,.advertisement-content,.advertisement-copy,.advertisement-dashed,.advertisement-header,.advertisement-information-link,.advertisement-label,.advertisement-label-up-white,.advertisement-layout,.advertisement-leader-board,.advertisement-leader-board-second,.advertisement-leaderboard,.advertisement-nav,.advertisement-other,.advertisement-placeholder,.advertisement-position1,.advertisement-right,.advertisement-right-rail,.advertisement-sidebar,.advertisement-space,.advertisement-sponsor,.advertisement-swimlane,.advertisement-tag,.advertisement-text,.advertisement-top,.advertisement-txt,.advertisement-wrapper,.advertisement1,.advertisement300x250,.advertisement468,.advertisementBackground,.advertisementBanner,.advertisementBannerVertical,.advertisementBar,.advertisementBlock,.advertisementBox,.advertisementCenterer,.advertisementColumnGroup,.advertisementContainer,.advertisementFull,.advertisementGif,.advertisementHeader,.advertisementImg,.advertisementLabel,.advertisementLabelFooter,.advertisementOutsider,.advertisementPanel,.advertisementReloadable,.advertisementRotate,.advertisementSmall,.advertisementText,.advertisementTop,.advertisement_160x600,.advertisement_300x250,.advertisement__728x90,.advertisement__label,.advertisement_article_center_bottom_computer,.advertisement_article_center_middle1_computer,.advertisement_article_center_middle4_computer,.advertisement_article_center_middle6_computer,.advertisement_article_center_top_computer,.advertisement_article_right_middle2_computer,.advertisement_article_right_top_computer,.advertisement_below_news_article,.advertisement_block_234_60,.advertisement_block_468_60,.advertisement_box,.advertisement_btm,.advertisement_caption,.advertisement_container,.advertisement_flag,.advertisement_flag_sky,.advertisement_g,.advertisement_header,.advertisement_horizontal,.advertisement_main_center_bottom_computer,.advertisement_main_right_middle2_computer,.advertisement_main_right_top_computer,.advertisement_post,.advertisement_river,.advertisement_sky,.advertisement_top,.advertisement_watchFooter,.advertisementonblue,.advertisementonwhite,.advertisements-link,.advertisements-right,.advertisementsOutterDiv,.advertisements_contain,.advertisementsubtitle,.advertiser-links,.advertisesingle,.advertisespace_div,.advertising-aside-top,.advertising-banner,.advertising-block,.advertising-box-top-teaser,.advertising-content,.advertising-fixed,.advertising-header,.advertising-inner,.advertising-leaderboard,.advertising-local-links,.advertising-lrec,.advertising-mention,.advertising-srec,.advertising-top,.advertising-top-box,.advertising-top-category,.advertising160,.advertising2,.advertising300_home,.advertising300x250,.advertising728,.advertising728_3,.advertisingBanner,.advertisingBlock,.advertisingBlocks,.advertisingLegend,.advertisingLrec,.advertisingSlide,.advertisingTable,.advertising_300x250,.advertising_bottom_box,.advertising_box_bg,.advertising_hibu_lef,.advertising_hibu_mid,.advertising_hibu_rig,.advertising_images,.advertising_widget,.advertisingarea,.advertisingarea-homepage,.advertisingimage,.advertisingimage-extended,.advertisingimageextended,.advertisingimageextended-link,.advertisment-banner,.advertisment-label,.advertisment-left-panal,.advertisment-module,.advertisment-rth,.advertisment-top,.advertismentBox,.advertismentContainer,.advertismentContent,.advertismentText,.advertisment_300x250,.advertisment_bar,.advertisment_caption,.advertisment_full,.advertisment_two,.advertize,.advertize_here,.advertlabel,.advertleft,.advertnotice,.advertorial-2,.advertorial-promo-box,.advertorial-wrapper,.advertorial2,.advertorial_728x90,.advertorial_red,.advertorialitem,.advertorialtitle,.advertorialview,.advertorialwidget,.advertplay,.adverts-125,.adverts-inline,.adverts_RHS,.advertspace,.adverttop,.advfrm,.advg468,.advhere,.advimg160600,.advimg300250,.advoice,.advr,.advr-wrapper,.advr_top,.advr_txtcss,.advrectangle,.advslideshow,.advspot,.advt,.advt-banner-3,.advt-block,.advt-box,.advt-sec,.advt-text,.advt300,.advt720,.advtBlock,.advt_160x600,.advt_468by60px,.advt_indieclick,.advt_single,.advt_title,.advt_widget,.advtext,.advtimg,.advtitle,.advtop,.advtop-leaderbord,.advttopleft,.advword,.adwhitespace,.adwide,.adwidget,.adwolf-holder,.adword-box,.adword-structure,.adword-text,.adword-title,.adword1,.adwordListings,.adwords-container,.adwordsHeader,.adwords_in_content,.adwrap,.adwrap-widget,.adwrapper-lrec,.adwrapper1,.adwrapper948,.adx-300x250-container,.adx-300x600-container,.adx-wrapper,.adxli,.adz2,.adz728x90,.adzone,.adzone-footer,.adzone-preview,.adzone-sidebar,.adzone_ad_5,.adzone_ad_6,.adzone_ad_7,.adzone_ad_8,.adzone_ad_9,.af-block-ad-wrapper,.afc-box,.afffix-custom-ad,.affiliate-ad,.affiliate-footer,.affiliate-link,.affiliate-mrec-iframe,.affiliate-sidebar,.affiliate-strip,.affiliateAdvertText,.affiliate_ad,.affiliate_header_ads,.affiliate_header_ads_container,.affiliates-sidebar,.affiliation728x90,.affinityAdHeader,.afns-ad-sponsor-logo,.afsAdvertising,.afsAdvertisingBottom,.aft-top-728x90,.aftContentAdLeft,.aftContentAdRight,.after-first-post-ad-1,.after_ad,.after_comments_ads,.after_post_ad,.afterpostadbox,.agi-adsaleslinks,.agi-adtop,.aisle-ad,.aisoad,.ajaxads,.ajdg_bnnrwidgets,.ajdg_grpwidgets,.al-wss-ad,.alb-content-ad,.alignads,.allpages_ad_bottom,.allpages_ad_top,.alt-ad-box,.alt_ad,.alternatives_ad,.am-adContainer,.am-articleItem--bodyAds,.amAdvert,.am_ads,.amp-ad-container,.amsSparkleAdWrapper,.anchor-ad-wrapper,.anchorAd,.annonce_textads,.annons_themeBlock,.annonstext,.another_text_ad,.answer_ad_content,.aol-knot-fullscreen-right-ad,.aol-twist-flyout-ad,.aolSponsoredLinks,.aopsadvert,.ap_str_ad,.apiAdMarkerAbove,.apiAds,.apiButtonAd,.app-advertisements,.app_ad_unit,.app_advertising_skyscraper,.apxContentAd,.archive-ad,.archive-ads,.area1_2_ad1,.area5_ad,.areaAd,.area_ad03,.area_ad07,.area_ad09,.aroundAdUnit,.artAd,.artAdInner,.art_ad_aside,.art_ad_top,.art_ads,.art_aisde_ads,.art_new_ads_468_60,.artcl_promo_ad,.article-ad,.article-ad-300x250,.article-ad-align-left,.article-ad-blk,.article-ad-bottom,.article-ad-box,.article-ad-cont,.article-ad-left,.article-ad-main,.article-ad-primary,.article-ads,.article-advert,.article-advert-container,.article-advert-dfp,.article-aside-ad,.article-content-adwrap,.article-footer-ad-container,.article-footer__ad,.article-footer__ads,.article-google-adsense,.article-grid__item--advert,.article-header-ad,.article-inline-ad,.article-news-videoad,.article-sidebar__advert,.article-v2-rail__advert,.articleAd,.articleAd300x250,.articleAdBlade,.articleAdSlot2,.articleAdTop,.articleAdTopRight,.articleAds,.articleAdsL,.articleAdvert,.articleEmbeddedAdBox,.articleFooterAd,.articleHeadAdRow,.articlePage3rdPartyContentStrip,.articleTopAd,.article__ad-ir,.article_ad250,.article_ad_container2,.article_adbox,.article_ads_banner,.article_bottom-ads,.article_bottom_ad,.article_google-ad,.article_google_ads,.article_inline_ad,.article_inner_ad,.article_list_in_ad,.article_middle_ad,.article_mpu,.article_mpu_box,.article_page_ads_bottom,.article_sponsored_links,.article_tower_ad,.articlead,.articleads,.articlebodyad,.articlepage_ads_1,.articlepage_ads_top,.artist-ad-wrapper,.as-admedia,.as_ad,.aseadn,.aside-ad,.aside-ad-wrapper,.aside-ads,.asideAd,.aside_AD01,.aside_AD02,.aside_AD06,.aside_AD08,.aside_AD09,.aside_banner_ads,.aside_google_ads,.associated-ads,.async-ad-container,.atf-ad-medRect,.atf-ad-medrec,.atfAds,.atf_ad_box,.attachment-advert_home,.attachment-dm-advert-bronze,.attachment-dm-advert-gold,.attachment-dm-advert-silver,.attachment-sidebar-ad,.attachment-sidebarAd,.attachment-sidebar_ad,.attachment-squareAd,.attachment-weather-header-ad,.auction-nudge,.autoshow-top-ad,.aux-ad-widget-1,.aux-ad-widget-2,.avertissement-download,.b-ad,.b-ad-footerBanner,.b-ad-topBanner,.b-ads728,.b-ads_300,.b-ads_gpt,.b-ads_iframe,.b-adsuniversal-wrap,.b-adv-art,.b-adv-mobi,.b-adv-teaser,.b-advert__grid,.b-aside-ads,.b-astro-sponsored-links_horizontal,.b-astro-sponsored-links_vertical,.b-blockadblock,.b-spec-adv,.b-yabrowser-promo,.b5-ad-pushdown,.b5_widget_skyscraper_ad,.b5ad_bigbox,.b5ad_skyscraper,.b_ad,.b_ads,.b_ads_cont,.b_ads_r,.b_ads_top,.back300ad,.backgroundAd,.badge-gag-ads-container,.bads300,.badxcn,.bam-dcRefreshableAd,.ban-720-container,.ban300side,.ban420x200,.ban420x260,.ban680x450,.ban728,.ban980x90,.bank-rate-ad,.banmanad,.banner-125,.banner-300,.banner-300x250,.banner-300x600,.banner-468,.banner-468-60,.banner-468x60,.banner-728,.banner-728x90,.banner-950x50,.banner-ad-300x250,.banner-ad-container,.banner-ad-footer,.banner-ad-row,.banner-ad-space,.banner-ad-wrapper,.banner-ads-300x250,.banner-ads-sidebar,.banner-adsense,.banner-adv,.banner-advert,.banner-adverts,.banner-buysellads,.banner-paid-ad-label,.banner-rectangleMedium,.banner-sidebar-300x250,.banner-top-ads,.banner-top-banner-728x90,.banner1-728x90,.banner120x600,.banner125x125,.banner160,.banner250_250,.banner300_250,.banner300by250,.banner300x84,.banner336,.banner336x280,.banner350,.banner468,.banner468by60 {display: none !important; color: #72da9a !important; background-color: #a0abfd !important;}.banner728,.banner728-ad,.banner728-container,.banner728x90,.bannerADV,.bannerAd3,.bannerAd300x250,.bannerAdContainer,.bannerAdLeaderboard,.bannerAdRectangle,.bannerAdSearch,.bannerAdSidebar,.bannerAdTower,.bannerAdWrap,.bannerAdWrapper300x250,.bannerAdWrapper730x86,.bannerAd_rdr,.bannerAds,.bannerAdvert,.bannerAside,.bannerGAd,.bannerRightAd,.bannerTopAdLeft,.bannerTopAdRight,.bannerWrapAdwords,.banner_160x600,.banner_234x90,.banner_250x250,.banner_300_250,.banner_300x250,.banner_300x250_2,.banner_300x250_3,.banner_468_60,.banner_468x60,.banner_728_90,.banner_ad-728x90,.banner_ad_233x90,.banner_ad_300x250,.banner_ad_728x90,.banner_ad_footer,.banner_ad_full,.banner_ad_leaderboard,.banner_ads,.banner_ads1,.banner_ads_300x250,.banner_ads_home,.banner_adv,.banner_altervista_300X250,.banner_altervista_728X90,.banner_mpu_integrated,.banner_reklam,.banner_reklam2,.banner_slot,.bannerad-125tower,.bannerad-468x60,.bannerad3,.banneradbottomholder,.banneradd,.bannerads,.banneradv,.bannerandads,.bannergoogle,.bannergroup-ads,.bannergroupadvertisement,.banneritem-ads,.banneritem_ad,.bannerplace728,.bar_ad,.barkerAd,.barstool_ad_floater,.base-ad-mpu,.base_ad,.base_printer_widgets_AdBreak,.bb-ad-mrec,.bb-adv-160x600,.bb-adv-300x250,.bb-md-adv7,.bbccom-advert,.bbccom_advert,.bbsTopAd,.bcom_ad,.bean-advertisment,.bean-bag-ad,.bean-dfp-ad-unit,.beauty_ads,.before-comment-ad,.belowNavAds,.below_game_ad,.below_player_ad,.belowthread_advert,.belowthread_advert_container,.belt-ad,.belt_ad,.bet_AdBlock,.bets-ads,.betteradscontainer,.between_page_ads,.bex_ad,.bg-ad-link,.bg-ad-top,.bg-ads,.bgAdBlue,.bgadgray10px,.bgcolor_ad,.bgnavad,.big-ad,.big-ads,.big-box-ad,.big-right-ad,.bigAd,.bigAdContainer,.bigAds,.bigAdvBanner,.bigAdvMiddle,.bigAdvMiddlea,.bigBoxAdArea,.bigCubeAd,.big_ad,.big_ads,.big_center_ad,.big_rectangle_page_ad,.bigad,.bigad1,.bigad2,.bigadleft,.bigadright,.bigads,.bigadtxt1,.bigbox-ad,.bigbox_ad,.bigboxad,.billboard-ad,.billboard300x250,.billboardAd,.billboard__advert,.billboard_ad,.bing-ads-wrapper,.biz-ad,.biz-ads,.biz-adtext,.biz-details-ad,.biz-list-ad,.bizCardAd,.bizDetailAds,.bkg-ad-browse,.bl_adv_right,.blacboard-ads-container,.blk_advert,.blocAdInfo,.bloc_ads_notice,.bloc_adsense_acc,.block--ad-superleaderboard,.block--ads,.block--bean-artadocean-splitter,.block--bean-artadocean-text-link-1,.block--bean-artadocean-text-link-2,.block--bean-artadocean300x250-1,.block--bean-artadocean300x250-3,.block--bean-artadocean300x250-6,.block--simpleads,.block--views-premium-ad-slideshow-block,.block-ad-header,.block-ad-leaderboard,.block-ad-masthead,.block-ad-middle,.block-ad-mpu,.block-ad-wrapper,.block-ad300,.block-ad_injector,.block-ad_tag,.block-admanager,.block-ads,.block-ads-bottom,.block-ads-eplanning,.block-ads-eplanning-300x250top-general,.block-ads-eplanning-300x600,.block-ads-home,.block-ads-top,.block-ads1,.block-ads2,.block-ads3,.block-ads_top,.block-adsense,.block-adsense-managed,.block-adsense_managed,.block-adspace-full,.block-adv,.block-advertisement,.block-advertising,.block-adzerk,.block-altads,.block-ami-ads,.block-bean-adocean,.block-bf_ads,.block-bg-advertisement,.block-bg-advertisement-region-1,.block-boxes-ad,.block-boxes-ga_ad,.block-deca_advertising,.block-dennis-adsense-afc,.block-display-ads,.block-doubleclick_ads,.block-eg_adproxy,.block-fan-ad,.block-fc_ads,.block-fcc-advertising,.block-fcc-advertising-first-sidebar-ad,.block-featured-sponsors,.block-first-sidebar-ad,.block-gc_ad,.block-gg_ads,.block-google-admanager,.block-google-admanager-dfp,.block-google_admanager,.block-google_admanager2,.block-hcm-ads,.block-hcm_ads,.block-inner-adds,.block-maniad,.block-module-ad,.block-module-ad-300x250,.block-module-ad-300x600,.block-mps,.block-nmadition,.block-ohtdisplayad,.block-openads,.block-openadstream,.block-openx,.block-pm_doubleclick,.block-reklama,.block-skyscraper-ad,.block-sn-ad-blog-wrapper,.block-sponsor,.block-sponsored-links,.block-thirdage-ads,.block-vh-adjuggler,.block-wtg_adtech,.block-yt-ads,.block-zagat_ads,.block1--ads,.blockAd,.blockAd300x97,.blockAds,.blockAdvertise,.block_ad,.block_ad_floating_bar,.block_ad_middle,.block_ad_sb_text,.block_ad_sb_text2,.block_ad_sponsored_links,.block_ad_sponsored_links-wrapper,.block_ad_sponsored_links_localized,.block_ad_sponsored_links_localized-wrapper,.block_ad_top,.block_ads,.block_adslot,.block_adv,.block_advert,.blockad,.blocked-ads,.blockid_google-adsense-block,.blockrightsmallads,.blocsponsor,.blog-ad,.blog-ad-leader-inner,.blog-ads-container,.blog-ads-top,.blog-advertisement,.blog-view-ads,.blog2AdIntegrated,.blogAd,.blogAdvertisement,.blogArtAd,.blogBigAd,.blog_ad,.blog_ad_continue,.blog_divider_ad,.blogads,.blogads-sb-home,.blogroll-ad-img,.blogs_2_square_ad,.blox3featuredAd,.blue-ad,.blxAdopsPlacement,.bmg-sidebar-ads-125,.bmg-sidebar-ads-300,.bn_advert,.bn_textads,.bnr_ad,.bo-top-ad-bottom,.bo-top-left-ad,.bo-top-right-ad,.bodaciousad,.body-ads,.body-adzone,.bodyAd,.body_ad,.body_sponsoredresults_bottom,.body_sponsoredresults_middle,.body_sponsoredresults_top,.body_width_ad,.bodyads,.bodyads2,.bodybannerad,.bodyrectanglead,.bomAd,.bonnier-ads,.bonnier-ads-ad-bottom,.bonnier-ads-ad-top,.bookad,.bookseller-header-advt,.booster-ad,.bostad,.bot-728x90-ad,.bot-affiliate,.botAd,.botRectAd,.bot_ad,.bot_ads,.botad2,.bottom-ad-banner,.bottom-ad-box,.bottom-ad-container,.bottom-ad-fr,.bottom-ad-large,.bottom-ad-placeholder,.bottom-ad-tagline,.bottom-ad-wrapper,.bottom-ad2,.bottom-ads-wrapper,.bottom-ads728,.bottom-banner-ad,.bottom-center-adverts,.bottom-game-ad,.bottom-large-google-ad,.bottom-leaderboard-adslot,.bottom-main-adsense,.bottom-mpu-ad,.bottom-right-advert,.bottom-rightadvtsment,.bottom-slider-ads,.bottom2-adv,.bottomAd,.bottomAdBlock,.bottomAdsTitle,.bottomAdvTxt,.bottomAdvert,.bottomAdvertisement,.bottomAdvt,.bottomArticleAds,.bottomBannerAd,.bottomBannerAdsSmallBotLeftHolder,.bottomELAd,.bottomFriendsAds,.bottomReviewAd,.bottom_ad,.bottom_ad_placeholder,.bottom_ad_responsive,.bottom_adbreak,.bottom_ads,.bottom_ads_wrapper_inner,.bottom_adsense,.bottom_adspace,.bottom_advert_728x90,.bottom_advertise,.bottom_banner_ad,.bottom_banner_advert_text,.bottom_bar_ads,.bottom_left_advert,.bottom_right_ad,.bottom_rightad,.bottom_side_ad,.bottom_sponsor,.bottomad,.bottomad-bg,.bottomadarea,.bottomads,.bottomadtop,.bottomadvert,.bottomadwords,.bottombarad,.bottomleader,.bottomleader-ad-wrapper,.bottomrightrailAd,.bottomvidad,.botton_advertisement,.box-ad,.box-ad-a,.box-ad-grey,.box-ad-mr1,.box-ad-unit-j,.box-ad-wsr,.box-ads-small,.box-adsense,.box-adv-300-home,.box-adv-social,.box-advert,.box-advert-sponsored,.box-advertisement,.box-adverts,.box-entry-ad,.box-entry-ad-bottom-single,.box-footer-ad,.box-google-text-ad,.box-sidebar-ad,.box-sidebar-ad-125,.box-sidebar-ad-160,.box-sidebar-ad-300,.box1-ad,.boxAd,.boxAdContainer,.boxAdFields,.boxAdMrec,.boxAds,.boxAdsInclude,.boxAdvertisement,.boxOuterAD,.boxSponsor,.box_ad,.box_ad_container,.box_ad_content,.box_ad_horizontal,.box_ad_spacer,.box_ad_wrap,.box_ads728x90_holder,.box_adv1,.box_adv2,.box_adv_728,.box_adv_hp,.box_adv_new,.box_advertising,.box_advertising_info,.box_advertisment_62_border,.box_content_ad,.box_content_ads,.box_publicidad,.box_sidebar-ads,.box_textads,.box_title_ad,.boxad1,.boxad120,.boxadcont,.boxads,.boxcontentad,.boxsponsor2,.boxyads,.bps-ad-wrapper,.bps-advertisement,.bps-advertisement-inline-ads,.bps-advertisement-placeholder,.bps-search-chitika-ad,.bq_ad_320x250,.bq_adleaderboard,.bq_rightAd,.br-ad,.br-ad-text,.br-ad-wrapper,.br-banner-ad,.br-right-rail-ad,.branding-ad-gallery,.branding-ad-wrapper,.brandpost_inarticle,.breadads,.breadcumbad,.breakad_container,.breaker-ad,.breakerAd,.breakingNewsModuleSponsor,.breakthrough-ad,.broker-ad,.broker-ads,.broker-ads-center,.brokerad,.browse-ad-container,.browse-banner_ad,.browse-by-make-ad,.browser_boot_ad,.bs-ad,.bsAdvert,.bsa-in-post-ad-125-125,.bsa_ads,.bsa_it_ad,.bt_ad,.btf-ad-medRect,.btfAds,.btm_ad,.btm_ad_container,.btn-newad,.btn_ad,.budget_ads_1,.budget_ads_2,.budget_ads_3,.budget_ads_bg,.bullet-sponsored-links,.bullet-sponsored-links-gray,.bump-ad,.bunyad-ad,.burstContentAdIndex,.businessads,.busrep_poll_and_ad_container,.button-ad,.button-ads,.buttonAd,.buttonAdSpot,.buttonAds,.button_ad,.button_ads,.button_advert,.buttonad,.buttonad_v2,.buttonadbox,.buttonads,.buySellAdsContainer,.buysellAds,.buysellAdsSmall,.buzzAd,.buzz_ad_block,.buzz_ad_wrap,.bx_ad,.bx_ad_right,.bxad,.bz-ad,.bzads-ic-ad-300-250-600,.c-ad,.c-ad-size2,.c-ad-size3,.c-adunit,.c-adunit--billboard,.c-adunit--first,.c-adunit__container,.c-advert-superbanner,.c-advertisement--leaderboard,.c-advertisement--rectangle-float,.c-res-ad,.c300x250-advert,.c3_adverts,.cA-adStack,.cA-adStrap,.cColumn-TextAdsBox,.cLeftTextAdUnit,.c_adsky,.c_google_adsense_nxn,.c_ligatus_nxn,.calendarAd,.calloutAd,.calls-to-action__sidebar-ad-container,.canoeAdvertorial,.carbonad,.carbonad-tag,.card--ad,.card--article-ad,.card-ad,.card-ads,.cards-categorical-list-ad,.care2_adspace,.careerAdviceAd1,.carouselbanner_advert,.carouselbannersad,.cat_context_ad,.catalog-listing-ad-item,.catalog_ads,.catalyst-ads,.cate_right_ad,.category-advertorial,.categorySponsorAd,.category__big_game_container_body_games_advertising,.categoryfirstad,.categoryfirstadwrap,.categorypage_ad1,.categorypage_ad2,.catfish_ad,.cb-ad-banner,.cb-ad-container,.cb_ads,.cb_navigation_ad,.cbolaBannerStructure,.cbs-ad,.cbs-ad-unit,.cbs-ad-unit-wrapper,.cbstv_ad_label,.cbzadvert,.cbzadvert_block,.cc-advert,.cct-tempskinad,.cdAdContainer,.cdAdTitle,.cdLanderAd,.cdc-ad,.cde_ads_right_top_300x250,.cdmainlineSearchAdParent,.cdo-ad,.cdo-ad-section,.cdo-dicthomepage-btm-ad,.cdsidebarSearchAdParent,.center-ad,.center-ad-banner,.center-gray-ad-txt,.centerAd,.centerAdBar,.centerAds,.center_ad,.center_add,.center_ads,.center_adsense,.centerad,.centerads,.centeradv,.centered-ad,.centered_wide_ad,.cg_ad_slug,.ch[onclick="ga(this,event)"],.ch_advertisement,.change-ad-h-btn,.changeableadzone,.channel-adv,.channel_ad_2016,.chartad,.chitika-ad,.chitikaAdCopy,.chrt-subheader__adv,.cinemabotad,.cl-ad-slot-post1,.cl-ad-slot-post2,.clHeader_Ad,.classifiedAdSplit,.classifiedAdThree,.clearerad,.client-ad,.close-ad-wrapper,.close2play-ads,.cm-ad,.cm-ad-row,.cm-hero-ad,.cm-rp01-ad,.cm-rp02-ad,.cm-take-a-break-ad-area,.cmAd,.cmAdCentered,.cmAdContainer,.cmAdFind,.cmAdSponsoredLinksBox,.cmBottomAdRight,.cmMediaRotatorAd,.cmMediaRotatorAdSponsor,.cmRecentOnAirAds,.cmTeaseAdSponsoredLinks,.cm_ads,.cmam_responsive_ad_widget_class,.cmg-ads,.cmi-content-3ads-horizontal,.cms-Advert,.cms-magazine-rightcol-adtag,.cn24-ads,.cn24-ads-160x600,.cn24-ads-300x250,.cn24-ads-600x290,.cnAdContainer,.cnAdDiv,.cnAdzerkDiv,.cnIframeAdvertisements,.cn_ad_placement,.cnbcHeaderAd,.cnbcRailAd,.cnbc_badge_banner_ad_area,.cnbc_banner_ad_area,.cnbc_leaderboard_ad,.cnn160AdFooter,.cnnAd,.cnnSearchSponsorBox,.cnnStoreAd,.cnnStoryElementBoxAd,.cnnWCAdBox,.cnnWireAdLtgBox,.cnn_728adbin,.cnn_adbygbin,.cnn_adcntr300x100,.cnn_adcntr728x90,.cnn_adcntr728x90t,.cnn_adspc300x100,.cnn_adspc336cntr,.cnn_adtitle,.cnn_fabcatad,.cnn_grpnadclk,.cnn_pt_ad,.cnn_sectprtnrbox_cb,.cnn_sectprtnrbox_grpn336,.cns-ads-stage,.cnt-half-page-ads,.cnt-header-ad,.cnt-right-box-ad,.cnt-right-vertical-ad,.cnt-right-vertical-ad-home,.cntAd,.cnt_ad,.cntrad,.cobalt-ad,.col-ad,.col-ad-hidden,.col-line-ad,.colRightAd,.col_ad,.col_header_ads_300x250,.colads,.colombiaAd,.column-ad,.column2-ad,.columnAdvert,.columnBoxAd,.columnRightAdvert,.column_3_ad,.com-ad-server,.comment-ad,.comment-ad-wrap,.comment-advertisement,.comment_ad,.comment_ad_box,.commentsFavoritesAd,.commentsbannerad,.commercial-ad,.commercial-ad-long,.commercial-unit-desktop-rhs,.commercial-unit-desktop-top,.commercial-unit-mobile-bottom,.commercial-unit-mobile-top,.commercialAd,.common-adv-box,.common_advertisement_title,.communityAd,.comp_AdsFrontPage_300x600,.companion-ad,.companion-ads,.companionAd,.companion_ad,.compareBrokersAds,.component-ddb-300x250-v2,.component-ddb-728x90-v2,.component-sponsored-links,.component-zergnet,.conTSponsored,.con_widget_advertising,.conductor_ad,.confirm_ad_left,.confirm_ad_right,.confirm_leader_ad,.consoleAd,.cont-ad,.contads_middle,.contained-ad-shaft,.container--ad,.container--bannerAd,.container--header-ads,.container-ad-600,.container-adbanner-global,.container-adbanner-list,.container-adbanner-mobile,.container-adds,.container-advMoreAbout,.container-adwords,.container-lower-ad,.container-rectangle-ad,.container-top-adv,.containerAdsense,.containerSqAd,.container_serendipity_plugin_google_adsense,.contains-ad,.content-ad,.content-ad-article,.content-ad-box,.content-ad-outer-container,.content-ad-side,.content-ad-widget,.content-ad-wrapper,.content-advert,.content-advertisment,.content-box-inner-adsense,.content-cliff__ad,.content-cliff__ad-container,.content-footer-ad,.content-footer-ad-block,.content-header-ad,.content-item-ad-top,.content-list__ad-label,.content-result-ads,.content-unit-ad,.content-zergnet,.contentAd510,.contentAdBox,.contentAdContainer,.contentAdFoot,.contentAdIndex,.contentAdsCommon,.contentAdsWrapper,.contentAdvertisement,.contentTopAd,.contentTopAdSmall,.contentTopAds,.content_468_ad,.content__right &gt; .z-market_right_yes,.content_ad,.content_ad_728,.content_ad_head,.content_ad_side,.content_ads_index,.content_adsense,.content_adsq,.content_advert,.content_advertising,.content_bottom_adsense,.content_column2_ad,.content_inner_ad,.content_middle_adv,.contentad,.contentad-home,.contentad300x250,.contentad_right_col,.contentadarticle,.contentadfloatl,.contentadleft,.contentads1,.contentads2,.contentadstartpage,.contentadstop1,.contentadvside,.contentleftad,.contentpage_searchad,.contents-ads-bottom-left,.contenttextad,.contentwellad,.contentwidgetads,.contest_ad,.context-ads,.contextualAds,.contextual_ad_unit,.convert-media-ad,.copy-adChoices,.core-adplace,.cornerBoxInnerWhiteAd,.cornerad,.cosmo-ads,.cp_ad,.cpaAdPosition,.cpmstarHeadline,.cpmstarText,.cr_ad,.cranky-ads-zone,.create_ad,.credited_ad,.criAdv,.criteo-ad,.cross_delete_ads,.crumb-ad,.cs-adv-wrapper,.cs-mpu,.csPromoAd,.csa-adsense,.cscTextAd,.cse_ads,.csiAd_medium,.cspAd,.ct-ad-article,.ct-ad-article-wrapper,.ct-ads,.ct-bottom-ads,.ct_ad,.ctn-advertising,.ctnAdSkyscraper,.ctnAdSquare300,.ctn_ads_rhs,.ctn_ads_rhs_organic,.ctpl-duplicated-ad,.ctr-tss-ads,.cube-ad,.cubeAd,.cube_ad,.cube_ads,.cubead-widget,.currency_ad,.custom-ad-container,.custom-ads,.custom-advert-banner,.custom-banner-leaderboard-ad,.customAd,.custom_ads,.custom_banner_ad,.custom_footer_ad,.customadvert,.customized_ad_module,.cwAdvert,.cwv2Ads,.cxAdvertisement,.cyads650x100,.da-custom-ad-box,.darla_ad,.dart-ad,.dart-ad-content,.dart-ad-grid,.dart-ad-taboola,.dart-ad-title,.dart-advertisement,.dart-leaderboard,.dart-leaderboard-top,.dart-medsquare,.dartAd300,.dartAd491,.dartAdImage,.dart_ad,.dart_tag,.dartad,.dartadbanner,.dartadvert,.dartiframe,.datafile-ad,.dc-ad,.dc-banner,.dc-half-banner,.dc-widget-adv-125,.dcAdvertHeader,.dcmads,.dd-ad,.dd-ad-container,.dda-ad,.ddb,.ddc-table-ad,.deckAd,.deckads,.demo-advert,.desktop-ad-banner,.desktop-advert,.desktop-aside-ad,.desktop-aside-ad-hide,.desktop-postcontentad-wrapper,.desktop_ad,.desktoponlyad,.detail-ads,.detailMpu,.detailSidebar-adPanel,.detail_ad,.detail_article_ad,.detail_top_advert,.details-advert,.devil-ad-spot,.dfad,.dfad_first,.dfad_last,.dfad_pos_1,.dfad_pos_2,.dfad_pos_3,.dfad_pos_4,.dfad_pos_5,.dfad_pos_6,.dfads-javascript-load,.dfp-ad-advert_mpu_body_1,.dfp-ad-container,.dfp-ad-full,.dfp-ad-rect,.dfp-ad-widget,.dfp-ads-ad-article-middle,.dfp-ads-embedded,.dfp-banner,.dfp-banner-slot,.dfp-button,.dfp-leaderboard,.dfp-plugin-advert,.dfp-slot-wallpaper,.dfp-top1,.dfp-top1-container,.dfp_ad,.dfp_ad_caption,.dfp_ad_content_bottom,.dfp_ad_content_top,.dfp_ad_footer,.dfp_ad_header,.dfp_ad_inner,.dfrads,.dhAdContainer14,.diggable-ad-sponsored,.discourse-google-dfp,.display-ad,.display-ads-block,.display-advertisement,.displayAd728x90Js,.displayAdCode,.displayAdSlot,.displayAdUnit,.displayAds,.display_ad,.display_ads_right,.div-google-adx,.divAd,.divAdright,.divAdsBanner,.divAdsLeft,.divAdsRight,.divAdvTopRight,.divGoogleAdsTop,.divMAD2,.divReklama,.divRepAd,.divSponsoredBox,.divSponsoredLinks {display: none !important; color: #72da9a !important; background-color: #a0abfd !important;}.divTopADBanner,.divTopADBannerWapper,.div_adv300,.div_adv620,.div_adv728,.div_advertisement,.div_advertorial,.div_advstrip,.div_banner468,.divad1,.divad2,.divad3,.divads,.divadsensex,.divider-ad,.divider-advert,.divider-full-width-ad,.divider_ad,.dlSponsoredLinks,.dm-ads-125,.dm-ads-350,.dmRosMBAdBox,.dm_ad-container,.dmco_advert_iabrighttitle,.dn-ad-small,.dn-ad-wide,.dod_ad,.double-ad,.double-ads,.double-click-ad,.double-square-ad,.doubleGoogleTextAd,.double_adsense,.double_click_widget,.doubleclick-ad,.doubleclick_adtype,.download-ad,.downloadAds,.download_adv_text_video,.download_link_sponsored,.downloadad,.drop-ad,.dropdownAds,.ds-ad,.ds-ad-300,.ds-ad-col-container,.ds-ad-container,.ds-ad-container-300,.ds-ad-container-728,.ds-ad-container-home,.ds-ad-container-ros,.ds-ad-home,.ds-ad-inner,.ds-ad-ros,.dsq_ad,.dualAds,.dvad1,.dvad2,.dvad3,.dvad3mov,.dvad4,.dvad4cont,.dvad5,.dvad5cont,.dvadevent,.dvadvhw,.dvcvmidads,.dvcvrgtad,.dwn_link_adv,.dynamic-ad-wrap-b,.dynamic-ads,.dynamicLeadAd,.dynamic_ad,.dynamic_adslot,.dynamicad1,.dynamicad2,.e-ad,.eads,.earAdv,.east_ad_bg,.east_ad_block,.easy-ads,.easyAdsBox,.easyAdsSinglePosition,.easyazon-block,.eb_ad280,.ebayads,.ec-ads,.ec_ad_banner,.ecosia-ads,.editor_ad,.editorial-adsense,.editors-ads,.ehs-adbridge,.ej-advertisement-text,.element--ad,.element-ad,.element-adplace,.em-ad,.em-ads-widget,.em_ad_300x250,.em_ads_box_dynamic_remove,.embAD,.embed-ad,.embedded-article-ad,.embeddedAd,.embeddedAds,.emm-ad,.empty-ad,.endemic_ads,.eng_ads,.engagement_ad,.eniro_ad,.enterpriseAd,.entry-ad,.entry-ads,.entry-ads-110,.entry-body-ad,.entry-bottom-ad,.entry-injected-ad,.entry-top-ad,.entryAd,.entry_sidebar_ads,.entryad,.eol-ads,.epicgame-ads,.esp_publicidad,.et-single-post-ad,.etad,.eu-advertisment1,.eu-advertisment2,.eu-miniadvertisment,.event-ads,.event-ads-inside,.exec-advert-flash,.expanding-ad,.expertsAd,.ext-ad,.external-add,.externalAdComponent,.extrasColumnFuseAdLocal,.ez-ad,.ez-clientAd,.ezAdsWidget,.ezAdsense,.ezo_ad,.ezoic-ad,.ezoic-floating-bottom,.f-item-ad,.fN-affiliateStrip,.f_Ads,.fa-google-ad,.facebook-ad,.fbCalendarAds,.fbPhotoSnowboxAds,.fblockad,.fc_splash_ad,.fd-ad,.fd-display-ad,.fdDisplayAdGrid,.fdc_ad,.fe-blogs__desktop-ad,.fe-blogs__sidebar-ad,.fe-blogs__sidebar-ad--sticky-fix,.fe-blogs__sidebar-ad-wrapper,.fe-blogs__top-ad,.fe-blogs__top-ad-wrapper,.fe-blogs__top-ad-wrapper-leaderboard,.feat_ads,.featureAd,.feature_ad,.featured-ads,.featured-sponsors,.featured-story-ad,.featuredAds,.featuredBoxAD,.featured_ad,.featured_ad_item,.featured_advertisers_box,.featuredadvertising,.feed-ad,.feed-s-update--is-sponsored,.feedBottomAd,.feeds-adblade,.ffz_bottom_ad,.fg_Ad,.fgc-advertising,.fi_adsense,.field-name-shared-ad-placement-landscape,.finpostsads,.fireplaceadleft,.fireplaceadright,.fireplaceadtop,.first-ad,.first-ad-wrap,.first_ad,.first_post_ad,.firstad,.firstpost_advert,.firstpost_advert_container,.fiveMinCompanionBanner,.fix-ad,.fixed-ad-160x600,.fixed-ads-header,.fixedAds,.fixedRightAd,.fixed_ad_336x280,.fl-adsense,.fl_adbox,.flagads,.flashAd,.flash_ad,.flash_advert,.flashad,.flashadd,.flex-ad,.flexAd,.flexad,.flexadvert,.flexbanneritemad,.flexiad,.flipbook_v2_sponsor_ad,.floatAdv,.floatad,.floatads,.floated-ad,.floated_right_ad,.floating-advert,.floatingAds,.fly-ad,.fm-badge-ad,.fnadvert,.fns_td_wrap,.fold-ads,.follower-ad-bottom,.following-ad,.following-ad-container,.foot-ad,.foot-ads,.foot-advertisement,.foot_adsense,.footad,.footer-300-ad,.footer-ad-elevated,.footer-ad-full-wrapper,.footer-ad-section,.footer-ad-squares,.footer-ad1,.footer-ads-wrapper,.footer-adsbar,.footer-adsense,.footer-advert,.footer-advert-large,.footer-advertisement,.footer-advertisement-container,.footer-advertisements,.footer-advertising-area,.footer-banner-ad,.footer-floating-ad,.footer-leaderboard-ad,.footer-ribbon-ad,.footer-text-ads,.footerAd,.footerAdModule,.footerAdUnit,.footerAdWrapper,.footerAds,.footerAdsWrap,.footerAdslot,.footerAdverts,.footerFullAd,.footerGoogleAdMainWarp,.footerTextAd,.footer_ad336,.footer_ad_container,.footer_ads,.footer_adv,.footer_advertisement,.footer_banner_ad_container,.footer_block_ad,.footer_bottom_ad,.footer_bottomad,.footer_line_ad,.footer_text_ad,.footer_text_adblog,.footerads,.footeradspace,.footertextadbox,.for-taboola,.foreign-ad01,.foreign-ad02,.forex_ad_links,.fortune-ad-unit,.forum-ad-2,.forum-topic--adsense,.forum_ad_beneath,.forumtopad,.four-ads,.four-six-eight-ad,.four_button_threeone_ad,.four_percent_ad,.fp-ad300,.fp-adinsert,.fp-ads,.fp-right-ad,.fp-right-ad-list,.fp-right-ad-zone,.fp_ad_text,.frame_adv,.framead,.freedownload_ads,.freegame_bottomad,.freewheelDEAdLocation,.frn_adbox,.frn_adbox_placeholder,.frn_cont_adbox,.frn_placeholder_google_ads,.frontads,.frontone_ad,.frontpage-google-ad,.frontpage-right-ad,.frontpage-right-ad-hide,.frontpage_ads,.fs-ad-block,.fs1-advertising,.fsAdContainer,.fs_ad_300x250,.fsrads,.ft-ad,.ftb-native-ads,.ftdAdBar,.ftdContentAd,.ftr_ad,.ftv-ad-sumo,.full-ad,.full-width-ad,.full-width-ad-container,.fullSizeAd,.full_ad_box,.full_ad_row,.full_width_ad,.fulladblock,.fullbannerad,.fusion-advert,.fusionAd,.fusionAdLink,.future_dfp-inline_ad,.fw-mod-ad,.fwAdTags,.g-ad,.g-ad-slot,.g-ad-slot-toptop,.g-adblock3,.g-advertisement-block,.g1-ads,.g2-adsense,.g3-adsense,.g3rtn-ad-site,.gAdRows,.gAdSky,.gAds,.gAds1,.gAdsBlock,.gAdsContainer,.gAdvertising,.g_ad,.g_ad336,.g_ads_200,.g_ads_728,.g_adv,.g_ggl_ad,.ga-ad-split,.ga-ads,.ga-textads-bottom,.ga-textads-top,.gaTeaserAds,.gaTeaserAdsBox,.gabfire_ad,.gad_container,.gads300x250,.gads_cb,.gads_container,.gadsense,.gadstxtmcont2,.galleria-AdOverlay,.galleria-ad-2,.galleria-adsense,.gallery-ad-container,.gallery-ad-holder,.gallery-ad-wrapper,.gallery-injectedAd,.gallery-sidebar-ad,.galleryAds,.galleryAdvertPanel,.galleryLeftAd,.galleryRightAd,.gallery_300x100_ad,.gallery__aside-ad,.gallery__bottom-ad,.gallery__footer-ad,.gallery_ad,.gallery_ad_wrapper,.gallery_ads_box,.gallery_post--interstitial_ad,.galleryads,.gam-300x250-default-ad-container,.gam_ad_slot,.game-ads,.game-right-ad-container,.gameAd,.gameBottomAd,.game__adv_containerLeaderboard,.game_right_ad,.game_under_ad,.gamepage_boxad,.gamepageadBox,.gameplayads,.games-ad-wrapper,.games-ad300,.gamesPage_ad_container,.gamesPage_ad_content,.gamezebo_ad,.gamezebo_ad_info,.gbfwa &gt; div[class$="_item"],.gbl_adstruct,.gbl_advertisement,.gdgt-header-advertisement,.gdgt-postb-advertisement,.gdm-ad,.geeky_ad,.gels-inlinead,.gemini-ad,.gen_side_ad,.general-adzone,.general_banner_ad,.generic-ad-module,.generic-ad-title,.generic_300x250_ad,.geoAd,.getridofAds,.getridofAdsBlock,.gfp-banner,.ggads,.ggadunit,.ggadwrp,.gglAds,.ggl_ads_row,.gglads300,.gl_ad,.glamsquaread,.glance_banner_ad,.globalAd,.globalAdLargeRect,.globalAdLeaderBoard,.global_banner_ad,.gm-ad-lrec,.gms-ad-centre,.gms-advert,.gn_ads,.go-ad,.go-ads-widget-ads-wrap,.goAdverticum,.goglad,.goog_ad,.googad,.googads,.google-ad,.google-ad-728-90,.google-ad-afc-header,.google-ad-block,.google-ad-bottom-outer,.google-ad-container,.google-ad-content,.google-ad-fix,.google-ad-image,.google-ad-pad,.google-ad-side_ad,.google-ad-sidebar,.google-ad-space,.google-ad-space-vertical,.google-ad-square-sidebar,.google-ad-top-outer,.google-ad-widget,.google-ad-wrapper-ui,.google-ads,.google-ads-boxout,.google-ads-container,.google-ads-group,.google-ads-leaderboard,.google-ads-long,.google-ads-obj,.google-ads-responsive,.google-ads-right,.google-ads-rodape,.google-ads-sidebar,.google-ads-slim,.google-ads-widget,.google-ads-wrapper,.google-ads2,.google-adsbygoogle,.google-adsense,.google-advertisement,.google-advertisement_txt,.google-afc-wrapper,.google-csi-ads,.google-dfp-ad-label,.google-entrepreneurs-ad,.google-right-ad,.google-sponsored-ads,.google-sponsored-link,.google-sponsored-links,.google-text-ads,.google-user-ad,.google300x250,.google300x250BoxFooter,.google300x250TextDetailMiddle,.google300x250TextFooter,.google468,.google468_60,.google728x90,.google728x90TextDetailTop,.googleAd,.googleAd-content,.googleAd-list,.googleAd300x250,.googleAd300x250_wrapper,.googleAd728OuterTopAd,.googleAdBox,.googleAdContainer,.googleAdContainerSingle,.googleAdFoot,.googleAdSearch,.googleAdSenseModule,.googleAdTopTipDetails,.googleAdWrapper,.googleAd_160x600,.googleAd_1x1,.googleAd_728x90,.googleAd_body,.googleAdd,.googleAds336,.googleAds728,.googleAds_article_page_above_comments,.googleAdsense,.googleAdsense468x60,.googleAdv1,.googleBannerWrapper,.googleContentAds,.googleInsideAd,.googleLgRect,.googleProfileAd,.googleSearchAd_content,.googleSearchAd_sidebar,.googleSideAd,.googleSkyWrapper,.googleSubjectAd,.google_728x90,.google_ad,.google_ad3,.google_ad336,.google_ad_bg,.google_ad_btn,.google_ad_container,.google_ad_label,.google_ad_mrec,.google_ad_right,.google_ad_wide,.google_add,.google_add_container,.google_admanager,.google_ads,.google_ads_468x60,.google_ads_bom_block,.google_ads_bom_title,.google_ads_content,.google_ads_header11,.google_ads_sidebar,.google_ads_v3,.google_adsense,.google_adsense1,.google_adsense1_footer,.google_adsense_footer,.google_adsense_sidebar_left,.google_afc,.google_afc_ad,.google_afc_articleintext,.google_afc_categorymain,.google_top_adsense,.google_top_adsense1,.google_top_adsense1_footer,.google_top_adsense_footer,.google_txt_ads_mid_big_img,.googlead,.googlead-sidebar,.googleadArea,.googlead_idx_b_97090,.googlead_idx_h_97090,.googlead_iframe,.googlead_outside,.googleadbottom,.googleadcontainer,.googleaddiv,.googleaddiv2,.googleadiframe,.googleads,.googleads-bottommiddle,.googleads-container,.googleads-topmiddle,.googleads_300x250,.googleads_title,.googleadsense,.googleadsrectangle,.googleadvertisemen120x600,.googleadvertisement,.googleadwrap,.googleafc,.googlebanwide,.googleimagead1,.googleimagead2,.googlepostads,.googley_ads,.gp-advertisement-wrapper,.gpAdBox,.gpAdFooter,.gpAds,.gp_adbanner--bottom,.gp_adbanner--top,.gpadvert,.gpt-ad,.gpt-ads,.gr-adcast,.gradientAd,.graphic_ad,.grev-ad,.grey-ad-line,.grey-ad-notice,.greyad,.grid-ad,.grid-advertisement,.grid-item-ad,.gridAd,.gridAdRow,.gridSideAd,.gridad,.gridstream_ad,.group-ad-leaderboard,.group-google-ads,.group_ad,.grv_is_sponsored,.gsAd,.gsfAd,.gsl-ads,.gt_ad,.gt_ad_300x250,.gt_ad_728x90,.gt_adlabel,.gtadlb,.gtop_ad,.guide-ad,.gujAd,.gutter-ad-left,.gutter-ad-right,.gutter-ad-wrapper,.gutterAdHorizontal,.gw-ad,.gx_ad,.h-ad,.h-ad-728x90-bottom,.h-ad-remove,.h-ads,.h-large-ad-box,.h-top-ad,.h11-ad-top,.h_Ads,.h_ad,.half-ad,.halfPageAd,.half_ad_box,.halfpage_ad_container,.hbPostAd,.hbox_top_sponsor,.hcf-ad,.hcf-ad-rectangle,.hcf-cms-ad,.hd-adv,.hdTopAdContainer,.hd_advert,.hd_below_player_ad,.hdr-ad,.hdr-ad-text,.hdr-ads,.hdrAd,.hdr_ad,.head-ads,.headAd,.head_ad,.head_ad_wrapper,.head_ads,.head_adv,.head_advert,.headad,.headadcontainer,.header--ad-space,.header-ad-area,.header-ad-banner,.header-ad-column,.header-ad-frame,.header-ad-new-wrap,.header-ad-space,.header-ad-wrap,.header-ad-wrapper,.header-ad-zone,.header-ad234x60left,.header-ad234x60right,.header-adbox,.header-adplace,.header-ads,.header-ads-container,.header-ads-holder,.header-adsense,.header-adv,.header-advert,.header-advert-container,.header-article-ads,.header-banner-ad,.header-banner-ads,.header-bannerad,.header-google-ads,.header-menu-horizontal-ads,.header-menu-horizontal-ads-content,.header-sponsor,.header-taxonomy-image-sponsor,.header-top-ad,.header15-ad,.header3-advert,.header728-ad,.headerAd1,.headerAdArea,.headerAdCode,.headerAdWrapper,.headerAds,.headerAdspace,.headerAdvert,.headerTextAd,.headerTopAd,.headerTopAds,.header__ads,.header_ad_2,.header_ad_div,.header_ad_space,.header_ads,.header_ads_box,.header_ads_promotional,.header_adsense_banner,.header_advertisement,.header_advertisement_text,.header_advertisment,.header_classified_ads,.header_leaderboard_ad,.header_right_ad,.headerad-720,.headerad-placeholder,.headeradarea,.headeradhome,.headeradinfo,.headeradright,.heading-ad-space,.headline-adblock,.headline-ads,.headline_advert,.heatmapthemead_ad_widget,.heavy_ad,.hero-ad,.hi5-ad,.hidden-ad,.hide-ad,.hideAdMessage,.hideIfEmptyAd,.hidePauseAdZone,.hide_ad,.hide_internal_ad,.highlight-news-ad,.highlights-ad,.highlightsAd,.hioxInternalAd,.hl-ads-holder-0,.hl-post-center-ad,.hm-sec-ads,.hm_advertisment,.hm_top_right_google_ads,.hm_top_right_google_ads_budget,.hn-ads,.home-300x250-ad,.home-activity-ad,.home-ad-container,.home-ad-links,.home-ad1,.home-ad2,.home-ad3,.home-ad4,.home-ad728,.home-ads-container,.home-ads-container1,.home-adv-box,.home-advert,.home-area3-adv-text,.home-body-ads,.home-features-ad,.home-sidebar-ad,.home-sidebar-ad-300,.home-slider-ads,.home-sponsored-links,.home-sticky-ad,.home-top-ad,.home-top-of-page__top-box-ad,.home-top-right-ads,.homeAd1,.homeAd2,.homeAdBox,.homeAdBoxA,.homeAdBoxBetweenBlocks,.homeAdBoxInBignews,.homeAdFullBlock,.homeAdSection,.homeAddTopText,.homeCentreAd,.homeMainAd,.homeMediumAdGroup,.homePageAds,.homeSubAd,.homeTextAds,.home_ad,.home_ad720_inner,.home_ad_300x100,.home_ad_300x250,.home_ad_bottom,.home_ad_large,.home_adblock,.home_advert,.home_advertisement,.home_advertorial,.home_box_latest_ads,.home_mrec_ad,.home_offer_adv,.home_sidebar_ads,.home_sway_adv,.home_top_ad_slider,.home_top_ad_slides,.home_top_right_ad,.home_top_right_ad_label,.homeadnews,.homefront468Ad,.homepage-300-250-ad,.homepage-ad-block-padding,.homepage-ad-buzz-col,.homepage-ad-module,.homepage-advertisement,.homepage-footer-ad,.homepage-footer-ads,.homepage-right-rail-ad,.homepage-sponsoredlinks-container,.homepage300ad,.homepageAd,.homepageFlexAdOuter,.homepageMPU,.homepage__ad,.homepage__ad--middle-leader-board,.homepage__ad--top-leader-board,.homepage__ad--top-mrec,.homepage_block_ad,.homepage_middle_right_ad,.homepageinline_adverts,.homesmallad,.homestream-ad,.hor_ad,.hori-play-page-adver,.horisont_ads,.horiz_adspace,.horizontal-ad-holder,.horizontal-ad2,.horizontalAd,.horizontalAdText,.horizontalAdvert,.horizontal_adblock,.horizontal_ads,.horizontalbtad,.horizontaltextadbox,.horizsponsoredlinks,.hortad,.house-ad,.house-ads,.houseAd,.houseAd1,.houseAdsStyle,.housead,.hover_300ad,.hover_ads,.hoverad,.hp-col4-ads,.hp-content__ad,.hp-inline-ss-service-ad,.hp-main__rail__footer__ad,.hp-slideshow-right-ad,.hp-ss-service-ad,.hp2-adtag,.hpPollQuestionSponsor,.hpPriceBoardSponsor,.hp_320-250-ad,.hp_ad_300,.hp_ad_box,.hp_ad_cont,.hp_ad_text,.hp_horizontal_ad,.hp_t_ad,.hp_w_ad,.hpa-ad1,.hr-ads,.hr_ad,.hr_advt,.hrad,.hss-ad,.hss-ad-300x250_1,.hss_static_ad,.hst-contextualads,.ht_ad_widget,.html-advertisement,.html-block-ads,.html-component-ad-filler,.html5-ad-progress-list,.hyad,.hype_adrotate_widget,.i-bem.adsrv,.i-bem.b-timetable__row[onclick*="awaps"],.i-bem.stripe_type_promo,.i-bem.tv-grid__item-adv,.i-bem.tv-sortable-item.tv-sortable-item_sortable_no,.i360ad,.i_ad,.iab300x250,.iab728x90,.ib-adv,.ib-figure-ad,.ibm_ad_bottom,.ibm_ad_text,.ibt-top-ad,.ic-ads,.ico-adv,.icon-advertise,.icon-myindependentad,.iconAdChoices,.icon_ad_choices,.iconads,.icons-rss-feed + .icons-rss-feed div[class$="_item"],.id-Advert,.id-Article-advert,.idGoogleAdsense,.idMultiAd,.idc-adContainer,.idc-adWrapper,.ident_right_ad,.idgGoogleAdTag,.iframe-ad,.iframe-ads,.iframeAd,.iframead,.iframeadflat,.im-topAds,.image-ad-336,.image-advertisement,.image-viewer-ad,.image-viewer-mpu,.imageAd,.imageAdBoxTitle,.imageAds,.imageGalleryAdHeadLine,.imagead,.imageads,.images-adv,.imagetable_ad,.img-advert,.img_ads,.imgur-ad,.impactAdv,.impo-b-overlay,.impo-b-stitial,.import_video_ad_bg,.imuBox,.in-ad,.in-article-mpu,.in-between-ad,.in-content-ad,.in-node-ad-300x250,.in-page-ad,.in-story-ads,.in-story-text-ad,.inArticleAdInner,.inPageAd,.inStoryAd-news2,.in_article_ad,.in_content_ad_container {display: none !important; color: #72da9a !important; background-color: #a0abfd !important;}.in_content_advert,.in_up_ad_game,.incontentAd,.indEntrySquareAd,.indent-advertisement,.index-adv,.index-after-second-post-ad,.index_728_ad,.index_ad,.index_ad_a2,.index_ad_a4,.index_ad_a5,.index_ad_a6,.index_ad_column2,.index_right_ad,.indexad,.indie-sidead,.indy_googleads,.inf-admedia,.inf-admediaiframe,.info-ads,.info-advert-160x600,.info-advert-300x250,.info-advert-728x90,.info-advert-728x90-inside,.infoBoxThreadPageRankAds,.ingameadbox,.ingameboxad,.ingridAd,.inhouseAdUnit,.inhousead,.injectedAd,.inline-ad,.inline-ad-card,.inline-ad-placeholder,.inline-ad-text,.inline-ad-wrap,.inline-ad-wrapper,.inline-adblock,.inline-advert,.inline-mpu,.inline-mpu-left,.inlineAd,.inlineAdContainer,.inlineAdImage,.inlineAdInner,.inlineAdNotice,.inlineAdText,.inlineAdTour,.inlineAd_content,.inlineAdvert,.inlineAdvertisement,.inlineNewsletterSubscription + .inlineNewsletterSubscription div[class$="_item"],.inlineSideAd,.inline_ad,.inline_ad_container,.inline_ad_title,.inline_ads,.inlinead,.inlinead-tagtop,.inlineadsense,.inlineadtitle,.inlist-ad,.inlistAd,.inner-ad,.inner-ad-disclaimer,.inner-advt-banner-3,.inner-post-ad,.inner468ad,.innerAd300,.innerAdWrapper,.innerAds,.innerContentAd,.inner_ad_advertise,.inner_adv,.inner_big_ad,.innerpostadspace,.inpostad,.ins_adwrap,.insert-advert-ver01,.insertAd_AdSlice,.insertAd_Rectangle,.insertAd_TextAdBreak,.insert_ad,.insert_advertisement,.insertad,.insideStoryAd,.inside_ad,.inside_ad_box,.instructionAdvHeadline,.insurance-ad,.intad,.inteliusAd_image,.interbody-ad-unit,.interest-based-ad,.internal-ad,.internalAd,.internalAdSection,.internalAdsContainer,.internal_ad,.interstitial-ad,.interstitial-ad600,.interstitial468x60,.ion-ad,.ione-widget-dart-ad,.ipm-sidebar-ad-middle,.iprom-ad,.iqadlinebottom,.is-sponsored,.is24-adplace,.isAd,.is_trackable_ad,.isad_box,.island-ad,.islandAd,.islandAdvert,.island_ad,.island_ad_right_top,.islandad,.isocket_ad_row,.item-ad,.item-ad-leaderboard,.item-advertising,.item-housead,.item-housead-last,.item-inline-ad,.itemAdvertise,.item_ads,.itinerary-index-advertising,.ja-ads,.jalbum-ad-container,.jam-ad,.jc_ad_container,.jg-ad-5,.jg-ad-970,.jimdoAdDisclaimer,.job-ads-container,.jobAds,.jobkeywordads,.jobs-ad-box,.jobs-ad-marker,.jobs-information-call-to-action + .jobs-information-call-to-action div[class$="_item"],.joead728,.jp-advertisment-promotional,.js-ad,.js-ad--comment,.js-ad-doubleimu,.js-ad-dynamic,.js-ad-hideable,.js-ad-home,.js-ad-hover,.js-ad-imu,.js-ad-konvento,.js-ad-loaded,.js-ad-loader-bottom,.js-ad-prepared,.js-ad-primary,.js-ad-static,.js-ad-unit-bottom,.js-ad-wrapper,.js-adfliction-iframe,.js-adfliction-standard,.js-advert,.js-advert--vc,.js-advert-upsell-popup,.js-billboard-advert,.js-dfp-ad,.js-dfpAdPosSR,.js-footer-zerg,.js-gptAd,.js-header-ad,.js-native-ad,.js-outbrain-container,.js-site-header-advert,.js-slim-nav-ad,.js-stream-ad,.js-stream-featured-ad,.js-toggle-ad,.js_adContainer,.js_contained-ad-container,.jsx-adcontainer,.juicyads_300x250,.jumboAd,.jw-ad,.jw-ad-label,.jw-ad-media-container,.jw-ad-visible,.kads-main,.kd_ads_block,.kdads-empty,.kdads-link,.keyword-ads-block,.kip-advertisement,.kip-banner-ad,.kitara-sponsored,.knowledgehub_ad,.kopa-ads-widget,.ktz-bannersingletop,.kw_advert,.kw_advert_pair,.l-350-250-ad-words,.l-ad-300,.l-ad-728,.l-adsense,.l-bottom-ads,.l-container &gt; #fishtank,.l-header-advertising,.l300x250ad,.l_ad_sub,.label-ad,.labelads,.labeled_ad,.lads[width="100%"][style="background:#FFF8DD"],.landing-feed--ad-vertical,.landing-page-ads,.landingAdRail,.landing_adbanner,.large-btn-ad,.large-right-ad,.largeAd,.largeRecAdNewsContainerRight,.largeRectangleAd,.largeUnitAd,.large_ad,.large_add_container,.largesideadpane,.last-left-ad,.last-right-ad,.lastAdvertorial,.lastLiAdv,.lastRowAd,.lastads,.lastpost_advert,.latest-posts__sidebar-ad-container,.layer-ad-bottom,.layer-ad-top,.layer-xad,.layer_text_ad,.layeradinfo,.layout-ad,.layout_communityad_right_ads,.lazy-ad,.lazy-adv,.lazyad,.lazyload_ad,.lazyload_ad_article,.lb-ad,.lb-adhesion-unit,.lbc-ad,.lbl-advertising,.lblAdvert,.lcontentbox_ad,.ld-ad,.ld-ad-inner,.lead-ad,.lead-ads,.lead-advert,.lead-board-ad-cont-home,.leadAd,.leader-ad,.leaderAd,.leaderAdSlot,.leaderAdTop,.leaderAdvert,.leaderBoardAdHolder,.leaderBoardAdvert,.leaderOverallAdArea,.leader_ad,.leader_aol,.leaderad,.leaderboard-ad-belt,.leaderboard-ad-container,.leaderboard-ad-green,.leaderboard-ad-grid,.leaderboard-ad-inner,.leaderboard-ad-main,.leaderboard-ad-module,.leaderboard-ad-unit,.leaderboard-adblock,.leaderboard-advert,.leaderboard-advertisement,.leaderboardAd,.leaderboardAdContainer,.leaderboardAdContainerInner,.leaderboardFooter_ad,.leaderboard_ad,.leaderboard_ad_top_responsive,.leaderboard_ad_unit,.leaderboard_ad_unit_groups,.leaderboard_ads,.leaderboard_adv,.leaderboard_banner_ad,.leaderboard_text_ad_container,.leaderboardad,.leaderboardadmiddle,.leaderboardadtop,.leaderboardadwrap,.leadgenads,.left-ad,.left-ad180,.left-ads,.left-advert,.left-column-rectangular-ad,.left-column-virtical-ad,.left-rail-ad,.left-rail-ad__wrapper,.left-rail-horizontal-ads,.left-sidebar-box-ads,.left-takeover-ad,.left-takeover-ad-sticky,.left120X600AdHeaderText,.leftAdColumn,.leftAdContainer,.leftAd_bottom_fmt,.leftAd_top_fmt,.leftAds,.leftAdvert,.leftCol_advert,.leftColumnAd,.leftPaneAd,.left_300_ad,.left_ad,.left_ad_160,.left_ad_areas,.left_ad_box,.left_ad_container,.left_adlink,.left_ads,.left_adsense,.left_advertisement_block,.left_col_ad,.left_google_add,.left_sidebar_wide_ad,.leftadd,.leftadtag,.leftbar_ad_160_600,.leftbarads,.leftbottomads,.leftnavad,.leftrighttopad,.leftsidebar_ad,.lefttopad1,.legacy-ads,.legal-ad-choice-icon,.lgRecAd,.lg_ad,.liboxads,.ligatus,.lightad,.lijit-ad,.linead,.linkAD,.link_adslider,.link_advertise,.linkads,.linkedin-sponsor,.links_google_adx,.listAdvertGenerator,.listicle--ad-rail,.listing-content-ad-container,.listing-inline-ad,.listing-item-ad,.listingAd,.listing__ads--right,.listings-ad-block,.listings-bottom-ad-w,.listings_ad,.literatumAd,.little_vid_ads,.live-search-list-ad-container,.live_tv_sponsorship_ad,.liveads,.liveblog__highlights__ad,.livingsocial-ad,.ljad,.llsAdContainer,.lnad,.loadadlater,.local-ads,.localad,.location-ad,.log_ads,.logoAd-hanging,.logoAds,.logo_AdChoices,.logoad,.logoutAd,.logoutAdContainer,.longAd,.longAdBox,.longAds,.longBannerAd,.long_ad,.longform-ad,.loop-ad,.loop_google_ad,.lottery-ad-container,.lower-ad,.lower-ads,.lowerAd,.lowerAds,.lowerContentBannerAd,.lowerContentBannerAdInner,.lower_ad,.lp_az_billboard__via_content_header_ad_,.lpt_adsense_bottom_content,.lqm-ads,.lqm_ad,.lr-ad,.lr_skyad,.lsn-yahooAdBlock,.lt_ad_call,.luma-ad,.luxeAd,.lx_ad_title,.m-ContentAd,.m-ad,.m-ad--open,.m-ad-tvguide-box,.m-advertisement,.m-advertisement--container,.m-gallery-overlay--ad-top,.m-header-ad,.m-header-ad--slot,.m-in-content-ad,.m-in-content-ad--slot,.m-in-content-ad-row,.m-in-content-ad-row--bonus,.m-layout-advertisement,.m-mem--ad,.m-sidebar-ad,.m-sidebar-ad--slot,.m-sponsored,.m4-adsbygoogle,.mTopAd,.m_ad1,.m_ad300,.m_banner_ads,.macAd,.macad,.mad_adcontainer,.madison_ad,.magad,.magazine_box_ad,.main-ad,.main-ads,.main-advert,.main-advertising,.main-column-ad,.main-footer-ad,.main-right-ads,.main-tabs-ad-block,.main-top-ad-container,.mainAd,.mainAdContainer,.mainAds,.mainEcoAd,.mainLeftAd,.mainLinkAd,.mainRightAd,.main_ad,.main_ad_adzone_5_ad_0,.main_ad_adzone_6_ad_0,.main_ad_adzone_7_ad_0,.main_ad_adzone_7_ad_1,.main_ad_adzone_8_ad_0,.main_ad_adzone_8_ad_1,.main_ad_adzone_9_ad_0,.main_ad_adzone_9_ad_1,.main_ad_bg,.main_ad_bg_div,.main_ad_container,.main_adbox,.main_ads,.main_adv,.main_intro_ad,.main_right_ad,.main_wrapper_upper_ad_area,.mainadWrapper,.mainadbox,.mantis-ad,.mantis__recommended__item--external,.mantis__recommended__item--sponsored,.manual-ad,.mapAdvertising,.map_google_ad,.map_media_banner_ad,.mapped-ad,.marginadsthin,.marginalContentAdvertAddition,.market-ad,.market-ad-small,.marketplace-ad,.marketplaceAd,.marketplaceAdShell,.markplace-ads,.marquee-ad,.master_post_advert,.masthead-ad,.masthead-ad-control,.masthead-ads,.mastheadAds,.masthead_ad_banner,.masthead_ads_new,.masthead_topad,.matador_sidebar_ad_600,.match-results-cards-ad,.mb-advert,.mb-advert__leaderboard--large,.mb-advert__mpu,.mb-advert__tweeny,.mb-block--advert-side,.mb-list-ad,.mcx-content-ad,.md-adv,.md-advertisement,.mdl-ad,.mdl-quigo,.medColModAd,.medRecContainer,.medRect,.med_ad_box,.media--ad,.media-ad-rect,.media-advert,.media-network-ad,.media-temple-ad-wrapper-link,.mediaAd,.mediaAdContainer,.mediaResult_sponsoredSearch,.media_ad,.mediamotive-ad,.medium-google-ad-container,.medium-rectangle-ad,.medium-rectangle-advertisement,.mediumRectagleAd,.mediumRectangleAd,.mediumRectangleAdvert,.medium_ad,.medium_rectangle_ad_container,.mediumad,.medo-ad-section,.medo-ad-wideskyscraper,.medrec-ad,.medrect-ad,.medrect-ad2,.medrectAd,.medrect_ad,.medrectadv4,.member-ads,.memberAdsContainer,.member_ad_banner,.meme_adwrap,.memrise_ad,.menu-ad,.menuAd,.menuAds-cage,.menuItemBannerAd,.menuad,.menueadimg,.merchantAdsBoxColRight,.mess_div_adv,.messageBoardAd,.message_ads,.metaRedirectWrapperBottomAds,.metaRedirectWrapperTopAds,.meta_ad,.metaboxType-sponsor,.mf-ad300-container,.mg_box_ads,.mgid-wrapper,.micro_ad,.mid-ad-wrapper,.mid-advert,.mid-page-2-advert,.mid-post-ad,.midAd,.mid_4_ads,.mid_article_ad_label,.mid_banner_ad,.mid_page_ad,.mid_page_ad_big,.mid_right_ads,.mid_right_inner_id_ad,.midad,.middle-ad,.middle-ads,.middle-ads728,.middle-footer-ad,.middleAd,.middleAdLeft,.middleAdMid,.middleAdRight,.middleAds,.middleBannerAd,.middle_ad,.middle_ad_responsive,.middle_ads,.middlead,.middleadouter,.midpost-ad,.min_navi_ad,.mini-ad,.mini-ads,.miniHeaderAd,.mini_ads,.mini_ads_bottom,.mini_ads_right,.miniad,.miniads,.misc-ad,.misc-ad-label,.miscAd,.mks_ads_widget,.ml-advert,.ml-adverts-sidebar-1,.ml-adverts-sidebar-2,.ml-adverts-sidebar-4,.ml-adverts-sidebar-bottom-1,.ml-adverts-sidebar-bottom-2,.ml-adverts-sidebar-bottom-3,.ml-adverts-sidebar-random,.mlaAd,.mm-ad-mpu,.mm-ad-sponsored,.mmc-ad,.mmc-ad-wrap-2,.mmcAd_Iframe,.mnopolarisAd,.mntl-gpt-adunit,.mo_googlead,.mobile-ad,.mobile-related-ad,.mobileAdWrap,.mobileAdvertInStreamHighlightText,.mobileAppAd,.mobile_ad_container,.mobile_featuredad,.mobile_featuredad_article,.mobileadbig,.mobilesideadverts,.mod &gt; ._jH + .rscontainer,.mod-ad,.mod-ad-1,.mod-ad-2,.mod-ad-box,.mod-ad-lrec,.mod-ad-n,.mod-ad-risingstar,.mod-adblock,.mod-adcpc,.mod-ads,.mod-big-ad-switch,.mod-big-banner-ad,.mod-google-ads,.mod-google-ads-container,.mod-horizontal-ad,.mod-sponsored-links,.mod-trbad,.mod-tss-ads-wrapper,.mod-vertical-ad,.mod_ad,.mod_ad_imu,.mod_ad_t25,.mod_ad_text,.mod_ad_top,.mod_admodule,.mod_ads,.mod_index_ad,.mod_openads,.mod_r_ad,.mod_r_ad1,.modal-ad,.module--ad,.module-ad-small,.module-ads,.module-advert,.module-advertisement,.module-image-ad,.module-rectangleads,.module-sponsored-ads,.module-zerg,.moduleAd,.moduleAdSpot,.moduleAdvert,.moduleAdvertContent,.moduleBannerAd,.module_ad,.module_ad_disclaimer,.module_box_ad,.module_header_sponsored,.modulegad,.moduletable-adsponsor,.moduletable-advert,.moduletable-bannerAd6,.moduletable-centerad,.moduletable-googleads,.moduletable-rectangleads,.moduletable_ad-right,.moduletable_ad160x600_center,.moduletable_ad300x250,.moduletable_adtop,.moduletable_advertisement,.moduletable_top_ad,.moduletableadvert,.moduletableexclusive-ads,.moduletablesquaread,.moduletabletowerad,.modulo-publicidade,.mom-ad,.momizat-ads,.moneyball-ad,.monitor-g-ad-300,.monitor-g-ad-468,.monsterad,.moreAdBlock,.mos-ad,.mosaicAd,.mostpop_sponsored_ad,.motherboard-ad,.mp-ad,.mpsponsor,.mpu-ad,.mpu-ad-con,.mpu-ad-top,.mpu-advert,.mpu-c,.mpu-container-blank,.mpu-footer,.mpu-fp,.mpu-holder,.mpu-leaderboard,.mpu-left,.mpu-mediatv,.mpu-right,.mpu-title,.mpu-top-left,.mpu-top-left-banner,.mpu-top-right,.mpu-unit,.mpu-wrapper,.mpu01,.mpu250,.mpu600,.mpuAd,.mpuAdArea,.mpuAdSlot,.mpuAdvert,.mpuArea,.mpuBox,.mpuContainer,.mpuMiddle,.mpuTextAd,.mpu_Ad,.mpu_ad,.mpu_advert,.mpu_advertisement_border,.mpu_container,.mpu_gold,.mpu_holder,.mpu_placeholder,.mpu_platinum,.mpu_side,.mpu_text_ad,.mpuad,.mpuads,.mpuholderportalpage,.mr-dfp-ad,.mrec_advert,.ms-ad-superbanner,.ms-ads-link,.ms_header_ad,.msat-adspace,.msfg-shopping-mpu,.msg-ad,.msgad,.mslo-ad,.mslo-ad-300x250,.mslo-ad-728x66,.mslo-ad-holder,.msnChannelAd,.msn_ad_wrapper,.mst_ad_top,.mt-ad-container,.mt-header-ads,.mt_adv,.mt_adv_v,.mtv-adChoicesLogo,.mtv-adv,.multiad2,.multiadwrapper,.multiple-ad-tiles,.mvAd,.mvAdHdr,.mvp_ad_widget,.mvp_block_type_ad_module,.mvw_onPageAd1,.mw &gt; #rcnt &gt; #center_col &gt; #taw &gt; #tvcap &gt; .c,.mw &gt; #rcnt &gt; #center_col &gt; #taw &gt; .c,.mwaads,.mx-box-ad,.mxl_ad_inText_250,.my-ad250x300,.my-ads,.myAds,.myAdsGroup,.myTestAd,.mypicadsarea,.myplate_ad,.nSponsoredLcContent,.nSponsoredLcTopic,.n_ad,.naMediaAd,.nadvt300,.narrow_ad_unit,.narrow_ads,.native-ad,.native-ad-item,.native-ad-link,.native-ad-promoted-provider,.native-adv,.nativeAd,.nativeAd-sponsor-position,.nativeMessageAd,.nativead,.nature-ad,.nav-adWrapper,.navAdsBanner,.navBads,.nav_ad,.nav_textads,.navad,.navadbox,.navcommercial,.navi_ad300,.naviad,.nba300Ad,.nba728Ad,.nbaAdNotice,.nbaAroundAd2,.nbaT3Ad160,.nbaTVPodAd,.nbaTextAds,.nbaTwo130Ads,.nbc_Adv,.nbc_ad_carousel_wrp,.nc-dealsaver-container,.nc-exp-ad,.nda-ad,.nda-ad--leaderboard,.ndmadkit,.netPost_ad1,.netPost_ad3,.netads,.netshelter-ad,.network-ad-two,.new-ad-box,.new-ads-scroller,.newHeaderAd,.newPex_forumads,.newTopAdContainer,.new_ad1,.newad,.newad1,.newadsky-wrapper,.news-ad,.news-ad-block-a,.news-place-ad-info,.news_ad_box,.news_article_ad_google,.news_footer_ad_container,.newsad,.newsblock-ads,.newsfeed_adunit,.newsletter_ad,.newsstackedAds,.newstream_ad,.newsviewAdBoxInNews,.newsvinemsn_adtype,.nexusad,.nf-adbox,.ngs-adv-async,.ninemsn-footer-ad,.ninth-box-ad,.nl2ads,.nn-mpu,.no1postadvert,.noAdForLead,.noTitleAdBox,.node-content-ad,.node-left-ad-under-img,.node_ad_wrapper,.nomobilead,.non-empty-ad,.nonsponserIABAdBottom,.normalAds,.normalad,.northad,.not-an-ad-header,.note-advertisement,.npAdGoogle,.npSponsorTextAd,.nrAds,.nr_partners,.nrelate .nr_partner,.nsAdRow,.nscr300Ad,.nscrMidAdBlock,.nscrT1AdBlock,.ntnlad,.ntv-ad,.nu2ad,.nuffnangad,.nw-ad,.nw-ad-468x60,.nw-ad-label,.nw-taboola,.nw-top-ad,.nzs-ads,.o-ads,.o-ads--center,.oad-ad,.oas-ad,.oas-bottom-ads,.oas-leaderboard-ads,.oasInAds,.oas_ad,.oas_add,.oas_advertisement,.oas_sidebar_v7,.oasads,.ob_ads_header,.ob_container .item-container-obpd,.ob_container a[data-redirect^="http://paid.outbrain.com/network/redir?"],.ob_dual_right &gt; .ob_ads_header ~ .odb_div,.ob_nm_paid,.oba_message,.ocp-sponsor,.odc-nav-ad,.ody-sponsor,.offer_sponsoredlinks,.oi_horz_ad_container,.oio-link-sidebar,.oio-openslots,.oio-zone-position,.old-advertorial-block,.omnitureAdImpression,.on-demand-ad,.on_single_ad_box,.one-ad,.oneColumnAd,.onethirdadholder,.onf-ad,.onsite-ads-728w,.opaAd,.openads,.openadstext_after,.openx-ad,.openx_10,.openx_11,.openx_15,.openx_16,.openx_17,.openx_3,.openx_4,.openx_ad,.openx_frame,.openxbuttons,.optional-ad,.os-advertisement,.osan-ads,.other-posts-ads,.other_adv2,.otherheader_ad,.otj_adspot,.outbrain_ad_li,.outbrain_dual_ad_whats_class,.outbrain_ul_ad_top,.outer-ad-container,.outerAdWrapper,.outerAd_300x250_1,.outeradcontainer,.outermainadtd1,.outgameadbox,.outside_ad,.ovAdLabel,.ovAdPromo,.ovAdSky,.ovAdartikel,.ov_spns,.ovadsenselabel,.overflow-ad,.overlay-ad,.overlay-ad-container,.overlay_ad,.ox-holder,.ox_ad,.ozadtop,.ozadtop3,.p2_right_ad {display: none !important; color: #72da9a !important; background-color: #a0abfd !important;}.p75_sidebar_ads,.pAdsBlock2,.p_adv,.p_topad,.pa_ads_label,.paddingBotAd,.pads2,.padvertlabel,.page-ad-container,.page-advert,.page-header-ad,.page-pencil-ad-container-bottom,.pageAds,.pageBottomGoogleAd,.pageFooterAd,.pageGoogleAd,.pageGoogleAdFlat,.pageGoogleAdSubcontent,.pageGoogleAds,.pageGoogleAdsContainer,.pageHeaderAd,.pageHeaderAds,.pageLeaderAd,.pageSkinAds,.page_content_right_ad,.pagead,.pagebuilder_ad,.pageclwideadv,.pagefair-acceptable,.pagenavindexcontentad,.pair_ads,.pan-ad-inline,.pan-ad-inline1,.pan-ad-inline2,.pan-ad-inline3,.pan-ad-sidebar-top,.pan-ad-sidebar1,.pan-ad-sidebar2,.pane-ad-ads-all,.pane-ad-block,.pane-ad-manager-bottom-right-rail-circ,.pane-ad-manager-middle,.pane-ad-manager-middle1,.pane-ad-manager-right,.pane-ad-manager-right1,.pane-ad-manager-right2,.pane-ad-manager-right3,.pane-ad-manager-shot-business-circ,.pane-ad-manager-subscribe-now,.pane-adonews-ad,.pane-ads,.pane-adv-manager,.pane-bzads-bzadwrapper-120x60-partner,.pane-bzads-fintech-300x250,.pane-dart-dart-tag-gfc-ad-rail-3,.pane-dfp-dfp-ad-atf-728x90,.pane-frontpage-ad-banner,.pane-frontpage-ad-banner-hk,.pane-mp-advertisement-rectangle,.pane-openx,.pane-site-ads,.pane-sponsored-links,.pane-textlinkads-26,.pane-tw-ad-master-ad-300x250a,.pane-tw-ad-master-ad-300x600,.pane-tw-adjuggler-tw-adjuggler-half-page-ad,.pane-two-column-ads,.pane_ad_wide,.panel-ad,.panel-ad-mr,.panel-advert,.panel-body-adsense,.panel__column--vc-advert,.panel__row--with-vc-advert,.panel_ad,.paneladvert,.paralaxBackgorundAdwords,.partial-ad,.partner-ad,.partner-ads-container,.partner-adsonar,.partnerAd,.partnerAdTable,.partner_ads,.partnerad_container,.partnersTextLinks,.patronad,.pb-ad,.pb-ad-curated,.pb-f-ad-flex,.pb-f-ad-leaderboard,.pb-f-ads-ad,.pb-f-ads-dfp-big-box-300x250,.pb-f-ads-dfp-box-300x450,.pb-f-ads-dfp-halfpage-300x600,.pb-f-ads-dfp-leaderboard-728x90,.pb-f-ads-taboola-article-well,.pb-f-ads-taboola-right-rail-alt,.pb-mod-ad-flex,.pb-mod-ad-leaderboard,.pc-ad,.pcads_widget,.pd-ads-mpu,.peg_ad,.pencil-ad,.pencil-ad-container,.pencil_ad,.performancingads_region,.pf_content_ad,.pf_sky_ad,.pf_top_ad,.pfimgAds,.pg-ad-block,.pgAdSection_Home_MasterSponsers,.ph-ad,.ph-ad-desktop,.ph-ad-mediumrectangle,.photo-ad,.photoad,.photobox-adbox,.pics_detail_ad,.pics_footer_ad,.picto_ad,.pin-ad,.pixtrack-adcode,.pkgTemplateAdWrapper,.pl__superad,.pl_adv1,.pl_adv1_t,.pl_adv1_wr,.pl_adv1_wr2,.pla_ad,.place-ads,.placeholder-ad,.placeholderAd,.play-page-ads,.playAds1,.playAds2,.player-ads,.player-leaderboard-ad-wrapper,.player-under-ad,.playerAdv,.player_ad2,.player_ad_box,.player_page_ad_box,.plistaList &gt; .itemLinkPET,.plistaList &gt; .plista_widget_underArticle_item[data-type="pet"],.plista_inimg_box,.plista_widget_belowArticleRelaunch_item[data-type="pet"],.plista_widget_i300x250,.plista_widget_retrescoAd_1,.plista_widget_retrescoAd_2,.pm-ad-zone,.pm-banner-ad,.pmad-in2,.pmg-sponsoredlinks,.pn-ad,.pn_dfpads,.pnp_ad,.poac_ads_text,.pod-ad,.pod-ad-300,.pod-ad-box,.podRelatedAdLinksWidget,.podSponsoredLink,.poll_sponsor_ad,.pop-up-ad,.popAdContainer,.popadtext,.popunder-adv,.popup-ad,.popupAd,.popupAdOuter,.popupAdWrapper,.popup_ad,.portalCenterContentAdBottom,.portalCenterContentAdMiddle,.portalCenterContentAdTop,.portal_searchresultssponsoredlist,.portalcontentad,.pos_advert,.post-adsense-bottom,.post-advert,.post-advertisement,.post-full-ad,.post-full-ad-wrapper,.post-googlead,.post-load-ad,.post-nativeadcarousel,.postAd,.postWideAd,.post__ad,.post__article-top-ad-wrapper,.post__body-ad-center,.post__inarticle-ad-template,.post_ads,.post_advert,.post_seperator_ad,.post_sponsor_unit,.post_sponsored,.postads,.postadsense,.postbit_ad_block,.postbit_adbit_register,.postbit_adcode,.postbit_adcode_old,.postbody_ads,.poster-ad-asset-module,.poster_ad,.postfooterad,.postgroup-ads,.postgroup-ads-middle,.power_by_sponsor,.pp_ads_global_before_menu,.ppb_ads,.ppp_interior_ad,.ppr_priv_sponsored_coupon_listing,.pq-ad,.pr-ad-tower,.pr-widget,.pre-roll-ad,.pre-title-ad,.prebodyads,.premium-ad,.premium-ads,.premium-adv,.premiumInHouseAd,.premium_ad_container,.premiumad,.preview-ad,.pricead-border,.primary-ad,.primary-advertisment,.primary_sidebar_ad,.printAds,.pro_ad_adzone,.pro_ad_system_ad_container,.pro_ad_zone,.prod_grid_ad,.product-ads,.product-bar-ads,.product-inlist-ad,.profile-ad-container,.profile__ad-wrapper,.profile_ad_bottom,.profile_ad_top,.promo-ad,.promo-box--ad,.promo-box--leaderboard-ad,.promo-class-brand-getprice,.promoAds,.promoAdvertising,.promo_ad,.promo_ads,.promo_border,.promoad,.promoboxAd,.promotionTextAd,.promotional-feature-ads,.proof_ad,.propel-ad,.proper-ad-unit,.ps-ad,.ps-ligatus_placeholder,.pt_ad03,.pt_col_ad02,.pubDesk,.publiboxright300,.publication-ad,.publicidadSuperior,.publicidad_horizontal,.publicidade-dotted,.publicidade-full-banner,.publicity-box,.puff-ad,.puff-advertorials,.pull-ad,.pull_top_ad,.pullad,.pulse360ad,.pulsir-ad,.puppyAd,.purchad,.push--ad,.push-ad,.pushDownAd,.pushdownAd,.pw_wb_ad_300x250,.pwgAdWidget,.pxz-ad-widget,.pxz-taskbar-anchor,.pyv-afc-ads-container,.qa_ad_left,.qm-ad,.qm-ad-content,.qm-ad-content-news,.quads-ad2,.quads-ad2_widget.first,.quads-ad4,.quads-location,.quick-tz-ad,.quicklinks-ad,.quigo,.quigo-ad,.quigoAdCenter,.quigoAdRight,.quigoMod,.quigoads,.quotead,.qzvAdDiv,.r-ad,.r7ad,.r_ad,.r_ad_1,.r_ad_box,.r_adbx_top,.r_ads,.r_col_add,.ra[align="left"][width="30%"],.ra[align="right"][width="30%"],.ra[width="30%"][align="right"] + table[width="70%"][cellpadding="0"],.rad_container,.radium-ad-spot,.radium-builder-widget-ad-spot,.raff_ad,.rail-article-sponsored,.rail__ad,.rail__mps-ad,.rail_ad,.railad,.railadspace,.ramsay-advert,.rbFooterSponsors,.rc-cta[data-target],.rc-item-wrapper,.rc_ad_300x100,.rc_ad_300x250,.rd_header_ads,.rdio-homepage-widget,.re-Ads-l,.readerads,.readermodeAd,.reading-list-rail-taboola,.realtor-ad,.rec-sponsored,.rec_ad,.rec_article_footer,.rec_article_right,.rec_container__right,.rec_container_footer,.rec_container_right,.rec_title_footer,.recent-post-widget-ad,.recentAds,.recent_ad_holder,.recommend-ad-one,.recommend-ad-two,.rect-ad,.rect-ad-1,.rect_ad,.rect_ad_module,.rect_advert,.rectad,.rectadv,.rectangle-ad,.rectangle-ad-container,.rectangle-embed-ad,.rectangleAd,.rectangleAdContainer,.rectanglead,.rectangleads,.redads_cont,.reedwan_adds300x250_widget,.referrerDetailAd,.refreshable_ad,.region-ads,.region-ads-1,.region-banner-ad,.region-dfp-ad-content-bottom,.region-dfp-ad-content-top,.region-dfp-ad-footer,.region-dfp-ad-header,.region-footer-ad-full,.region-header-ad,.region-header-ads,.region-leader-ad-bottom,.region-leader-ad-top,.region-middle-ad,.region-regions-ad-top,.region-regions-ad-top-inner,.region-top-ad,.region-widget-ad-top-0,.regular_728_ad,.regularad,.reklam-block,.reklam2,.reklam728,.reklam_mgid,.reklam_mgid1,.reklama-c,.reklama-vert,.reklama1,.reklame-right-col,.reklame-wrapper,.reklamka,.rel_ad_box,.related-ad,.related-ads,.related-al-ads,.related-al-content-w150-ads,.related-content-story__stories--sponsored-1,.related-content-story__stories--sponsored-2,.related-content-story__stories--sponsored-3,.related-guide-adsense,.relatedAds,.relatedContentAd,.related_post_google_ad,.relatesearchad,.remads,.remnant_ad,.remove-ads,.removeAdsLink,.removeAdsStyle,.resads-adspot,.residentialads,.resourceImagetAd,.respAds,.responsive-ad,.responsiveAdHiding,.responsiveAdsense,.result-ad,.result-sponsored,.resultAd,.result_ad,.result_item_ad-adsense,.results-ads,.resultsAdsBlockCont,.results_sponsor_right,.rev_square_side_door,.revcontent-main-ad,.reviewMidAdvertAlign,.review_ad1,.reviewpage_ad2,.reviews-box-ad,.rf_circ_ad_460x205,.rg-ad,.rght300x250,.rgt-300x250-ad,.rgt-ad,.rgt_ad,.rh-ad,.rhads,.rhc-ad-bottom,.rhs-ad,.rhs-ads-panel,.rhs-advert-container,.rhs-advert-link,.rhs-advert-title,.rhs_ad_title,.rhsad,.rhsadvert,.rhsvw[style="background-color:#fff;margin:0 0 14px;padding-bottom:1px;padding-top:1px;"],.ribbon-ad-container,.ribbon-ad-matte,.right-ad-300x250,.right-ad-block,.right-ad-container,.right-ad-holder,.right-ad-tagline,.right-ad2,.right-ads,.right-ads2,.right-adsense,.right-adv,.right-advert,.right-col-ad,.right-column-ad,.right-navAdBox,.right-rail-ad,.right-rail-ad-banner,.right-rail-ad-bottom-container,.right-rail-ad-top-container,.right-rail-broker-ads,.right-rail__ad,.right-rail__container--ad,.right-side-ad,.right-side-ads,.right-sidebar-box-ad,.right-sidebar-box-ads,.right-square-ad-blocks,.right-takeover-ad,.right-takeover-ad-sticky,.right-top-ad,.rightAD,.rightAd1,.rightAd2,.rightAdBox,.rightAdColumn,.rightAdContainer,.rightAd_bottom_fmt,.rightAd_top_fmt,.rightAds,.rightAds_ie_fix,.rightAdvert,.rightAdverts,.rightBoxAd,.rightBoxMidAds,.rightColAd,.rightColAdBox,.rightColumnAd,.rightColumnAdd,.rightColumnAdsTop,.rightColumnRectAd,.rightHeaderAd,.rightRailAd,.rightRailMiddleAd,.rightSecAds,.rightSideBarAd,.rightSideSponsor,.rightTopAdWrapper,.right_ad_160,.right_ad_box,.right_ad_box1,.right_ad_common_block,.right_ad_innercont,.right_ad_text,.right_ad_top,.right_ad_unit,.right_ads,.right_adsense_box_2,.right_adskin,.right_adv,.right_advert,.right_advertise_cnt,.right_advertisement,.right_block_advert,.right_box_ad,.right_box_ad_rotating_container,.right_col_ad,.right_col_ad_300_250,.right_column_ads,.right_content_ad,.right_content_ad_16,.right_google_ads,.right_hand_advert_column,.right_image_ad,.right_long_ad,.right_outside_ads,.right_picAd,.right_side-partyad,.right_side_ads,.right_side_box_ad,.right_sponsor_main,.rightad250,.rightad300,.rightad600,.rightad_1,.rightad_2,.rightadbig,.rightadblock,.rightadbox1,.rightadd,.rightads,.rightadunit,.rightbigcolumn_ads,.rightbigcolumn_ads_nobackground,.rightbox_content_ads,.rightboxads,.rightcol-adbox,.rightcol-block-ads,.rightcol_boxad,.rightcol_div_openx2,.rightcolads,.rightcoladvert,.rightcoltowerad,.rightmenu_ad,.rightnav_adsense,.rightpanelad,.rightrail-ad-block,.rightrail_ads,.rightsideAd,.righttop-advt,.ringtone-ad,.risingstar-ad,.risingstar-ad-inner,.riverAdsLoaded,.riverSponsor,.rmx-ad,.rnav_ad,.rngtAd,.rockmelt-ad,.rockmeltAdWrapper,.rolloverad,.rot_ads,.rotating-ad,.rotating-ads,.rotatingAdvertisement,.rotatingBannerWidget,.rotatingadsection,.rotator_ad_overlay,.round_box_advert,.roundedCornersAd,.roundingrayboxads,.row_header_ads,.rowad,.rowgoogleads,.rr-300x250-ad,.rr-300x600-ad,.rr_ads,.rr_skyad,.rs_ad_bot,.rs_ad_top,.rscontainer &gt; .ellip,.rside_adbox,.rtAdFtr,.rtAd_bx,.rtSideHomeAd,.rt_ad,.rt_ad1_300x90,.rt_ad_300x250,.rt_ad_call,.rt_advert_name,.rt_el_advert,.rtd_ads_text,.rtmad,.rtmm_right_ad,.runner-ad,.s-ad,.s-ads,.s-hidden-sponsored-item,.s2k_ad,.sType-ad,.s_ad,.s_ad2,.s_ad_160x600,.s_ad_300x250,.s_ads,.s_ads_label,.s_sponsored_ads,.sa_AdAnnouncement,.sadvert,.sam-ad,.sam_ad,.savvyad_unit,.say-center-contentad,.sb-ad,.sb-ad-margin,.sb-ad-sq-bg,.sb-ad2,.sb-ad3,.sb-ads,.sb-ads-here,.sb-top-sec-ad,.sbAd,.sbAdUnitContainer,.sbTopadWrapper,.sb_ad,.sb_ad_holder,.sb_adsN,.sb_adsNv2,.sb_adsW,.sb_adsWv2,.sc-ad,.sc_ad,.sc_iframe_ad,.scad,.scanAd,.scb-ad,.scc_advert,.schedule_ad,.sci-ad-main,.sci-ad-sub,.scoopads,.scraper_ad_unit,.script-ad,.script_ad_0,.scroll-ads,.scrolling-ads,.search-ad,.search-ad-no-ratings,.search-advertisement,.search-message-container-ad,.search-results-ad,.search-results__guadeloupe,.search-sponsor,.search-sponsored,.searchAd,.searchAdTop,.searchCenterBottomAds,.searchCenterTopAds,.searchResultAd,.searchRightBottomAds,.searchRightMiddleAds,.searchSponsorItem,.searchSponsoredResultsBox,.searchSponsoredResultsList,.search_ad_box,.search_column_results_sponsored,.search_inline_web_ad,.search_results_ad,.search_results_sponsored_top,.sec-ad,.sec_headline_adbox,.second-post-ads-wrapper,.secondary-advertisment,.secondaryAdModule,.secondary_ad,.sectiads,.section-ad,.section-ad-related,.section-ad-wrapper,.section-ad2,.section-adbox-bottom,.section-adbox1,.section-ads,.section-adtag,.section-advert-banner,.section-aside-ad,.section-aside-ad2,.section-front__side-bar-ad,.section-front__top-ad,.section-publicity,.section-result[data-result-ad-type],.section_ad,.section_ad_left,.section_mpu_wrapper,.section_mpu_wrapper_wrapper,.sector-widget__tiny-ad,.selection-grid-advert,.selfServeAds,.seoTopAds,.sepContentAd,.series-ad,.serp-adv,.serp-adv-item,.serp-adv__head,.serp-list + .serp-list &gt; .serp-adv__head,.serp-list + .serp-list &gt; .serp-adv__head ~ .serp-item,.serp_sponsored,.servedAdlabel,.serviceAd,.servsponserLinks,.set_ad,.sex-party-ad,.sfsp_adadvert,.sgAd,.sh-ad-box,.sh-ad-section,.sh-leftAd,.shadvertisment,.shareToolsItemAd,.shift-ad,.shoppingGoogleAdSense,.shortads,.shortadvertisement,.showAdContainer,.showAd_No,.showAd_Yes,.showad_box,.showcaseAd,.showcasead,.shunno_widget_sidebar_advert,.si-adRgt,.sidbaread,.side-ad-120-bottom,.side-ad-120-middle,.side-ad-120-top,.side-ad-160-bottom,.side-ad-160-middle,.side-ad-160-top,.side-ad-300,.side-ad-300-bottom,.side-ad-300-middle,.side-ad-300-top,.side-ad-big,.side-ad-blocks,.side-ad-container,.side-ad-inner,.side-ads,.side-ads-block,.side-ads-wide,.side-ads300,.side-advert,.side-bar-ad-position2,.side-mod-preload-big-ad-switch,.side-rail-ad-wrap,.side-sky-banner-160,.side-video-ads-wrapper,.sideAdLeft,.sideAdTall,.sideAdWide,.sideBannerAdsLarge,.sideBannerAdsSmall,.sideBannerAdsXLarge,.sideBarAd,.sideBarCubeAd,.sideBlockAd,.sideBoxAd,.sideBoxM1ad,.sideBoxMiddleAd,.sideBySideAds,.sideToSideAd,.side_300_ad,.side_ad,.side_ad2,.side_ad300,.side_ad_1,.side_ad_2,.side_ad_3,.side_ad_box_mid,.side_ad_box_top,.side_ad_top,.side_add_wrap,.side_ads,.side_adsense,.side_adv,.side_adv_01,.side_adv_left,.side_adv_right,.sidead,.sidead_150,.sidead_300,.sidead_300250_ht,.sidead_550125,.sideadmid,.sideads,.sideads_l,.sideadsbox,.sideadtable,.sideadvert,.sideadverts,.sidebar--mps_ad,.sidebar-350ad,.sidebar-above-medium-rect-ad-unit,.sidebar-ad,.sidebar-ad-300,.sidebar-ad-300x250-cont,.sidebar-ad-a,.sidebar-ad-b,.sidebar-ad-box,.sidebar-ad-box-caption,.sidebar-ad-c,.sidebar-ad-component,.sidebar-ad-cont,.sidebar-ad-container,.sidebar-ad-container-1,.sidebar-ad-container-2,.sidebar-ad-container-3,.sidebar-ad-div,.sidebar-ad-rect,.sidebar-ad-slot,.sidebar-adbox,.sidebar-ads-no-padding,.sidebar-ads-wrap,.sidebar-adv-container,.sidebar-advertisement,.sidebar-atf-ad-wrapper,.sidebar-below-ad-unit,.sidebar-big-ad,.sidebar-block-adsense,.sidebar-box-ad,.sidebar-box-ads,.sidebar-content-ad,.sidebar-header-ads,.sidebar-paid-ad-label,.sidebar-skyscraper-ad,.sidebar-sponsors,.sidebar-square-ad,.sidebar-text-ad,.sidebar-top-ad,.sidebar300adblock,.sidebarAd,.sidebarAdBlock,.sidebarAdLink,.sidebarAdNotice,.sidebarAdUnit,.sidebarAds300px,.sidebarAdvert,.sidebarCloseAd,.sidebarNewsletterAd,.sidebar_ADBOX,.sidebar_ad,.sidebar_ad_1,.sidebar_ad_2,.sidebar_ad_3,.sidebar_ad_300,.sidebar_ad_300_250,.sidebar_ad_580,.sidebar_ad_container,.sidebar_ad_container_div,.sidebar_ad_holder,.sidebar_ad_leaderboard,.sidebar_ad_module,.sidebar_ads,.sidebar_ads-300x250,.sidebar_ads_336,.sidebar_ads_left,.sidebar_ads_right,.sidebar_ads_title,.sidebar_adsense,.sidebar_advert,.sidebar_advertising,.sidebar_box_ad,.sidebar_right_ad,.sidebar_skyscraper_ad,.sidebar_small_ad,.sidebar_sponsors,.sidebarad,.sidebarad160,.sidebarad_bottom,.sidebaradbox,.sidebaradcontent,.sidebarads,.sidebaradsense,.sidebarboxad,.sideheadnarrowad,.sideheadsponsorsad,.sidelist_ad,.sideskyad,.simple_ads_manager_block_widget,.simple_ads_manager_widget,.simple_ads_manager_zone_widget,.simple_adsense_widget,.simplead-container,.simpleads-item,.single-ad-anchor,.single-ad-wrap,.single-ads,.single-google-ad,.single-item-page-ads,.single-post-ad,.single-post-ads-750x90,.single-top-ad,.singleAdBox,.singleAdsContainer,.single_ad,.single_advert,.single_bottom_ad,.single_fm_ad_bottom,.single_post_ads_cont,.single_top_ad,.singlead,.singleads,.singleadstopcstm2,.singlepageleftad,.singlepostad,.singlepostadsense,.singpagead,.site-ad-block,.site-ads,.site-footer__ad-area,.site-head-ads,.site-header__advert-container,.site-nav-ad-inner,.site-top-ad,.siteWideAd,.site_ad,.site_ad_120_600,.site_ad_300x250,.site_sponsers,.sitesponsor,.sitesprite_ads,.six-ads-wrapper,.skinAdv02,.skin_ad_638,.skinad-l,.skinad-r,.skinny-sidebar-ad,.sky-ad,.sky-ad1,.skyAd,.skyAdd,.skyAdvert,.skyAdvert2,.skyCraper_bannerLong,.skyCraper_bannerShort,.sky_ad_top,.sky_scraper_ad,.skyjobsadtext,.skyscraper-ad,.skyscraper-ad-container,.skyscraper_ad,.skyscraper_bannerAdHome,.skyscraper_banner_ad,.sl-art-ad-midflex,.sl-header-ad,.sl_ad1,.sl_ad2,.sl_ad3,.sl_ad4,.sl_ad5,.sl_ad6,.sl_ad7,.sl_admarker,.sleekadbubble,.slideAd,.slide_ad,.slider-right-advertisement-banner,.sliderad,.slideshow-ad {display: none !important; color: #72da9a !important; background-color: #a0abfd !important;}.slideshow-ad-container,.slideshow-ad-wrapper,.slideshow-ads,.slideshow-advertisement-note,.slideshowAd,.slideshow_ad_300,.slideshow_ad_note,.slideshowadvert,.slot_728_ad,.slot_integrated_ad,.slpBigSlimAdUnit,.slpSquareAdUnit,.sm-ad,.sm-widget-ad-holder,.smAdText_r,.sm_ad,.small-ad,.small-ad-header,.small-ad-long,.small-ads,.smallAdContainer,.smallAds,.smallAdsContainer,.smallAdv,.smallAdvertisments,.smallSkyAd1,.smallSkyAd2,.small_ad_bg,.small_ads,.small_sidebar_ad_container,.smallad,.smallad-left,.smalladblock,.smalladscontainer,.smalladword,.smallbutton-adverts,.smallsideadpane,.smallsponsorad,.smartAd,.smart_ads_bom_title,.sml-item-ad,.sn-ad-300x250,.snarcy-ad,.sng_card_ads,.snoadnetwork,.social-ad,.softronics-ad,.southad,.sp-ad,.spLinks,.spaceAdds,.spc-ads-leaderboard,.spc-ads-sky,.spec-adv,.specialAd175x90,.specialAdsContent,.specialAdsLabel,.specialAdsLink,.specialAdvertising,.specialHeaderAd,.special_ad_section,.specials_ads,.speedyads,.sphereAdContainer,.spl-ads,.spl_ad,.spl_ad2,.spl_ad_plus,.splitAd,.splitAdResultsPane,.splitter_ad,.splitter_ad_holder,.spn_links_box,.spnsrAdvtBlk,.spnsrCntnr,.spon-links,.spon125,.spon_link,.sponadbox,.sponlinkbox,.spons-link,.spons-wrap,.sponsBox,.sponsLinks,.sponsWrap,.spons_link_header,.spons_links,.sponser-link,.sponserIABAdBottom,.sponserLink,.sponsersads,.sponsertop,.sponslink,.sponsor-728,.sponsor-ad,.sponsor-ad-title,.sponsor-ad-wrapper,.sponsor-ads,.sponsor-area,.sponsor-block,.sponsor-bottom,.sponsor-btns,.sponsor-inner,.sponsor-left,.sponsor-link,.sponsor-links,.sponsor-module-target,.sponsor-post,.sponsor-promo,.sponsor-right,.sponsor-services,.sponsor-spot,.sponsor-text,.sponsor-text-container,.sponsor120x600,.sponsor728x90,.sponsorAd,.sponsorArea,.sponsorBannerWrapper,.sponsorBox,.sponsorBox_right_rdr,.sponsorLabel,.sponsorLink,.sponsorLinks,.sponsorMaskhead,.sponsorPanel,.sponsorPost,.sponsorPostWrap,.sponsorPuffsHomepage,.sponsorStrip,.sponsorText,.sponsorTitle,.sponsorTxt,.sponsor_ad,.sponsor_ad1,.sponsor_ad2,.sponsor_ad3,.sponsor_ad_area,.sponsor_advert_link,.sponsor_area,.sponsor_bar,.sponsor_block,.sponsor_button_ad,.sponsor_columns,.sponsor_div,.sponsor_div_title,.sponsor_footer,.sponsor_image,.sponsor_label,.sponsor_line,.sponsor_links,.sponsor_logo,.sponsor_placement,.sponsor_popup,.sponsor_units,.sponsorad,.sponsoradlabel,.sponsorads,.sponsoradtitle,.sponsored-ad,.sponsored-ad-label,.sponsored-ad-ob,.sponsored-ads,.sponsored-b,.sponsored-by-label,.sponsored-chunk,.sponsored-container-bottom,.sponsored-default,.sponsored-display-ad,.sponsored-editorial,.sponsored-features,.sponsored-header,.sponsored-headshop,.sponsored-inmail,.sponsored-inmail-legacy,.sponsored-link,.sponsored-links,.sponsored-links-alt-b,.sponsored-links-col,.sponsored-links-holder,.sponsored-links-right,.sponsored-links-tbl,.sponsored-offers-box,.sponsored-post,.sponsored-post_ad,.sponsored-result,.sponsored-result-row-2,.sponsored-results,.sponsored-right,.sponsored-right-border,.sponsored-rule,.sponsored-slot,.sponsored-tag,.sponsored-text,.sponsored-title,.sponsored-top,.sponsoredAd,.sponsoredAdLine,.sponsoredAds,.sponsoredBar,.sponsoredBottom,.sponsoredBox,.sponsoredEntry,.sponsoredFeature,.sponsoredInfo,.sponsoredInner,.sponsoredLabel,.sponsoredLeft,.sponsoredLink,.sponsoredLinks2,.sponsoredLinksBox,.sponsoredLinksGadget,.sponsoredLinksHead,.sponsoredLinksHeader,.sponsoredName,.sponsoredProduct,.sponsoredResults,.sponsoredSearch,.sponsoredShowcasePanel,.sponsoredSideInner,.sponsoredStats,.sponsoredTop,.sponsored_ad,.sponsored_ads,.sponsored_bar_text,.sponsored_box,.sponsored_box_search,.sponsored_by,.sponsored_content,.sponsored_glinks,.sponsored_link,.sponsored_links,.sponsored_links2,.sponsored_links_box,.sponsored_links_container,.sponsored_links_section,.sponsored_links_title_container,.sponsored_links_title_container_top,.sponsored_links_top,.sponsored_result,.sponsored_results,.sponsored_results-container,.sponsored_ss,.sponsored_text,.sponsored_well,.sponsoredby,.sponsoredibbox,.sponsoredlink,.sponsoredlinkHed,.sponsoredlinks,.sponsoredlinks-article,.sponsoredlinkscontainer,.sponsoredresults,.sponsoredtabl,.sponsoredtextlink_container_ovt,.sponsorheader,.sponsoring_link,.sponsoringbanner,.sponsorlink2,.sponsormsg,.sponsors-box,.sponsors-footer,.sponsors-module,.sponsors-widget,.sponsorsBanners,.sponsors_300x250,.sponsors_box_container,.sponsors_fieldset,.sponsors_links,.sponsors_spacer,.sponsorsbig,.sponsorship-box,.sponsorship-chrome,.sponsorship-container,.sponsorshipContainer,.sponsorship_ad,.sponsorshipbox,.sponsorwrapper,.sport-mpu-box,.spot-ad,.spotlight-ad,.spotlight-ad-left,.spotlightAd,.sprite-ad_label_vert,.sqAd2,.sq_ad,.square-ad,.square-ad--latest-video,.square-ad--neg-margin,.square-ad-1,.square-ad-container,.square-advt,.square-sidebar-ad,.square-sponsorship,.squareAd,.squareAdWrap,.squareAdd,.squareAddtwo,.squareAds,.square_ad,.square_ad_wrap,.square_ads,.square_advert_inner,.square_banner_ad,.square_button_ads,.squaread,.squaread-container,.squareads,.squared_ad,.sr-adsense,.sr-advert,.sr-in-feed-ads,.sr-side-ad-block,.sr_google_ad,.src_parts_gen_ad,.srp-grid-speed-ad3,.ss-ad-banner,.ss-ad-mpu,.ss-ad-thumbnail,.ss-ad-tower,.ss-ad_mrec,.ss_advertising,.stProAd,.stack-l-ad-center,.stackedads1,.stackedads2,.stand-alone-adzone,.standalone-ad-container,.standalone_txt_ad,.standard-ad,.star-ad,.start__advertising_container,.start__newest__big_game_container_body_games_advertising,.start_overview_adv_container,.statTop_adsense,.stat_pixel_yes[onclick][class*="_layout_"][class*="_format_"],.static-ad,.staticAd,.staticad,.staticad_mark125,.std_ad_container,.ste-ad,.sticky-ad-wrapper,.sticky-top-ad-wrap,.stickyAdLink,.sticky_ad_wrapper,.stickyadv,.stmAdHeightWidget,.stock-ticker-ad-tag,.stock_ad,.stocks-ad-tag,.store-ads,.story-ad-container,.story-inline-advert,.story-page-embedded-ad,.storyAdvert,.storyInlineAdBlock,.story_AD,.story_ad_div,.story_ads_right_spl,.story_ads_right_spl_budget,.story_body_advert,.story_right_adv,.storyad,.storyad300,.stpro_ads,.str-300x250-ad,.str-300x600-ad,.str-horizontal-ad-wrapper,.str-slim-nav-ad,.str-top-ad,.strawberry-ads,.stream-ad,.streamAd,.strip-ad,.stripad,.sub-feature-ad,.sub-header-ad,.subAdBannerArea,.subAdBannerHeader,.subNavAd,.sub_cont_AD01,.sub_cont_AD02,.sub_cont_AD04,.sub_cont_AD06,.sub_cont_AD07,.subad,.subadimg,.subcontent-ad,.subheadAdPanel,.subheaderAdlogo,.subheader_adsense,.subjects_ad,.submenu_ad,.subtitle-ad-container,.sugarad,.suit-ad-inject,.suitcase-ad,.super-ad,.super-leaderboard-advert,.superLeaderOverallAdArea,.supercommentad_left,.supercommentad_right,.supernews-ad-widget,.superscroll-ad,.supp-ads,.support-adv,.supportAdItem,.support_ad,.surveyad,.sweet-deals-ad,.syAd,.syHdrBnrAd,.sykscraper-ad,.syndicatedAds,.szoAdBox,.szoSponsoredPost,.t10ad,.tAd,.tabAd,.tabAds,.tab_ad,.tab_ad_area,.table-ad,.table_ad_bg,.tablebordersponsor,.tablet_ad_box,.tablet_ad_head,.taboola-above-article-thumbnails,.taboola-container,.taboola-inbetweener,.taboola-item,.taboola-left-rail-wrapper,.taboola-partnerlinks-ad,.taboola-unit,.taboola-widget,.taboola_advertising,.taboola_blk,.taboola_lhs,.tadsanzeige,.tadsbanner,.tadselement,.takeOverAdLink,.tallAdvert,.tallad,.tangential-ad,.tblAds,.tblTopAds,.tbl_ad,.tbox_ad,.tckr_adbrace,.td-Adholder,.td-TrafficWeatherWidgetAdGreyBrd,.td-a-rec-id-custom_ad_1,.td-a-rec-id-custom_ad_2,.td-a-rec-id-custom_ad_3,.td-a-rec-id-custom_ad_5,.td-a-rec-id-event_bottom_ad,.td-a-rec-id-h12_obj_bottom_ad,.td-a-rec-id-h3_object_bottom_ad,.td-ad,.td-adspot-title,.td-header-ad-wrap,.td-header-sp-ads,.td-zergnet,.tdAdHeader,.tdBannerAd,.tdFeaturedAdvertisers,.td_ad,.td_footer_ads,.td_left_widget_ad,.td_leftads,.td_reklama_bottom,.td_reklama_top,.td_spotlight_ads,.td_topads,.tdad125,.tealiumAdSlot,.teaser-ad,.teaser-sponsor,.teaserAdContainer,.teaserAdHeadline,.teaser_adtiles,.teaser_advert_content,.testAd-holder,.text-ad-300,.text-ad-links2,.text-ad-sitewide,.text-ad-top,.text-advertisement,.text-g-advertisement,.text-g-group-short-rec-ad,.text-g-net-group-news-half-page-ad-300x600-or-300x250,.text-g-net-grp-google-ads-article-page,.text-g-nn-web-group-ad-halfpage,.text-g-sponsored-ads,.text-g-sponsored-links,.textAd3,.textAdBG,.textAdBlock,.textAdBlwPgnGrey,.textAdBox,.textAdMinimum,.textAds,.textLinkAd,.textSponsor,.text_ad_description,.text_ad_title,.text_ad_website,.text_ads_2,.text_linkad_wrapper,.textadContainer,.textad_headline,.textadbox,.textadheadline,.textadlink,.textads_left,.textads_right,.textadscontainer,.textadsds,.textadsfoot,.textadtext,.textadtxt,.textadtxt2,.textbanner-ad,.textlink-ads,.textlinkads,.tf_page_ad_search,.tfagAd,.theAdvert,.the_list_ad_zone,.theads,.theleftad,.themeblvd-ad-square-buttons,.themidad,.themonic-ad2,.third-box-ad,.third-party-ad,.thirdAd160Cont,.thirdAdBot,.thirdAdHead,.thirdage_ads_300x250,.thirdage_ads_728x90,.thisIsAd,.thisIsAnAd,.this_is_an_ad,.thisisad,.thread-ad,.thread-ad-holder,.threadAdsHeadlineData,.three-ads,.three-promoted-ads,.thumb-ads,.thumbnailad,.thumbs-adv,.thumbs-adv-holder,.tibu_ad,.ticket-ad,.tile--ad,.tile-ad,.tile-ad-container,.tileAdContainer,.tileAdWrap,.tileAds,.tile_AdBanner,.tile_ad,.tile_ad_container,.tips_advertisement,.title-ad,.title_adbig,.tj_ad_box,.tj_ad_box_top,.tjads,.tl-ad,.tl-ad-dfp,.tl-ad-display-3,.tl-ad-render,.tm-ads,.tm_ad200_widget,.tm_topads_468,.tm_widget_ad200px,.tmg-ad,.tmg-ad-300x250,.tmg-ad-mpu,.tmnAdsenseContainer,.tmz-dart-ad,.tncms-region-ads,.tnt-ads-container,.toggle-adinmap,.toolad,.toolbar-ad,.toolsAd,.toolssponsor-ads,.top-300-ad,.top-ad-1,.top-ad-anchor,.top-ad-area,.top-ad-bloc,.top-ad-block,.top-ad-center,.top-ad-horizontal,.top-ad-inside,.top-ad-multiplex,.top-ad-right,.top-ad-sidebar,.top-ad-slot,.top-ad-space,.top-ad-sticky,.top-ad-unit,.top-ad-wrap,.top-ad1,.top-ad__sticky-wrapper,.top-adbox,.top-ads,.top-ads-bottom-bar,.top-ads-wrapper,.top-adsense,.top-adsense-banner,.top-adspace,.top-adv,.top-adverbox,.top-advert,.top-advertisement,.top-banner-468,.top-banner-ad,.top-banner-ad-container,.top-banner-ad-wrapper,.top-banner-add,.top-bar-ad-related,.top-box-right-ad,.top-content-adplace,.top-half-page-ad,.top-header-ad,.top-horiz-ad,.top-item-ad,.top-large-google-ad,.top-leaderboard-ad,.top-left-nav-ad,.top-menu-ads,.top-outer-ad-container,.top-primary-sponsored,.top-right-ad,.top-right-advert,.top-rightadvtsment,.top-sidebar-adbox,.top-treehouse-ad,.top-wide-ad-container,.top300ad,.topAD,.topAd728x90,.topAdBanner,.topAdCenter,.topAdContainer,.topAdIn,.topAdLeft,.topAdRight,.topAdWrap,.topAdWrapper,.topAdd,.topAdvBox,.topAdvert,.topAdvertisement,.topAdvertistemt,.topAdverts,.topArticleAds,.topBannerAd,.topBannerAdSectionR,.topBarAd,.topBoxAdvertisement,.topHeaderLeaderADWrap,.topLeaderboardAd,.topNavRMAd,.topPC-adWrap,.topPagination_ad,.topRailAdSlot,.topRightAd,.top_Ad,.top_ad1,.top_ad_336x280,.top_ad_728,.top_ad_728_90,.top_ad_banner,.top_ad_big,.top_ad_disclaimer,.top_ad_holder,.top_ad_inner,.top_ad_label,.top_ad_list,.top_ad_long,.top_ad_post,.top_ad_responsive,.top_ad_seperate,.top_ad_short,.top_ad_wrapper,.top_adbox1,.top_adbox2,.top_adh,.top_adsense,.top_adspace,.top_adv,.top_adv_content,.top_advert,.top_advertisement,.top_advertising_lb,.top_advertizing_cnt,.top_bar_ad,.top_big_ads,.top_container_ad,.top_corner_ad,.top_header_ad,.top_header_ad_inner,.top_right_ad,.top_rightad,.top_sponsor,.topad-area,.topad-bar,.topad-bg,.topad1,.topad2,.topadbar,.topadblock,.topadbox,.topadrow,.topads-spacer,.topadsection,.topadspace,.topadspot,.topadtara,.topadtxt,.topadtxt120,.topadtxt300,.topadtxt428,.topadtxt728,.topadvertisementsegment,.topbar-ad-unit,.topboardads,.topcontentadvertisement,.topfootad,.topicDetailsAdRight,.topic_inad,.topnavSponsor,.topratedBoxAD,.topsidebarad,.topstoriesad,.toptenAdBoxA,.tourFeatureAd,.tout-ad-embed,.tower-ad-abs,.tower-ads-container,.towerAd,.towerAdLeft,.towerAds,.tower_ad,.tower_ad_disclaimer,.towerad,.tp-ad-label,.tp_ads,.tr-ad-adtech,.tr-ad-adtech-placement,.tr-ad-inset,.tr-sponsored,.trSpAD1,.track_adblock,.trafficAdSpot,.trafficjunky-ad,.trb_ar_sponsoredmod,.trb_gptAd,.trb_header_adBanner_combo,.trb_header_adBanner_large,.trb_masthead_adBanner,.trb_pageAdHolder,.trc-content-sponsoredUB,.trc_rbox_div .syndicatedItemUB,.trc_rbox_div a[target="_blank"][href^="http://tab"],.treeAdBlockWithBanner_right,.trending__ad,.tribal-ad,.trip_ad_center,.trueads,.ts-ad,.ts-ad-leaderboard,.ts-ad_unit_bigbox,.ts-banner_ad,.ts-featured_ad,.ts-sponsored-links,.ts-top-most-ads,.tsmAd,.tt_ads,.ttlAdsensel,.tto-sponsored-element,.tucadtext,.tvkidsArticlesBottomAd,.tvs-mpu,.twitter-ad,.two-col-ad-inArticle,.twoColumnAd,.two_ads,.twoadcoll,.twoadcolr,.tx-aa-adverts,.tx_smartadserver_pi1,.txt-ads,.txtAd,.txtAd5,.txtAds,.txt_ad,.txt_ads,.txtad_area,.txtadvertise,.tynt-ad-container,.type-ad,.type_adscontainer,.type_miniad,.type_promoads,.tz_ad300_widget,.tz_ad_widget,.uds-ad,.uds-ads,.ui-ad,.ui-ads,.ukAds,.ukn-banner-ads,.ukn-inline-advert,.ult_vp_videoPlayerAD,.unSponsored,.under-player-ads,.under_ads,.undertimyads,.uniAdBox,.uniAds,.uniblue-text-ad,.unit-ad,.universalboxADVBOX01,.universalboxADVBOX03,.universalboxADVBOX04a,.unspoken-adplace,.upcloo-adv-content,.upper-ad-box,.upper-ad-space,.urban-ad-rect,.urban-ad-top,.us-advertisement,.us-txt-ad,.useful_banner_manager_banners_rotation,.useful_banner_manager_rotation_widget,.useful_banner_manager_widget,.usenext,.v5rc_336x280ad,.vAd_160x600,.vAds,.v_ad,.vadvert,.variable-ad,.variableHeightAd,.vbox-verticalad,.vce-header-ads,.ve2_post_adsense,.vert-ad,.vert-ad-ttl,.vert-ads,.vert-adsBlock,.vertad,.vertical-adsense,.verticalAd,.verticalAdText,.vertical_ad,.vertical_ads,.verticalad,.verysmallads,.vhs_small_ad,.vidadtext,.video-about-ad,.video-ad-short,.video-ads,.video-ads-container,.video-ads-wrapper,.video-adtech-mpu-ad,.video-innerAd-320x250,.video-player-ad-center,.videoAd-wrapper,.videoBoxAd,.videoPauseAd,.video_ad,.video_ad_fadein,.video_ads,.video_ads_overdiv,.video_ads_overdiv2,.video_advertisement_box,.video_detail_box_ads,.video_top_ad,.videoadbox,.videos-ad,.videos-ad-wrap,.view-Advertisment,.view-ad,.view-advertisements,.view-advertisements-300,.view-advertorials,.view-adverts,.view-advt-story-bottom,.view-custom-advertisement,.view-display-id-ads_all,.view-id-Advertisment,.view-id-ad,.view-id-advertisements,.view-id-advertisements_300,.view-id-advt_story_bottom,.view-id-custom_advertisement,.view-image-ads,.view-promo-mpu-right,.view-site-ads,.view-video-advertisements,.viewContentItemAd,.view_ads_advertisements,.view_ads_bottom_bg,.view_ads_bottom_bg_middle,.view_ads_content_bg,.view_ads_top_bg,.view_ads_top_bg_middle,.view_rig_ad,.views-field-field-ad,.views-field-field-adbox-1,.views-field-field-adbox-2,.views-field-field-advertisement-image,.views-field-field-image-ad,.vip-club-ad,.virgin-mpu,.visor-breaker-ad,.visuaAD400,.visuaAD900,.vl-ad-item,.vmp-ad,.vod_ad,.vrfadzone,.vs-advert-300x250,.vs_dfp_standard_postbit_ad,.vsw-ads,.vswAdContainer,.vt_h1_ad,.vuukle-ad-block,.vuukle-ads,.vw-header-ads-leader-board,.vw-header-ads-wrapper,.vw-single-header-ads,.vxp_ad300x250,.w-ad-box,.w-content--ad,.wAdvert,.w_AdExternal,.wa_adsbottom,.wahAd,.wahAdRight,.wallAd,.wall_ad,.wall_ad_hd,.wallad,.wantads,.waterfall-ad-anchor,.wazi-ad-link,.wd-adunit,.wd_ads,.wdca_ad_item,.wdca_custom_ad,.wdp_ad,.wdp_adDiv,.wdt_ads,.weather-ad-wrapper,.weather-sponsor-ad,.weather-sponsorDiv,.weatherAdSpot,.weather_ad,.weatherad,.web-result-sponsored,.webad-cnt,.webad_link,.webads336x280,.webadvert-container,.webit-ads,.webpart-wrap-advert,.well-ad,.wfb-ad,.wg-ad-square,.wh_ad,.white-ad-block,.wide-ad,.wide-ad-container,.wide-ad-outer,.wide-ad2015,.wide-advert,.wide-footer-ad,.wide-header-ad,.wide-skyscraper-ad,.wideAdTable,.widePageAd,.wide_ad,.wide_ad_unit,.wide_ad_unit_top,.wide_ads,.wide_google_ads,.wide_grey_ad_box {display: none !important; color: #72da9a !important; background-color: #a0abfd !important;}.wide_sponsors,.widead,.wideadbox,.widget-300x250ad,.widget-ad,.widget-ad-codes,.widget-ad-sky,.widget-ad-zone,.widget-ad300x250,.widget-adcode,.widget-ads,.widget-adsense,.widget-adv,.widget-advert-728,.widget-advert-970,.widget-advertisement,.widget-ami-newsmax,.widget-ami-zergnet,.widget-entry-ads-160,.widget-gpt2-ami-ads,.widget-group-Ads,.widget-highlight-ads,.widget-pane-section-ad-content,.widget-pane-section-result[data-result-ad-type],.widget-sponsor,.widget-text-ad,.widget1-ad,.widget10-ad,.widget4-ad,.widget6-ad,.widget7-ad,.widgetAD,.widgetAdScrollContainer,.widgetYahooAds,.widget_ad,.widget_ad-widget,.widget_ad125,.widget_ad300,.widget_ad_300x250_atf,.widget_ad_300x250_btf,.widget_ad_300x250_btf_b,.widget_ad_boxes_widget,.widget_ad_rotator,.widget_ad_widget,.widget_admanagerwidget,.widget_adrotate_widgets,.widget_ads,.widget_adsblock,.widget_adsensem,.widget_adsensewidget,.widget_adsingle,.widget_adv_location,.widget_advert,.widget_advert_content,.widget_advert_widget,.widget_advertisement,.widget_advertisements,.widget_advertisment,.widget_advwidget,.widget_adwidget,.widget_appmanager_sponsoredpostswidget,.widget_bestgoogleadsense,.widget_boss_banner_ad,.widget_catchbox_adwidget,.widget_cevo_contentad,.widget_com_ad_widget,.widget_cpxadvert_widgets,.widget_customad_widget,.widget_customadvertising,.widget_cxad,.widget_dfp,.widget_dfp_lb-widget,.widget_econaabachoadswidget,.widget_emads,.widget_etcenteredadwidget,.widget_evolve_ad_gpt_widget,.widget_fearless_responsive_image_ad,.widget_googleads,.widget_ima_ads,.widget_internationaladserverwidget,.widget_ione-dart-ad,.widget_island_ad,.widget_jr_125ads,.widget_maxbannerads,.widget_nb-ads,.widget_new_sponsored_content,.widget_ok_zergnet_widget,.widget_openxwpwidget,.widget_plugrush_widget,.widget_postmedia_layouts_ad,.widget_sdac_bottom_ad_widget,.widget_sdac_companion_video_ad_widget,.widget_sdac_footer_ads_widget,.widget_sdac_skyscraper_ad_widget,.widget_sdac_top_ad_widget,.widget_sej_sidebar_ad,.widget_sidebarad_300x250,.widget_sidebarad_300x600,.widget_sidebaradwidget,.widget_sponsored_content,.widget_supernews_ad,.widget_taboola,.widget_text_adsense,.widget_thesun_dfp_ad_widget,.widget_uds-ads,.widget_vb_sidebar_ad,.widget_wnd_ad_widget,.widget_wp_ads_gpt_widget,.widget_wpshower_ad,.widgetads,.width-ad-slug,.wikia-ad,.wikia_ad_placeholder,.wingadblock,.wis_adControl,.with-background-ads,.with-wrapper-ads,.with_ctecad,.wixAdsdesktopBottomAd,.wl-ad,.wl_WidgetRel_Record_Div.wl_WidgetRel_Sponsor,.wloadIframeAD,.wn-ad,.wnIframeAd,.wnMultiAd,.wp125_write_ads_widget,.wp125ad,.wp125ad_1,.wp125ad_2,.wpInsertAdWidget,.wp_bannerize,.wpadvert,.wpbrad,.wpbrad-ad,.wpbrad-zone,.wpd-advertisement,.wpfp_custom_ad,.wpi_ads,.wpmrec,.wpn_ad_content,.wppaszone,.wpproaddlink,.wpproadszone,.wptouch-ad,.wpx-bannerize,.wpx_bannerize,.wrap-ad,.wrap-ads,.wrap_boxad,.wrapad,.wrapper-ad,.wrapper-ad-sidecol,.wrapper-google-ads,.wrapper-sidebar_ads_box,.wrapper-sidebar_ads_half-page,.wrapper_ad,.wrb1_x1_adv,.wrb1_x7_adv,.wrb2_ls1_adv,.wrb2_ls3_adv,.wrb2_x1_adv,.wrb3_ls1_adv,.wrb4_x1_adv,.wrb6_x1_adv,.ws-ad,.wsSearchResultsRightSponsoredLinks,.wsSponsoredLinksRight,.wsTopSposoredLinks,.ws_contentAd660,.wsj-ad:not(.adActivate),.wx-adchoices,.wx-gptADS,.x-ad,.x-home-ad__content,.x-home-ad__content-inner,.x-tile__advert,.x01-ad,.x03-adunit,.x04-adunit,.x81_ad_detail,.xads-blk-bottom-hld,.xads-blk-top-hld,.xads-blk-top2-hld,.xads-blk1,.xads-blk2,.xads-ojedn,.xmlad,.xs_epic_circ_ad,.xs_epic_sponsor_label,.xtopadvert,.y-ads,.y-ads-wide,.y5_ads,.y5_ads2,.y7-advertisement,.y7adHEAD,.y7adS,.y7s-lrec,.yaAds,.yad-sponsored,.yahoo-ad-leader-north,.yahoo-ad-leader-south,.yahoo-ad-lrec-north,.yahoo-banner-ad-container,.yahoo-sponsored,.yahoo-sponsored-links,.yahoo-sponsored-result,.yahooAd,.yahooAds,.yahooContentMatch,.yahoo_ad,.yahoo_ads,.yahooad,.yahooad-image,.yahooad-urlline,.yahooads,.yahootextads_content_bottom,.yam-plus-ad-container,.yan-sponsored,.yat-ad,.yellow_ad,.yfi-fp-ad-logo,.ygrp-ad,.yieldads-160x600,.yieldads-728x90,.yl-lrec-wrap,.yls-sponlink,.yom-ad-LREC,.yom-ad-LREC2,.yom-ad-LREC3,.yom-ad-MREC2,.yom-ad-moneyball,.youradhere,.youtubeSuperLeaderBoardAdHolder,.youtubeSuperLeaderOverallAdArea,.yrail_ad_wrap,.yrail_ads,.ysmsponsor,.ysp-dynamic-ad,.ysponsor,.yt-adsfull-widget,.ytp-ad-progress-list,.yui3-ad,.yw-ad,.z-sponsored-block,.zRightAdNote,.zc-grid-ad,.zc-grid-position-ad,.zem_rp_promoted,.zerg-colm,.zerg-widget,.zergmod,.zergnet,.zergnet-holder,.zergnet-row,.zergnet-widget,.zergnet-widget-container,.zergnet-widget__header,.zergnet-widget__subtitle,.zergnetBLock,.zergnetpower,.zergpowered,.zeti-ads,.zone-advertisement,ADS-RIGHT,AFS-AD,AMP-AD,IFRAME[src*="alosafada.com/barra-disksexo/"],[ad-id^="googlead"],[alt="banner-300-x-250"],[href*="adserver.cc"],[href*="clretar.net"],[href*="dingdarop.pro"],[href*="edintorni.net/related/service/sponsor/redirect/"] &gt; *,[href*="garewuld.com"],[href*="gomiligh.pro"],[href*="gottimuch.com"],[href*="hedthertsu.pro"],[href*="johnsitsi.pro"],[href*="kinhintont.com"],[href*="lingresbab.pro"],[href*="naruhap.pro"],[href*="play4k.tv/download/"],[href*="rebevengwas.com"],[href*="retarcl.net"],[href*="rewdinghes.com"],[href*="rinwisi.pro"],[href*="ugonrin.com"],[href*="witgatons.com"],[href*="xxxpostpic.org/adslink.php"],[href^="http://track.brucelead.com/"][target="_blank"],[id^="smi2adblock"],[lazy-ad="lefttop_banner"],[onclick*="content.ad/"],[onclick^="window.open('http://adultfriendfinder.com/search/"],[src*="imageban.ru/out/"],a[data-obtrack^="http://paid.outbrain.com/network/redir?"],a[data-redirect^="http://click.plista.com/pets"],a[data-redirect^="this.href='http://paid.outbrain.com/network/redir?"],a[data-url^="http://paid.outbrain.com/network/redir?"],a[data-url^="http://paid.outbrain.com/network/redir?"] + .author,a[data-widget-outbrain-redirect^="http://paid.outbrain.com/network/redir?"],a[href$="/vghd.shtml"],a[href*=".adk2x.com/"],a[href*=".adsrv.eacdn.com/"] &gt; img,a[href*=".qertewrt.com/"],a[href*="/cmd.php?ad="],a[href*="=Adtracker"],a[href*="ad2upapp.com/"],a[href*="emprestimo.eu"],a[href*="ex.24smi.info"],a[href*="friendlyduck.com"],a[href*="googleme.eu"],a[href*="letsadvertisetogether.com"],a[href*="marketgid.com/"],a[href*="onclkds."],a[href^=" http://ads.ad-center.com/"],a[href^=" http://n47adshostnet.com/"],a[href^="//adbit.co/?a=Advertise&amp;"],a[href^="//ads.ad-center.com/"],a[href^="//api.ad-goi.com/"],a[href^="//native.publy.com/related/service/sponsor/"],a[href^="//srv.buysellads.com/"],a[href^="//t.MtagMonetizationA.com/"],a[href^="//w.linkwelove.com/urls/"],a[href^="//www.mgid.com/"],a[href^="http://1phads.com/"],a[href^="http://360ads.go2cloud.org/"],a[href^="http://3wr110.net/"],a[href^="http://NowDownloadAll.com"],a[href^="http://a.adquantix.com/"],a[href^="http://abc2.mobile-10.com/"],a[href^="http://ad-apac.doubleclick.net/"],a[href^="http://ad.au.doubleclick.net/"],a[href^="http://ad.yieldmanager.com/"],a[href^="http://adclick.g.doubleclick.net/"],a[href^="http://adexprt.me/"],a[href^="http://adf.ly/?id="],a[href^="http://adlev.neodatagroup.com/"],a[href^="http://admingame.info/"],a[href^="http://adprovider.adlure.net/"],a[href^="http://adrunnr.com/"],a[href^="http://ads.activtrades.com/"],a[href^="http://ads.ad-center.com/"],a[href^="http://ads.affbuzzads.com/"],a[href^="http://ads.expekt.com/affiliates/"],a[href^="http://ads.integral-marketing.com/"],a[href^="http://ads.pheedo.com/"],a[href^="http://ads.sprintrade.com/"],a[href^="http://adserver.adtech.de/"],a[href^="http://adserver.adtechus.com/"],a[href^="http://adserver.itsfogo.com/"],a[href^="http://adserving.liveuniversenetwork.com/"],a[href^="http://adsrv.keycaptcha.com"],a[href^="http://adtrack123.pl/"],a[href^="http://adtrackone.eu/"],a[href^="http://adtransfer.net/"],a[href^="http://affiliate.glbtracker.com/"],a[href^="http://affiliate.godaddy.com/"],a[href^="http://affiliates.pinnaclesports.com/processing/"],a[href^="http://affiliates.score-affiliates.com/"],a[href^="http://aflrm.com/"],a[href^="http://amzn.to/"] &gt; img[src^="data"],a[href^="http://api.content.ad/"],a[href^="http://api.ringtonematcher.com/"],a[href^="http://at.atwola.com/"],a[href^="http://b.bestcompleteusa.info/"],a[href^="http://banners.victor.com/processing/"],a[href^="http://bc.vc/?r="],a[href^="http://bcp.crwdcntrl.net/"],a[href^="http://bestorican.com/"],a[href^="http://bluehost.com/track/"],a[href^="http://bonusfapturbo.nmvsite.com/"],a[href^="http://bs.serving-sys.com/"],a[href^="http://buysellads.com/"],a[href^="http://c.actiondesk.com/"],a[href^="http://c.ketads.com/"],a[href^="http://callville.xyz/"],a[href^="http://campaign.bharatmatrimony.com/cbstrack/"],a[href^="http://campaign.bharatmatrimony.com/track/"],a[href^="http://casino-x.com/?partner"],a[href^="http://cdn.adsrvmedia.net/"],a[href^="http://cdn.adstract.com/"],a[href^="http://cdn3.adbrau.com/"],a[href^="http://cdn3.adexprts.com/"],a[href^="http://centertrust.xyz/"],a[href^="http://chaturbate.com/affiliates/"],a[href^="http://cinema.friendscout24.de?"],a[href^="http://click.guamwnvgashbkashawhgkhahshmashcas.pw/"],a[href^="http://click.plista.com/pets"],a[href^="http://clickandjoinyourgirl.com/"],a[href^="http://clicks.binarypromos.com/"],a[href^="http://clicks.guamwnvgashbkashawhgkhahshmashcas.pw/"],a[href^="http://clickserv.sitescout.com/"],a[href^="http://clk.directrev.com/"],a[href^="http://clkmon.com/adServe/"],a[href^="http://codec.codecm.com/"],a[href^="http://connectlinking6.com/"],a[href^="http://contractallsticker.net/"],a[href^="http://cpaway.afftrack.com/"],a[href^="http://d2.zedo.com/"],a[href^="http://data.ad.yieldmanager.net/"],a[href^="http://data.committeemenencyclopedicrepertory.info/"],a[href^="http://data.linoleictanzaniatitanic.com/"],a[href^="http://databass.info/"],a[href^="http://ddownload39.club/"],a[href^="http://dethao.com/"],a[href^="http://dftrck.com/"],a[href^="http://down1oads.com/"],a[href^="http://download-performance.com/"],a[href^="http://duckcash.eu/AF_"],a[href^="http://dwn.pushtraffic.net/"],a[href^="http://easydownload4you.com/"],a[href^="http://eclkmpsa.com/"],a[href^="http://elite-sex-finder.com/?"],a[href^="http://elitefuckbook.com/"],a[href^="http://engine.newsmaxfeednetwork.com/"],a[href^="http://farm.plista.com/pets"],a[href^="http://feedads.g.doubleclick.net/"],a[href^="http://fileloadr.com/"],a[href^="http://fileupnow.rocks/"],a[href^="http://finaljuyu.com/"],a[href^="http://findersocket.com/"],a[href^="http://freesoftwarelive.com/"],a[href^="http://fsoft4down.com/"],a[href^="http://fusionads.net"],a[href^="http://galleries.pinballpublishernetwork.com/"],a[href^="http://galleries.securewebsiteaccess.com/"],a[href^="http://games.ucoz.ru/"][target="_blank"],a[href^="http://gca.sh/user/register?ref="],a[href^="http://get.slickvpn.com/"],a[href^="http://getlinksinaseconds.com/"],a[href^="http://go.ad2up.com/"],a[href^="http://go.mobisla.com/"],a[href^="http://go.oclaserver.com/"],a[href^="http://go.seomojo.com/tracking202/"],a[href^="http://goldmoney.com/?gmrefcode="],a[href^="http://green.trafficinvest.com/"],a[href^="http://greensmoke.com/"],a[href^="http://guideways.info/"],a[href^="http://hd-plugins.com/download/"],a[href^="http://hdplugin.flashplayer-updates.com/"],a[href^="http://hyperlinksecure.com/go/"],a[href^="http://imads.integral-marketing.com/"],a[href^="http://install.securewebsiteaccess.com/"],a[href^="http://internalredirect.site/"],a[href^="http://istri.it/?"],a[href^="http://jobitem.org/"],a[href^="http://join3.bannedsextapes.com/track/"],a[href^="http://k2s.cc/pr/"],a[href^="http://keep2share.cc/pr/"],a[href^="http://landingpagegenius.com/"],a[href^="http://latestdownloads.net/download.php?"],a[href^="http://linksnappy.com/?ref="],a[href^="http://liversely.com/"],a[href^="http://liversely.net/"],a[href^="http://lp.ezdownloadpro.info/"],a[href^="http://lp.ilivid.com/"],a[href^="http://lp.ncdownloader.com/"],a[href^="http://mmo123.co/"],a[href^="http://mo8mwxi1.com/"],a[href^="http://mojofun.info/"],a[href^="http://n.admagnet.net/"],a[href^="http://n217adserv.com/"],a[href^="http://onclickads.net/"],a[href^="http://paid.outbrain.com/network/redir?"],a[href^="http://papi.mynativeplatform.com:80/pub2/"],a[href^="http://partner.sbaffiliates.com/"],a[href^="http://pokershibes.com/index.php?ref="],a[href^="http://prochina.link/"],a[href^="http://prochina.space/"],a[href^="http://promos.bwin.com/"],a[href^="http://prousa.work/"],a[href^="http://pwrads.net/"],a[href^="http://record.betsafe.com/"],a[href^="http://record.commissionking.com/"],a[href^="http://record.sportsbetaffiliates.com.au/"],a[href^="http://refer.webhostingbuzz.com/"],a[href^="http://rekoverr.com/"],a[href^="http://ryushare.com/affiliate.python"],a[href^="http://searchtabnew.com/"],a[href^="http://secure.hostgator.com/~affiliat/"],a[href^="http://secure.signup-page.com/"],a[href^="http://secure.signup-way.com/"],a[href^="http://see-work.info/"],a[href^="http://serve.williamhill.com/promoRedirect?"],a[href^="http://server.cpmstar.com/click.aspx?poolid="],a[href^="http://servicegetbook.net/"],a[href^="http://sharesuper.info/"],a[href^="http://srvpub.com/"],a[href^="http://stateresolver.link/"],a[href^="http://t.mdn2015x1.com/"],a[href^="http://t.mdn2015x2.com/"],a[href^="http://t.mdn2015x3.com/"],a[href^="http://t.wowtrk.com/"],a[href^="http://taboola-"][href*="/redirect.php?app.type="],a[href^="http://tezfiles.com/pr/"],a[href^="http://tour.affbuzzads.com/"],a[href^="http://track.adform.net/"],a[href^="http://track.incognitovpn.com/"],a[href^="http://tracking.crazylead.com/"],a[href^="http://tracking.deltamediallc.com/"],a[href^="http://tracking.toroadvertising.com/"],a[href^="http://ul.to/ref/"],a[href^="http://uploaded.net/ref/"],a[href^="http://web.adblade.com/"],a[href^="http://websitedhoome.com/"],a[href^="http://webtrackerplus.com/"],a[href^="http://wgpartner.com/"],a[href^="http://www.123-reg.co.uk/affiliate2.cgi"],a[href^="http://www.1clickdownloader.com/"],a[href^="http://www.1clickmoviedownloader.info/"],a[href^="http://www.FriendlyDuck.com/AF_"],a[href^="http://www.TwinPlan.com/AF_"],a[href^="http://www.accuserveadsystem.com/accuserve-go.php?"],a[href^="http://www.adbrite.com/mb/commerce/purchase_form.php?"],a[href^="http://www.adshost2.com/"],a[href^="http://www.adxpansion.com"],a[href^="http://www.affbuzzads.com/affiliate/"],a[href^="http://www.affiliates1128.com/processing/"],a[href^="http://www.amazon.co.uk/exec/obidos/external-search?"],a[href^="http://www.babylon.com/welcome/index?affID"],a[href^="http://www.badoink.com/go.php?"],a[href^="http://www.bet365.com/dl/~offer?affiliate="],a[href^="http://www.bet365.com/home/default.asp?affiliate="],a[href^="http://www.brightwheel.info/"],a[href^="http://www.cash-duck.com/AF_"],a[href^="http://www.clickansave.net/"],a[href^="http://www.clkads.com/adServe/"],a[href^="http://www.coinducks.com/AF_"],a[href^="http://www.dealcent.com/register.php?affid="],a[href^="http://www.dl-provider.com/search/"],a[href^="http://www.down1oads.com/"],a[href^="http://www.download-provider.org/"],a[href^="http://www.downloadplayer1.com/"],a[href^="http://www.downloadthesefiles.com/"],a[href^="http://www.downloadweb.org/"],a[href^="http://www.drowle.com/"],a[href^="http://www.duckcash.eu/AF_"],a[href^="http://www.ducksnetwork.com/"],a[href^="http://www.easydownloadnow.com/"],a[href^="http://www.epicgameads.com/"],a[href^="http://www.faceporn.net/free?"],a[href^="http://www.fducks.com/"],a[href^="http://www.firstclass-download.com/"],a[href^="http://www.firstload.com/affiliate/"],a[href^="http://www.firstload.de/affiliate/"],a[href^="http://www.flashx.tv/downloadthis"],a[href^="http://www.fonts.com/BannerScript/"],a[href^="http://www.fpcTraffic2.com/blind/in.cgi?"],a[href^="http://www.freefilesdownloader.com/"],a[href^="http://www.friendlyadvertisements.com/"],a[href^="http://www.friendlyquacks.com/"],a[href^="http://www.gamebookers.com/cgi-bin/intro.cgi?"],a[href^="http://www.getyourguide.com/?partner_id="],a[href^="http://www.graboid.com/affiliates/"],a[href^="http://www.greenmangaming.com/?tap_a="],a[href^="http://www.idownloadplay.com/"],a[href^="http://www.incredimail.com/?id="],a[href^="http://www.ireel.com/signup?ref"],a[href^="http://www.linkbucks.com/referral/"],a[href^="http://www.liversely.net/"],a[href^="http://www.menaon.com/installs/"],a[href^="http://www.mobileandinternetadvertising.com/"],a[href^="http://www.moneyducks.com/"],a[href^="http://www.my-dirty-hobby.com/?sub="],a[href^="http://www.myfreepaysite.com/sfw.php?aid"],a[href^="http://www.myfreepaysite.com/sfw_int.php?aid"],a[href^="http://www.mysuperpharm.com/"],a[href^="http://www.myvpn.pro/"],a[href^="http://www.on2url.com/app/adtrack.asp"],a[href^="http://www.paddypower.com/?AFF_ID="],a[href^="http://www.pheedo.com/"],a[href^="http://www.pinkvisualgames.com/?revid="],a[href^="http://www.pinkvisualpad.com/?revid="],a[href^="http://www.plus500.com/?id="],a[href^="http://www.quick-torrent.com/download.html?aff"],a[href^="http://www.revenuehits.com/"],a[href^="http://www.richducks.com/"],a[href^="http://www.ringtonematcher.com/"],a[href^="http://www.roboform.com/php/land.php"],a[href^="http://www.seekbang.com/cs/"],a[href^="http://www.sex.com/?utm_"],a[href^="http://www.sex.com/pics/?utm_"],a[href^="http://www.sex.com/videos/?utm_"],a[href^="http://www.sexgangsters.com/?pid="],a[href^="http://www.sfippa.com/"],a[href^="http://www.streamate.com/exports/"],a[href^="http://www.streamtunerhd.com/signup?"],a[href^="http://www.terraclicks.com/"],a[href^="http://www.text-link-ads.com/"],a[href^="http://www.tirerack.com/affiliates/"],a[href^="http://www.torntv-downloader.com/"],a[href^="http://www.torntvdl.com/"],a[href^="http://www.twinplan.com/AF_"],a[href^="http://www.uniblue.com/cm/"],a[href^="http://www.urmediazone.com/signup"],a[href^="http://www.usearchmedia.com/signup?"],a[href^="http://www.wantstraffic.com/"],a[href^="http://www.webtrackerplus.com/"],a[href^="http://www.xmediaserve.com/"],a[href^="http://www.zergnet.com/i/"],a[href^="http://www1.clickdownloader.com/"],a[href^="http://wxdownloadmanager.com/dl/"],a[href^="http://xads.zedo.com/"],a[href^="http://yads.zedo.com/"],a[href^="http://z1.zedo.com/"],a[href^="http://zevera.com/afi.html"],a[href^="https://ad.atdmt.com/"],a[href^="https://ad.doubleclick.net/"],a[href^="https://adhealers.com/"],a[href^="https://affiliates.bet-at-home.com/processing/"],a[href^="https://atomidownload.com/"],a[href^="https://bs.serving-sys.com"],a[href^="https://click.plista.com/pets"],a[href^="https://dediseedbox.com/clients/aff.php?"],a[href^="https://dltags.com/"],a[href^="https://farm.plista.com/pets"],a[href^="https://go.ad2up.com/"],a[href^="https://paid.outbrain.com/network/redir?"],a[href^="https://pubads.g.doubleclick.net/"],a[href^="https://secure.eveonline.com/ft/?aid="],a[href^="https://torguard.net/aff.php"],a[href^="https://trackjs.com/?utm_source"],a[href^="https://trklvs.com/"],a[href^="https://trust.zone/"],a[href^="https://understandsolar.com/signup/?lead_source="][href*="&amp;tracking_code="],a[href^="https://www.FriendlyDuck.com/AF_"],a[href^="https://www.adskeeper.co.uk/"],a[href^="https://www.dsct1.com/"],a[href^="https://www.firstload.com/affiliate/"],a[href^="https://www.googleadservices.com/pagead/aclk?"],a[href^="https://www.oboom.com/ad/"],a[href^="https://www.secureupload.eu/suprerefid="],a[href^="https://www.share-online.biz/affiliate/"],a[href^="https://www.spyoff.com/"],a[onmousedown^="this.href='/wp-content/embed-ad-content/"],a[onmousedown^="this.href='http://paid.outbrain.com/network/redir?"][target="_blank"],a[onmousedown^="this.href='http://paid.outbrain.com/network/redir?"][target="_blank"] + .ob_source,a[onmousedown^="this.href='http://staffpicks.outbrain.com/network/redir?"][target="_blank"],a[onmousedown^="this.href='http://staffpicks.outbrain.com/network/redir?"][target="_blank"] + .ob_source,a[onmousedown^="this.href='https://paid.outbrain.com/network/redir?"][target="_blank"],a[onmousedown^="this.href='https://paid.outbrain.com/network/redir?"][target="_blank"] + .ob_source,a[style="display:block;width:300px;min-height:250px"][href^="http://li.cnet.com/click?"],a[target="_blank"][href^="http://api.taboola.com/"],a[target="_blank"][onmousedown="this.href^='http://paid.outbrain.com/network/redir?"],aside[id^="div-gpt-ad"],bottomadblock,div &gt; [class][onclick*=".updateAnalyticsEvents"],div[class$="dealnews"] &gt; .dealnews,div[class^="gemini-ad"],div[class^="proadszone-"],div[id^="ADV-SLOT-"],div[id^="YFBMSN"],div[id^="acm-ad-tag-"],div[id^="ad-server-"],div[id^="ad_script_"],div[id^="adrotate_widgets-"],div[id^="ads250_250-widget"],div[id^="advads-"],div[id^="cns_ads_"],div[id^="dfp-slot-"],div[id^="div-adtech-ad-"],div[id^="div_ad_stack_"],div[id^="div_openx_ad_"],div[id^="dmRosAdWrapper"],div[id^="google_dfp_"],div[id^="mainads"],div[id^="proadszone-"],div[id^="q1-adset-"],div[itemtype="http://www.schema.org/WPAdBlock"],iframe[src^="http://cdn1.adexprt.com/"],iframe[src^="http://cdn2.adexprt.com/"],iframe[src^="http://static.mozo.com.au/strips/"],img[alt^="Fuckbook"],input[onclick^="window.open('http://www.FriendlyDuck.com/AF_"],input[onclick^="window.open('http://www.friendlyduck.com/AF_"],p[id^="div-gpt-ad-"],script[src^="http://free-shoutbox.net/app/webroot/shoutbox/sb.php?shoutbox="] + #freeshoutbox_content,td[valign="top"] &gt; .mainmenu[style="padding:10px 0 0 0 !important;"],topadblock {display: none !important; color: #72da9a !important; background-color: #a0abfd !important;}#AD_Top,#AD_banner,#AdColumn,#AdContainer,#AdHeader,#AdImage,#Adcode,#AdvertiseFrame,#Advertisements,#BottomAdContainer,#BottomAds,#ContentAd,#PreRollAd,#RightAdBlock,#TopAd,#WNAd41,#ad-area,#ad-background,#ad-bg,#ad-bottom,#ad-container,#ad-header,#ad-header-728x90,#ad-leaderboard,#ad-main,#ad-panel,#ad-right,#ad-rotator,#ad-text,#ad-top,#ad-top-banner-placeholder,#ad-top-wrapper,#ad-unit,#ad-wrapper,#ad468,#ad728,#ad728x90,#adBanner,#adBelt,#adComponentWrapper,#adDiv,#adFrame,#adGallery,#adHeader,#adHolder,#adLayer,#adLeader,#adPosition0,#adText,#ad_1,#ad_2,#ad_3,#ad_4,#ad_5,#ad_728_90,#ad_area,#ad_banner,#ad_center,#ad_content,#ad_header,#ad_leaderboard,#ad_main,#ad_overlay,#ad_space,#ad_square,#ad_table,#ad_topslot,#ad_unit,#ad_wrap,#ad_wrapper,#adaptv_ad_player_div,#adbackground,#adbanner,#adbar,#adblock,#adboard,#adbody,#adbox,#adcode,#adcontainer,#adcontainer1,#adcontent,#adhead,#adheader,#adimg1,#adlayer,#adnews,#adposition3,#adright,#ads-col,#ads-wrapper,#ads1,#adsHeader,#ads_bottom,#ads_right,#ads_top,#ads_wrapper,#adsdiv,#adsense,#adsense_block,#adsense_inline,#adsensewide,#adspace,#adspace_top,#adspot-300x250-pos-1,#adspot-300x250-pos-2,#adstop,#adtext,#adtop,#adv-masthead,#adv-top,#advert1,#advert2,#advertContainer,#advert_box,#advertise,#advertisement1,#advertisetop,#advertising_wrapper,#adverts,#advtop,#adwrapper,#banner-ad,#bannerAd,#bannerAdWrapper,#banner_topad,#bannerad,#bigAd,#bigad,#body_ad,#bottomAd,#bottomAds,#bottom_ad,#centerads,#cmn_ad_tag_head,#companionAd,#content-header-ad,#contentAd,#content_ads,#content_adv,#contentad,#dart-container-728x90,#dfp_ad_Entry_728x90,#dfp_ad_Home_728x90,#divAd,#div_prerollAd_1,#download_ad,#featuread,#featured-ads,#featuredAds,#footer_ad,#footer_ads,#game-ad,#googlead,#gridAdSidebar,#head-ad,#header-ads,#headerAd,#headerAdContainer,#header_ad,#homead,#ka_adRightSkyscraperWide,#leaderAd,#leaderBoardAd,#leaderboard-ad,#leaderboard-advertisement,#leaderboardad,#left-ad,#left_ads,#leftad,#leftads,#logoAd,#logo_ad,#mainAd,#main_ad,#mpu2,#mpu2_container,#mpu_container,#msad,#my-adsFPAD,#myAd,#player_ads,#pre_advertising_wrapper,#prerollAd,#promo-ad,#publicidad,#reklama,#rh-ad,#right_ads,#right_adsense,#search-sponsor,#searchAd,#search_ads,#sideAd,#side_ads,#sidebar-ads,#sidebar_ad,#sidebar_ads,#skybox-ad,#sponsorAdDiv,#sponsorText,#sponsoredwellcontainerbottom,#sponsors-home,#takeover_ad,#text-ads,#theAd,#top-ad,#top-ad-content,#topAd,#topAdSpace,#topAdSpace_div,#topAdvert,#topBannerAd,#top_ad,#top_ads,#topad,#topadvert,#topbannerad,#under_story_ad,#videoAd,#videoads,.ADBAR,.AdBar,.AdBody:not(body),.AdBox,.AdInfo,.AdSidebar,.AdTitle,.AdvertContainer,.HomeAds,.IM_ad_unit,.LazyLoadAd,.RelatedAds,.SponsoredContent,.ad-300x250,.ad-970,.ad-banner,.ad-block,.ad-body,.ad-border,.ad-btn,.ad-button,.ad-cat,.ad-cell,.ad-display,.ad-enabled,.ad-header,.ad-holder,.ad-img,.ad-inner,.ad-item,.ad-leader-top,.ad-leaderboard,.ad-left,.ad-link,.ad-links,.ad-loaded,.ad-panel,.ad-placement,.ad-rail,.ad-right,.ad-row,.ad-scroll,.ad-section,.ad-served,.ad-sidebar,.ad-source,.ad-square,.ad-stack,.ad-text,.ad-top,.ad-unit,.ad-unit-300-wrapper,.ad-vertical-container,.ad-wide,.ad-wrap,.ad-wrapper,.ad300,.ad468,.ad728,.ad90,.adBar,.adBlock,.adBottomBoard,.adBox,.adChoicesLogo,.adContent,.adDiv,.adElement,.adFrame,.adFrameCnt,.adHead,.adHeader,.adHeaderblack,.adHeadline,.adHolder,.adHoldert,.adImg,.adItem,.adLink,.adMessage,.adMiddle,.adMod,.adModule,.adOverlay,.adPanel,.adPod,.adResult,.adRight,.adRotator,.adSpace,.adSpot,.adText,.adTitle,.adTopHome,.adWidget,.adWrap,.ad_1,.ad_160,.ad_160x600,.ad_2,.ad_3,.ad_728x90,.ad_960,.ad_Right,.ad_block,.ad_body,.ad_bottom,.ad_container,.ad_description,.ad_global_header,.ad_head_rectangle,.ad_header,.ad_img,.ad_item,.ad_leaderboard,.ad_middle,.ad_outer,.ad_promo,.ad_slug_table,.ad_space,.ad_spot,.ad_text,.ad_title,.ad_trick_header,.ad_trick_left,.ad_wrap,.ad_wrapper,.adarea,.adbanner,.adbar,.adbottom,.adbutton,.adcolumn,.adcont,.addiv,.adframe,.adfree,.adheader,.adholder,.adinfo,.adkit,.adlink,.adlist,.admain,.admiddle,.adright,.adrow1,.adrow2,.ads-1,.ads-2,.ads-3,.ads-300-250,.ads-area,.ads-bg,.ads-col,.ads-header,.ads-holder,.ads-inline,.ads-item,.ads-right,.ads-section,.ads-title,.ads-top,.ads1,.adsBlock,.adsWidget,.ads_catDiv,.ads_div,.ads_top,.ads_wrapper,.adsbottombox,.adsbox,.adsbygoogle,.adscontainer,.adshome,.adside,.adslot,.adslot_blurred,.adspace,.adtable,.adtile,.adtop,.adv300,.adv_300,.adv_txt,.advert-block,.advert-box,.advert-container,.advert-content,.advert-horizontal,.advert-wrapper,.advert2,.advertColumn,.advertContainer,.advertLink,.advertText,.advert_area,.advert_container,.advert_list,.advertbox,.advertisement-1,.advertisement-block,.advertiser,.advertising_banner,.advertising_block,.advertisment,.advertorial,.adverts,.adverttext,.adwords,.afs_ads,.after-post-ad,.article_ad,.b-advert,.banner-ad,.banner-ads,.banner160x600,.banner300,.bannerAd,.banner_728x90,.banner_ad,.bannerad,.block-ad,.block-ec_ads,.block-simpleads,.blog-ads,.bottom-ad,.bottom-ads,.bottom-left-ad,.bottomAds,.bottom_ad_block,.box-ads,.box-radvert,.box-recommend-ad,.box_ads,.box_adv,.boxad,.boxadv,.btn-ad,.can_ad_slug,.category-ad,.change_AdContainer,.chitikaAdBlock,.commerce-inset,.container_ad,.container_row_ad,.contentAd,.contentAds,.content_ads,.content_tagsAdTech,.cp-adsInited,.custom-ad,.desktop-ad,.dfp-ad,.dfp-ad-unit,.dfp-tag-wrapper,.displayAd,.download_ad,.ec-ads-remove-if-empty,.featured-ad,.featuredAdBox,.flash-advertisement,.footer-ad,.footer-ads,.footer_ad,.footerad,.forumAd,.gallery-ad,.google-sponsored,.googleAdSense,.googleAds,.greyAd,.has-ad,.hasads,.header-ad,.headerAd,.header_ad,.header_ad_center,.header_advert,.headerad,.headerads,.home-ad,.home-ads,.homeAd,.homead,.homepage-ad,.homepage_ads,.horizontal_ad,.img_ad,.imgad,.inner_ad,.innerad,.insert-post-ads,.interstitial_ad_wrapper,.ipsAd,.item-ads,.item-container-ad,.js-sticky-ad,.leaderboard-ad,.leaderboard-ads,.leftAd,.leftad,.list-ad,.list-ads,.listad,.logo-ad,.marketing-ad,.mid_ad,.middle_AD,.mod-adopenx,.module-ad,.nav-ad,.newsAd,.node-ad,.oasad,.oio-banner-zone,.openx,.overlay-ads,.page-ad,.page_ad,.pfAd,.plainAd,.playerAd,.player_ad,.player_hover_ad,.pm-ad,.post-ad,.post-sponsored,.post_ad,.postad,.premiumAdOverlay,.premiumAdOverlayClose,.promoAd,.pub_300x250,.pub_300x250m,.pub_728x90,.publicidade,.pushdown-ad,.rail-ad,.rbRectAd,.rectangle_ad,.refreshAds,.region-top-ad-position,.reklam,.reklama,.reportAdLink,.resultad,.review-ad,.right-ad,.rightAd,.right_ad,.right_ads_column,.rightad,.rightadv,.searchAds,.searchad,.searchads,.section-sponsor,.showAd,.side-ad,.side-bar-ad-position1,.sideAd,.sidebar-ads,.single-ad,.singleAd,.skinAd,.sky_ad,.skyscraperAd,.slide-ad,.smallAd,.small_ad,.smallads,.sponsor-box,.sponsor-logo,.sponsorBlock,.sponsorBottom,.sponsoredLinks,.sponsorlink,.sticky-ad,.story-ad,.taboola-ad,.tc_ad_unit,.text-ad,.text-ad-links,.text-ads,.textAd,.text_ad,.text_ads,.textad,.textads,.top-ad,.top-ad-container,.top-ad-content,.top-ad-wrapper,.topAds,.top_ad,.top_ad_div,.top_ad_wrap,.top_ads,.topads,.tower-ad,.trc-content-sponsored,.trc_rbox .syndicatedItem,.trc_rbox_border_elm .syndicatedItem,.trc_rbox_div .syndicatedItem,.trc_related_container div[data-item-syndicated="true"],.type_ads_default,.view_ad,.wideAd,.withAds,.wnad,.wpInsertInPostAd,.yom-ad,[href^="http://join.seemygf.com/track/"],[href^="http://myalternativegflink.com/track/"],[href^="http://secure.18exgfs.com/track/"],[href^="http://secure.badassgirlfriends.com/track/"],[href^="http://secure.chatrevenge.com/track/"],[href^="http://secure.fubilov.com/track/"],[href^="http://secure.hotgfvideos.com/track/"],[href^="http://secure.mynngf.com/track/"],[href^="http://secure.obsessedwithmyself.com/track/"],[href^="http://secure.slutswithphones.com/track/"],[href^="http://secure.watchmygf.com/track/"],a[href*=".trust.zone"],a[href*="/adrotate-out.php?"],a[href*="medicinetizer.ru"],a[href*="runetki.com"],a[href^="http://ad-emea.doubleclick.net/"],a[href^="http://ad.doubleclick.net/"],a[href^="http://adfarm.mediaplex.com/"],a[href^="http://ads.betfair.com/redirect.aspx?"],a[href^="http://ads2.williamhill.com/redirect.aspx?"],a[href^="http://adserving.unibet.com/"],a[href^="http://adultfriendfinder.com/p/register.cgi?pid="],a[href^="http://affiliate.coral.co.uk/processing/"],a[href^="http://marketgid.com"],a[href^="http://mgid.com/"],a[href^="http://online.ladbrokes.com/promoRedirect?"],a[href^="http://pubads.g.doubleclick.net/"],a[href^="http://us.marketgid.com"],a[href^="http://www.bet365.com/home/?affiliate"],a[href^="http://www.fbooksluts.com/"],a[href^="http://www.fleshlight.com/"],a[href^="http://www.liutilities.com/"],a[href^="http://www.socialsex.com/"],a[href^="http://www.yourfuckbook.com/?"],div[id^="MarketGid"],div[id^="dfp-ad-"],div[id^="div-gpt-ad"],div[id^="google_ads_iframe_"],div[itemtype="http://schema.org/WPAdBlock"],iframe[id^="google_ads_frame"],iframe[id^="google_ads_iframe"],iframe[src^="http://ad.yieldmanager.com/"] {display: none !important; color: #72da9a !important; background-color: #a0abfd !important;}&lt;/style&gt;
&lt;/head&gt;
&lt;body onload="brython({debug:1, cache:'none'})"&gt;
&lt;/body&gt;&lt;/html&gt;
'''
@color
@language python
table = (
    '&lt;html&gt;',
    '&lt;head&gt;', 
    '&lt;body onload="brython({debug:1, cache:\'none\'})"&gt;',
)
try:
    c.importCommands.htmlUnitTest(p,s=s,showTree=True)
    p2 = c.p.firstChild().firstChild()
    for h in table:
        assert p2.h == h, (p2.h, h)
        p2.moveToThreadNext()
    if 1:
        p.deleteAllChildren()
finally:
        c.redraw()
</t>
<t tx="ekr.20170617131333.1">s = '''\
@g.cmd('my-command')
def myCommand(event=None):
    pass
'''
table = (
    # (1, '@g.cmd myCommand'),
    (1, "@g.cmd('my-command') myCommand"),
)
try:
    test_node = p.copy()
    test_node.deleteAllChildren()
    c.importCommands.pythonUnitTest(p,s=s,showTree=True)
    after = p.nodeAfterTree()
    root = p.lastChild()
    assert root.h.startswith('@@'), root.h
    p = root.firstChild()
    if 1:
        for n, h in table:
            n2 = p.level() - root.level()
            assert h == p.h, (h, p.h)
            assert n == n2, (n, n2, p.h)
            p.moveToThreadNext()
        assert p == after, ('tree comp failed', p.h)
    test_node.deleteAllChildren()
finally:
    c.redraw()
</t>
<t tx="ekr.20170701153730.1"></t>
<t tx="ekr.20170712045534.1"></t>
<t tx="ekr.20170712045644.1">======================================================================
ERROR: runTest (leo.core.leoTest.GeneralTestCase)
@test x.makeShadowDirectory
@test all commands have an event arg

@test add/delete html comments

----------------------------------------------------------------------
Traceback (most recent call last):
  File "/mnt/usr1/usr1/home/tbrown/t/Package/leo/git/leo-editor/leo/core/leoTest.py", line 211, in runTest
    builtins.execfile(scriptFile, d)
  File "/home/tbrown/.leo/scriptFile.py", line 27, in &lt;module&gt;
    assert p.b == s,'fail5: s\n%s\nresult\n%s' % (repr(s),repr(p.b))
AssertionError: fail5: s
u'@language html\n&lt;html&gt;\n    text \n&lt;/html&gt;\n'
result
u'@language html\n&lt;html&gt;\n   text \n&lt;/html&gt;\n'

======================================================================
FAIL: runTest (leo.core.leoTest.EditBodyTestCase)
EditBodyTestCase: addComments
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/mnt/usr1/usr1/home/tbrown/t/Package/leo/git/leo-editor/leo/core/leoTest.py", line 105, in runTest
    self.editBody()
  File "/mnt/usr1/usr1/home/tbrown/t/Package/leo/git/leo-editor/leo/core/leoTest.py", line 85, in editBody
    compareHeadlines=False), '%s: before undo1' % commandName
AssertionError: addComments: before undo1</t>
<t tx="ekr.20170712053944.1"></t>
<t tx="ekr.20170712132824.1"></t>
<t tx="ekr.20170712132900.1">w = c.frame.body.wrapper
p = g.findNodeInTree(c,p,'html')
assert p,'not found: html'
old_indent = c.config.getBool('indent_added_comments',default=True)
table = (
    (
        False,
        '@language html\n&lt;html&gt;\n&lt;!-- text --&gt;\n&lt;/html&gt;\n',
        '@language html\n&lt;html&gt;\ntext\n&lt;/html&gt;\n',
    ),
    (
        True,
        '@language html\n&lt;html&gt;\n    &lt;!-- text --&gt;\n&lt;/html&gt;\n',
        '@language html\n&lt;html&gt;\n    text\n&lt;/html&gt;\n',
    ),
)
try:
    for indent, s1, expected in table:
        # Step 1: set the setting.
        c.config.set(None, 'bool', 'indent_added_comments', indent, warn=False)
        val = c.config.getBool('indent_added_comments')
        assert indent == val, (repr(indent), repr(val))
        # Step 2: set p.b and the insert point.
        c.selectPosition(p)
        p.b = s1
        i = p.b.find('text')
        assert i &gt; -1,'fail1: %s' % (repr(p.b))
        w.setSelectionRange(i,i+4)
        # Step 3: test delete-comments
        c.deleteComments()
        assert p.b == expected, ('indent: %5s got:\n%r\nexpected:\n%r' % (indent, p.b, expected))
finally:
    c.config.set(p, 'bool', 'indent_added_comments', old_indent)
    val = c.config.getBool('indent_added_comments')
    assert old_indent == val, (repr(indent), repr(val))
</t>
<t tx="ekr.20170712132933.1">@language html
</t>
<t tx="ekr.20170712132933.2">@language html
&lt;html&gt;
    text
&lt;/html&gt;
</t>
<t tx="ekr.20170712134334.1">w = c.frame.body.wrapper
p = g.findNodeInTree(c,p,'python')
assert p,'not found: python'
old_indent = c.config.getBool('indent_added_comments',default=True)
table = (
    (
        True,
        '@language python\ndef spam():\n    pass\n\n# after',
        '@language python\ndef spam():\n    # pass\n\n# after',
    ),
    (
        False,
        '@language python\ndef spam():\n    pass\n\n# after',
        '@language python\ndef spam():\n#     pass\n\n# after',
    ),
)
try:
    for indent, s1, expected in table:
        # Step 1: set the setting.
        c.config.set(None, 'bool', 'indent_added_comments', indent, warn=False)
        val = c.config.getBool('indent_added_comments')
        assert indent == val, (repr(indent), repr(val))
        # Step 2: set p.b and the insert point.
        c.selectPosition(p)
        p.b = s1
        i = p.b.find('pass')
        assert i &gt; -1,'fail1: %s' % (repr(p.b))
        w.setSelectionRange(i,i+4)
        # Step 3: test add-comments
        c.addComments()
        assert p.b == expected, ('indent: %5s got:\n%r\nexpected:\n%r' % (indent, p.b, expected))
finally:
    c.config.set(p, 'bool', 'indent_added_comments', old_indent)
    val = c.config.getBool('indent_added_comments')
    assert old_indent == val, (repr(indent), repr(val))
</t>
<t tx="ekr.20170712134334.2">@language python
def spam():
#     pass

# after
</t>
<t tx="ekr.20170712134948.1">w = c.frame.body.wrapper
p = g.findNodeInTree(c,p,'python')
assert p,'not found: python'
old_indent = c.config.getBool('indent_added_comments',default=True)
table = (
    (
        True,
        '@language python\ndef spam():\n    # pass\n\n# after',
        '@language python\ndef spam():\n    pass\n\n# after',
    ),
    (
        False,
        '@language python\ndef spam():\n#     pass\n\n# after',
        '@language python\ndef spam():\n    pass\n\n# after',
    ),
)
try:
    for indent, s1, expected in table:
        # Step 1: set the setting.
        c.config.set(None, 'bool', 'indent_added_comments', indent, warn=False)
        val = c.config.getBool('indent_added_comments')
        assert indent == val, (repr(indent), repr(val))
        # Step 2: set p.b and the insert point.
        c.selectPosition(p)
        p.b = s1
        i = p.b.find('pass')
        assert i &gt; -1,'fail1: %s' % (repr(p.b))
        w.setSelectionRange(i,i+4)
        # Step 3: test delete-comments
        c.deleteComments()
        assert p.b == expected, ('indent: %5s got:\n%r\nexpected:\n%r' % (indent, p.b, expected))
finally:
    c.config.set(p, 'bool', 'indent_added_comments', old_indent)
    val = c.config.getBool('indent_added_comments')
    assert old_indent == val, (repr(indent), repr(val))
</t>
<t tx="ekr.20170712134948.3">@language python
def spam():
    pass

# after
</t>
<t tx="ekr.20170712135224.1">w = c.frame.body.wrapper
p = g.findNodeInTree(c,p,'rest and python')
assert p,'not found: rest and python'
old_indent = c.config.getBool('indent_added_comments',default=True)
table = (
    (
        False,
        '@language rest\nrest text.\n@language python\ndef spam():\n#     pass\n# after',
        '@language rest\nrest text.\n@language python\ndef spam():\n    pass\n# after',
    ),
    (
        True,
        '@language rest\nrest text.\n@language python\ndef spam():\n    # pass\n# after',
        '@language rest\nrest text.\n@language python\ndef spam():\n    pass\n# after',
    ),
)
try:
    for indent, s1, expected in table:
        # Step 1: set the setting.
        c.config.set(None, 'bool', 'indent_added_comments', indent, warn=False)
        val = c.config.getBool('indent_added_comments')
        assert indent == val, (repr(indent), repr(val))
        # Step 2: set p.b and the insert point.
        c.selectPosition(p)
        p.b = s1
        i = p.b.find('pass')
        assert i &gt; -1,'fail1: %s' % (repr(p.b))
        w.setSelectionRange(i,i+4)
        # Step 3: test add-comments
        c.deleteComments()
        assert p.b == expected, ('indent: %5s got:\n%r\nexpected:\n%r' % (indent, p.b, expected))
finally:
    c.config.set(p, 'bool', 'indent_added_comments', old_indent)
    val = c.config.getBool('indent_added_comments')
    assert old_indent == val, (repr(indent), repr(val))
</t>
<t tx="ekr.20170712135224.2">@language rest
rest text.
@language python
def spam():
    pass
# after
</t>
<t tx="ekr.20170712140759.1">@language rest
@wrap

I'm also having 3 failed tests with current master, some of those seem to be different from Terry's ones:

Trying to create a QVariant instance of QMetaType::Void type, an invalid QVariant will be constructed instead


======================================================================
FAIL: runTest (leo.core.leoTest.GeneralTestCase)
@test g.app.config @buttons and @commands logic

----------------------------------------------------------------------
Traceback (most recent call last):
  File "C:\dev\Leo-5.4\leo\core\leoTest.py", line 209, in runTest
    exec(compile(script, scriptFile, 'exec'), d)
  File "C:\Users\sysadmin\.leo\scriptFile.py", line 26, in &lt;module&gt;
    assert fn in aList,'%s not in unitTestDict[%s]' % (fn,key)
AssertionError: myLeoSettings.leo not in unitTestDict[config.doCommands-file-names]

======================================================================
FAIL: runTest (leo.core.leoTest.GeneralTestCase)
@test unbound Alt-9 key is completely ignored

----------------------------------------------------------------------
Traceback (most recent call last):
  File "C:\dev\Leo-5.4\leo\core\leoTest.py", line 209, in runTest
    exec(compile(script, scriptFile, 'exec'), d)
  File "C:\Users\sysadmin\.leo\scriptFile.py", line 27, in &lt;module&gt;
    assert g.app.unitTestDict.get('handleUnboundChar-ignore-alt-or-ctrl')
AssertionError

----------------------------------------------------------------------
Ran 905 tests in 120.272s

FAILED (failures=3, skipped=11)

@language python


</t>
<t tx="ekr.20170818044949.1">gnx: ekr.20090627070131.4975
</t>
<t tx="ekr.20170818044949.2">gnx: ekr.20090627070131.4975
</t>
<t tx="ekr.20170818044949.3">gnx: ekr.20090627070131.4976
unl: spam
gnx: ekr.20090627070131.4977
unl: cheese
</t>
<t tx="ekr.20170818044949.4">gnx: ekr.20100801125533.5788
</t>
<t tx="ekr.20170818044949.5">gnx: ekr.20100801125533.5788
</t>
<t tx="ekr.20170818044949.6">gnx: ekr.20100801125533.5789
unl: spam
gnx: ekr.20100801125533.5790
unl: cheese
</t>
<t tx="ekr.20171112182742.3"></t>
<t tx="ekr.20171112182742.4"></t>
<t tx="ekr.20171112182742.5"></t>
<t tx="ekr.20171120113732.1">s = '''\
* Section 1 :tag1:
* Section 2 :tag2:
* Section 3 :tag3:tag4:
'''
table = (
    'Section 1 :tag1:',
    'Section 2 :tag2:',
    'Section 3 :tag3:tag4:',
)
try:
    c.importCommands.orgUnitTest(p,s=s,showTree=True)
    if 1:
        root = c.p.firstChild()
        p2 = root.firstChild()
        for h in table:
            assert p2.h == h, (p2.h, h)
            p2.moveToThreadNext()
        assert not root.isAncestorOf(p2), p2.h # Extra nodes
finally:
    if 1:
        p.deleteAllChildren()
    c.redraw()

</t>
<t tx="ekr.20171126152936.1"># Required for unit tests: See #577.</t>
<t tx="ekr.20171126153044.1"># Required for unit tests: See #577.</t>
<t tx="ekr.20171126153138.1">See #577: https://github.com/leo-editor/leo-editor/issues/577
</t>
<t tx="ekr.20171126172628.1"></t>
<t tx="ekr.20171222103210.1">s = '''\
// Easy test for #639: https://github.com/leo-editor/leo-editor/issues/639

//=============================================================================
// rpg_core.js v1.3.0
//=============================================================================

//-----------------------------------------------------------------------------
/**
 * This is not a class, but contains some methods that will be added to the
 * standard Javascript objects.
 *
 * @class JsExtensions
 */
function JsExtensions() {
    throw new Error('This is not a class');
}

/**
 * Returns a number whose value is limited to the given range.
 *
 * @method Number.prototype.clamp
 * @param {Number} min The lower boundary
 * @param {Number} max The upper boundary
 * @return {Number} A number in the range (min, max)
 */
Number.prototype.clamp = function(min, max) {
    return Math.min(Math.max(this, min), max);
};
'''

c.importCommands.javaScriptUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20171223094900.1">s = '''\
// Acid test for #639: https://github.com/leo-editor/leo-editor/issues/639
require([
    'jquery',
], function(
        $,
        termjs,
){
    var head = "head"
    function f1() {
        var head1 = "head1"
        function f11 () {
            var v11 ="v1.1"
        }
        var middle1 = "middle1"
        function f12 () {
            var v12 ="v1.2"
        }
        var tail1 = "tail1"
    }
    var middle = "middle"
    function f2() {
        var head2 = "head2"
        function f21 () {
            var v21 ="2.1"
        }
        var middle2 = "middle2"
        function f22 () {
            var v22 = "2.2.1"
        }
        var tail2 = "tail2"
    }
    var tail = "tail"
});
'''

c.importCommands.javaScriptUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20171224042157.1">s = '''\
// Acid test for #639: https://github.com/leo-editor/leo-editor/issues/639
require([
    'jquery',
], function(
        $,
        termjs,
){
    var header = $("#header")[0];
    function calculate_size() {
        var height = $(window).height() - header.offsetHeight;
    }
    page.show_header();
    window.onresize = function() {
      terminal.socket.send(JSON.stringify([
            "set_size", geom.rows, geom.cols,
            $(window).height(), $(window).width()])
        );
    };
    window.terminal = terminal;
});
'''

c.importCommands.javaScriptUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20171225163019.33">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20171225163019.34">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20171230050347.1">s = '''\
Intro line.
* Section 1
Sec 1.
* Section 2
Sec 2.
'''
table = (
    'Section 1',
    'Section 2',
)
try:
    c.importCommands.orgUnitTest(p,s=s,showTree=True)
    if 1:
        root = c.p.firstChild()
        p2 = root.firstChild()
        for h in table:
            assert p2.h == h, (p2.h, h)
            p2.moveToThreadNext()
        assert not root.isAncestorOf(p2), p2.h # Extra nodes
finally:
    if 1:
        p.deleteAllChildren()
    c.redraw()

</t>
<t tx="ekr.20171230052539.1">gnx: ekr.20150626101627.1
</t>
<t tx="ekr.20171230164813.1">gnx: ekr.20150626100719.1
</t>
<t tx="ekr.20171230165904.48">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20171230165904.49">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20171230170021.1">gnx: ekr.20150626101842.1
</t>
<t tx="ekr.20171230171138.1">Header line.

</t>
<t tx="ekr.20171230171343.1">gnx: ekr.20080904084223.1
</t>
<t tx="ekr.20171230171343.12">gnx: ekr.20150626093745.1
</t>
<t tx="ekr.20171230171343.4">gnx: ekr.20090704085350.5056
</t>
<t tx="ekr.20171230171343.6">gnx: ekr.20110610122533.3407
</t>
<t tx="ekr.20171230171343.8">gnx: ekr.20161130052935.1
</t>
<t tx="ekr.20171230171355.20"></t>
<t tx="ekr.20171230171407.1">gnx: ekr.20170504122721.1
unl: at_auto_child
</t>
<t tx="ekr.20171230171407.3">gnx: ekr.20170504122721.4
unl: spam
gnx: ekr.20170504122721.5
unl: eggs
</t>
<t tx="ekr.20171230171407.4">gnx: ekr.20170504122721.6
unl: class class1
gnx: ekr.20170504122721.7
unl: class class1--&gt;class1_method1
gnx: ekr.20170504122721.8
unl: class class1--&gt;class1_method2
gnx: ekr.20170504122721.9
unl: class class2
gnx: ekr.20170504122721.10
unl: class class2--&gt;class2_method1
gnx: ekr.20170504122721.11
unl: class class2--&gt;class2_method2
</t>
<t tx="ekr.20171230171407.5">gnx: ekr.20170504122721.12
unl: A level one node
gnx: ekr.20170504122721.13
unl: Another level one node
gnx: ekr.20170504122721.14
unl: Another level one node--&gt;A level 2 node
</t>
<t tx="ekr.20171230171407.6">gnx: ekr.20170504122721.15
unl: section 1
gnx: ekr.20170504122721.16
unl: section 2
</t>
<t tx="ekr.20171230171407.7">gnx: ekr.20171230171355.20
unl: First line.
gnx: ekr.20170504122721.17
unl: section 1
gnx: ekr.20170504122721.18
unl: section 2
</t>
<t tx="ekr.20171230171407.8"></t>
<t tx="ekr.20171230171614.10">gnx: ekr.20171230171138.1
unl: !Declarations
gnx: ekr.20170504122721.2
unl: section 1
gnx: ekr.20170504122721.3
unl: section 2
</t>
<t tx="ekr.20180123104303.1">@first # -*- coding: utf-8 -*-
s = '''\
* Events
  :PROPERTIES:
  :CATEGORY: events
  :END:
** 整理个人生活
*** 每周惯例
'''
table = (
    'Events',
    '整理个人生活',
    '每周惯例',
)
try:
    c.importCommands.orgUnitTest(p,s=s,showTree=True)
    if 1:
        root = c.p.firstChild()
        p2 = root.firstChild()
        for h in table:
            assert p2.h == g.toUnicode(h), (p2.h, g.toUnicode(h))
            p2.moveToThreadNext()
        assert not root.isAncestorOf(p2), p2.h # Extra nodes
finally:
    if 1:
        p.deleteAllChildren()
    c.redraw()
</t>
<t tx="ekr.20180123135055.48">&lt;?php
@others
@language php
@tabwidth -4
</t>
<t tx="ekr.20180123135055.49">class foo {
    public $bar = &lt;&lt;&lt;EOT
a test.
bar
EOT;
}
?&gt;
</t>
<t tx="ekr.20180214042153.1">False is the legacy value.</t>
</tnodes>
</leo_file>
